/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'WalletAction',
    inputs: [
      {
        name: 'op',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'asset1',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset2',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount1',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount2',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdValue',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'legoId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'signer',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'WalletActionExt',
    inputs: [
      {
        name: 'op',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'asset1',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset2',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount2',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdValue',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'extra',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'onERC721Received',
    inputs: [
      {
        name: '_operator',
        type: 'address',
      },
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_tokenId',
        type: 'uint256',
      },
      {
        name: '_data',
        type: 'bytes',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bytes4',
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'fallback',
  },
  {
    stateMutability: 'pure',
    type: 'function',
    name: 'apiVersion',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transferFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transferFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transferFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transferFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_isCheque',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transferFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_isCheque',
        type: 'bool',
      },
      {
        name: '_isSpecialTx',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_isSpecialTx',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'rebalanceYieldPosition',
    inputs: [
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'rebalanceYieldPosition',
    inputs: [
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVaultAddr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'rebalanceYieldPosition',
    inputs: [
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVaultAddr',
        type: 'address',
      },
      {
        name: '_fromVaultAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'rebalanceYieldPosition',
    inputs: [
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVaultAddr',
        type: 'address',
      },
      {
        name: '_fromVaultAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'swapTokens',
    inputs: [
      {
        name: '_instructions',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mintOrRedeemAsset',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mintOrRedeemAsset',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mintOrRedeemAsset',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_minAmountOut',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mintOrRedeemAsset',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_minAmountOut',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmMintOrRedeemAsset',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmMintOrRedeemAsset',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addCollateral',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addCollateral',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addCollateral',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeCollateral',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeCollateral',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeCollateral',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'borrow',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'borrow',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'borrow',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'repayDebt',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'repayDebt',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
      {
        name: '_paymentAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'repayDebt',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
      {
        name: '_paymentAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'convertWethToEth',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'convertWethToEth',
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    name: 'convertEthToWeth',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    name: 'convertEthToWeth',
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'updateAssetData',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_shouldCheckYield',
        type: 'bool',
      },
      {
        name: '_prevTotalUsdValue',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'updateAssetData',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_shouldCheckYield',
        type: 'bool',
      },
      {
        name: '_prevTotalUsdValue',
        type: 'uint256',
      },
      {
        name: '_ad',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'hatchery',
            type: 'address',
          },
          {
            name: 'lootDistributor',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
          {
            name: 'billing',
            type: 'address',
          },
          {
            name: 'wallet',
            type: 'address',
          },
          {
            name: 'walletConfig',
            type: 'address',
          },
          {
            name: 'walletOwner',
            type: 'address',
          },
          {
            name: 'inEjectMode',
            type: 'bool',
          },
          {
            name: 'isFrozen',
            type: 'bool',
          },
          {
            name: 'lastTotalUsdValue',
            type: 'uint256',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'isManager',
            type: 'bool',
          },
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'legoAddr',
            type: 'address',
          },
          {
            name: 'eth',
            type: 'address',
          },
          {
            name: 'weth',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'deregisterAsset',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverNft',
    inputs: [
      {
        name: '_collection',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setLegoAccessForAction',
    inputs: [
      {
        name: '_legoAddr',
        type: 'address',
      },
      {
        name: '_action',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'walletConfig',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'assetData',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'assetBalance',
            type: 'uint256',
          },
          {
            name: 'usdValue',
            type: 'uint256',
          },
          {
            name: 'isYieldAsset',
            type: 'bool',
          },
          {
            name: 'lastPricePerShare',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'assets',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'indexOfAsset',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'numAssets',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'WETH',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'ETH',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_wethAddr',
        type: 'address',
      },
      {
        name: '_ethAddr',
        type: 'address',
      },
      {
        name: '_walletConfig',
        type: 'address',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0x338ABD3c0316B0a788036A6639FBFc24761b969b'

export type Contract = {
  calls: {
    onERC721Received: (
      operator: `0x${string}`,
      owner: `0x${string}`,
      tokenId: bigint,
      data: `0x${string}`,
    ) => Promise<`0x${string}`>
    apiVersion: () => Promise<string>
    walletConfig: () => Promise<`0x${string}`>
    assetData: (
      arg0: `0x${string}`,
    ) => Promise<{ assetBalance: bigint; usdValue: bigint; isYieldAsset: boolean; lastPricePerShare: bigint }>
    assets: (arg0: bigint) => Promise<`0x${string}`>
    indexOfAsset: (arg0: `0x${string}`) => Promise<bigint>
    numAssets: () => Promise<bigint>
    WETH: () => Promise<`0x${string}`>
    ETH: () => Promise<`0x${string}`>
  }
  mutations: {
    transferFunds: (
      recipient: `0x${string}`,
      asset?: `0x${string}`,
      amount?: bigint,
      isCheque?: boolean,
      isSpecialTx?: boolean,
    ) => Promise<[bigint, bigint]>
    depositForYield: (
      legoId: bigint,
      asset: `0x${string}`,
      vaultAddr?: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    withdrawFromYield: (
      legoId: bigint,
      vaultToken: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
      isSpecialTx?: boolean,
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    rebalanceYieldPosition: (
      fromLegoId: bigint,
      fromVaultToken: `0x${string}`,
      toLegoId: bigint,
      toVaultAddr?: `0x${string}`,
      fromVaultAmount?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    swapTokens: (
      instructions: {
        legoId: bigint
        amountIn: bigint
        minAmountOut: bigint
        tokenPath: `0x${string}`[]
        poolPath: `0x${string}`[]
      }[],
    ) => Promise<[`0x${string}`, bigint, `0x${string}`, bigint, bigint]>
    mintOrRedeemAsset: (
      legoId: bigint,
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn?: bigint,
      minAmountOut?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint, boolean, bigint]>
    confirmMintOrRedeemAsset: (
      legoId: bigint,
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint]>
    addCollateral: (
      legoId: bigint,
      asset: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint]>
    removeCollateral: (
      legoId: bigint,
      asset: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint]>
    borrow: (
      legoId: bigint,
      borrowAsset: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint]>
    repayDebt: (
      legoId: bigint,
      paymentAsset: `0x${string}`,
      paymentAmount?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint]>
    claimRewards: (
      legoId: bigint,
      rewardToken?: `0x${string}`,
      rewardAmount?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint]>
    convertWethToEth: (amount?: bigint) => Promise<[bigint, bigint]>
    convertEthToWeth: (amount?: bigint) => Promise<[bigint, bigint]>
    addLiquidity: (
      legoId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      amountA?: bigint,
      amountB?: bigint,
      minAmountA?: bigint,
      minAmountB?: bigint,
      minLpAmount?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint, bigint, bigint]>
    removeLiquidity: (
      legoId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      lpToken: `0x${string}`,
      lpAmount?: bigint,
      minAmountA?: bigint,
      minAmountB?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint, bigint, bigint]>
    addLiquidityConcentrated: (
      legoId: bigint,
      nftAddr: `0x${string}`,
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      amountA?: bigint,
      amountB?: bigint,
      tickLower?: unknown,
      tickUpper?: unknown,
      minAmountA?: bigint,
      minAmountB?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint, bigint, bigint, bigint]>
    removeLiquidityConcentrated: (
      legoId: bigint,
      nftAddr: `0x${string}`,
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      liqToRemove?: bigint,
      minAmountA?: bigint,
      minAmountB?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint, bigint, bigint]>
    updateAssetData: (
      legoId: bigint,
      asset: `0x${string}`,
      shouldCheckYield: boolean,
      prevTotalUsdValue: bigint,
      ad?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        hatchery: `0x${string}`
        lootDistributor: `0x${string}`
        appraiser: `0x${string}`
        billing: `0x${string}`
        wallet: `0x${string}`
        walletConfig: `0x${string}`
        walletOwner: `0x${string}`
        inEjectMode: boolean
        isFrozen: boolean
        lastTotalUsdValue: bigint
        signer: `0x${string}`
        isManager: boolean
        legoId: bigint
        legoAddr: `0x${string}`
        eth: `0x${string}`
        weth: `0x${string}`
      },
    ) => Promise<bigint>
    deregisterAsset: (asset: `0x${string}`) => Promise<boolean>
    recoverNft: (collection: `0x${string}`, nftTokenId: bigint, recipient: `0x${string}`) => Promise<void>
    setLegoAccessForAction: (legoAddr: `0x${string}`, action: bigint) => Promise<boolean>
  }
  events: {
    WalletAction: (
      op: number,
      asset1: `0x${string}`,
      asset2: `0x${string}`,
      amount1: bigint,
      amount2: bigint,
      usdValue: bigint,
      legoId: bigint,
      signer: `0x${string}`,
    ) => Promise<void>
    WalletActionExt: (
      op: number,
      asset1: `0x${string}`,
      asset2: `0x${string}`,
      tokenId: bigint,
      amount1: bigint,
      amount2: bigint,
      usdValue: bigint,
      extra: bigint,
    ) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'UserWallet'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'UserWallet' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  onERC721Received: (...args: ExtractArgs<Contract['calls']['onERC721Received']>) =>
    getRequest('onERC721Received', args),
  apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) => getRequest('apiVersion', args),
  walletConfig: (...args: ExtractArgs<Contract['calls']['walletConfig']>) => getRequest('walletConfig', args),
  assetData: (...args: ExtractArgs<Contract['calls']['assetData']>) => getRequest('assetData', args),
  assets: (...args: ExtractArgs<Contract['calls']['assets']>) => getRequest('assets', args),
  indexOfAsset: (...args: ExtractArgs<Contract['calls']['indexOfAsset']>) => getRequest('indexOfAsset', args),
  numAssets: (...args: ExtractArgs<Contract['calls']['numAssets']>) => getRequest('numAssets', args),
  WETH: (...args: ExtractArgs<Contract['calls']['WETH']>) => getRequest('WETH', args),
  ETH: (...args: ExtractArgs<Contract['calls']['ETH']>) => getRequest('ETH', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'UserWallet' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'UserWallet'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  transferFunds: getMutation('transferFunds'),
  depositForYield: getMutation('depositForYield'),
  withdrawFromYield: getMutation('withdrawFromYield'),
  rebalanceYieldPosition: getMutation('rebalanceYieldPosition'),
  swapTokens: getMutation('swapTokens'),
  mintOrRedeemAsset: getMutation('mintOrRedeemAsset'),
  confirmMintOrRedeemAsset: getMutation('confirmMintOrRedeemAsset'),
  addCollateral: getMutation('addCollateral'),
  removeCollateral: getMutation('removeCollateral'),
  borrow: getMutation('borrow'),
  repayDebt: getMutation('repayDebt'),
  claimRewards: getMutation('claimRewards'),
  convertWethToEth: getMutation('convertWethToEth'),
  convertEthToWeth: getMutation('convertEthToWeth'),
  addLiquidity: getMutation('addLiquidity'),
  removeLiquidity: getMutation('removeLiquidity'),
  addLiquidityConcentrated: getMutation('addLiquidityConcentrated'),
  removeLiquidityConcentrated: getMutation('removeLiquidityConcentrated'),
  updateAssetData: getMutation('updateAssetData'),
  deregisterAsset: getMutation('deregisterAsset'),
  recoverNft: getMutation('recoverNft'),
  setLegoAccessForAction: getMutation('setLegoAccessForAction'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  onERC721Received: (
    ...args: ExtractArgs<Contract['calls']['onERC721Received']>
  ) => Promise<CallReturn<'onERC721Received'>>
  apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) => Promise<CallReturn<'apiVersion'>>
  walletConfig: (...args: ExtractArgs<Contract['calls']['walletConfig']>) => Promise<CallReturn<'walletConfig'>>
  assetData: (...args: ExtractArgs<Contract['calls']['assetData']>) => Promise<CallReturn<'assetData'>>
  assets: (...args: ExtractArgs<Contract['calls']['assets']>) => Promise<CallReturn<'assets'>>
  indexOfAsset: (...args: ExtractArgs<Contract['calls']['indexOfAsset']>) => Promise<CallReturn<'indexOfAsset'>>
  numAssets: (...args: ExtractArgs<Contract['calls']['numAssets']>) => Promise<CallReturn<'numAssets'>>
  WETH: (...args: ExtractArgs<Contract['calls']['WETH']>) => Promise<CallReturn<'WETH'>>
  ETH: (...args: ExtractArgs<Contract['calls']['ETH']>) => Promise<CallReturn<'ETH'>>
  transferFunds: (...args: ExtractArgs<Contract['mutations']['transferFunds']>) => Promise<Address>
  depositForYield: (...args: ExtractArgs<Contract['mutations']['depositForYield']>) => Promise<Address>
  withdrawFromYield: (...args: ExtractArgs<Contract['mutations']['withdrawFromYield']>) => Promise<Address>
  rebalanceYieldPosition: (...args: ExtractArgs<Contract['mutations']['rebalanceYieldPosition']>) => Promise<Address>
  swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) => Promise<Address>
  mintOrRedeemAsset: (...args: ExtractArgs<Contract['mutations']['mintOrRedeemAsset']>) => Promise<Address>
  confirmMintOrRedeemAsset: (
    ...args: ExtractArgs<Contract['mutations']['confirmMintOrRedeemAsset']>
  ) => Promise<Address>
  addCollateral: (...args: ExtractArgs<Contract['mutations']['addCollateral']>) => Promise<Address>
  removeCollateral: (...args: ExtractArgs<Contract['mutations']['removeCollateral']>) => Promise<Address>
  borrow: (...args: ExtractArgs<Contract['mutations']['borrow']>) => Promise<Address>
  repayDebt: (...args: ExtractArgs<Contract['mutations']['repayDebt']>) => Promise<Address>
  claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) => Promise<Address>
  convertWethToEth: (...args: ExtractArgs<Contract['mutations']['convertWethToEth']>) => Promise<Address>
  convertEthToWeth: (...args: ExtractArgs<Contract['mutations']['convertEthToWeth']>) => Promise<Address>
  addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) => Promise<Address>
  removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) => Promise<Address>
  addLiquidityConcentrated: (
    ...args: ExtractArgs<Contract['mutations']['addLiquidityConcentrated']>
  ) => Promise<Address>
  removeLiquidityConcentrated: (
    ...args: ExtractArgs<Contract['mutations']['removeLiquidityConcentrated']>
  ) => Promise<Address>
  updateAssetData: (...args: ExtractArgs<Contract['mutations']['updateAssetData']>) => Promise<Address>
  deregisterAsset: (...args: ExtractArgs<Contract['mutations']['deregisterAsset']>) => Promise<Address>
  recoverNft: (...args: ExtractArgs<Contract['mutations']['recoverNft']>) => Promise<Address>
  setLegoAccessForAction: (...args: ExtractArgs<Contract['mutations']['setLegoAccessForAction']>) => Promise<Address>
}

export function toSdk(deployAddress: Address, publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    onERC721Received: (...args: ExtractArgs<Contract['calls']['onERC721Received']>) =>
      singleQuery(publicClient!, call.onERC721Received(...args).at(deployAddress)) as Promise<
        CallReturn<'onERC721Received'>
      >,
    apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) =>
      singleQuery(publicClient!, call.apiVersion(...args).at(deployAddress)) as Promise<CallReturn<'apiVersion'>>,
    walletConfig: (...args: ExtractArgs<Contract['calls']['walletConfig']>) =>
      singleQuery(publicClient!, call.walletConfig(...args).at(deployAddress)) as Promise<CallReturn<'walletConfig'>>,
    assetData: (...args: ExtractArgs<Contract['calls']['assetData']>) =>
      singleQuery(publicClient!, call.assetData(...args).at(deployAddress)) as Promise<CallReturn<'assetData'>>,
    assets: (...args: ExtractArgs<Contract['calls']['assets']>) =>
      singleQuery(publicClient!, call.assets(...args).at(deployAddress)) as Promise<CallReturn<'assets'>>,
    indexOfAsset: (...args: ExtractArgs<Contract['calls']['indexOfAsset']>) =>
      singleQuery(publicClient!, call.indexOfAsset(...args).at(deployAddress)) as Promise<CallReturn<'indexOfAsset'>>,
    numAssets: (...args: ExtractArgs<Contract['calls']['numAssets']>) =>
      singleQuery(publicClient!, call.numAssets(...args).at(deployAddress)) as Promise<CallReturn<'numAssets'>>,
    WETH: (...args: ExtractArgs<Contract['calls']['WETH']>) =>
      singleQuery(publicClient!, call.WETH(...args).at(deployAddress)) as Promise<CallReturn<'WETH'>>,
    ETH: (...args: ExtractArgs<Contract['calls']['ETH']>) =>
      singleQuery(publicClient!, call.ETH(...args).at(deployAddress)) as Promise<CallReturn<'ETH'>>,

    // Mutations
    transferFunds: (...args: ExtractArgs<Contract['mutations']['transferFunds']>) =>
      mutate(walletClient!, mutation.transferFunds, { address: deployAddress })(...args),
    depositForYield: (...args: ExtractArgs<Contract['mutations']['depositForYield']>) =>
      mutate(walletClient!, mutation.depositForYield, { address: deployAddress })(...args),
    withdrawFromYield: (...args: ExtractArgs<Contract['mutations']['withdrawFromYield']>) =>
      mutate(walletClient!, mutation.withdrawFromYield, { address: deployAddress })(...args),
    rebalanceYieldPosition: (...args: ExtractArgs<Contract['mutations']['rebalanceYieldPosition']>) =>
      mutate(walletClient!, mutation.rebalanceYieldPosition, { address: deployAddress })(...args),
    swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) =>
      mutate(walletClient!, mutation.swapTokens, { address: deployAddress })(...args),
    mintOrRedeemAsset: (...args: ExtractArgs<Contract['mutations']['mintOrRedeemAsset']>) =>
      mutate(walletClient!, mutation.mintOrRedeemAsset, { address: deployAddress })(...args),
    confirmMintOrRedeemAsset: (...args: ExtractArgs<Contract['mutations']['confirmMintOrRedeemAsset']>) =>
      mutate(walletClient!, mutation.confirmMintOrRedeemAsset, { address: deployAddress })(...args),
    addCollateral: (...args: ExtractArgs<Contract['mutations']['addCollateral']>) =>
      mutate(walletClient!, mutation.addCollateral, { address: deployAddress })(...args),
    removeCollateral: (...args: ExtractArgs<Contract['mutations']['removeCollateral']>) =>
      mutate(walletClient!, mutation.removeCollateral, { address: deployAddress })(...args),
    borrow: (...args: ExtractArgs<Contract['mutations']['borrow']>) =>
      mutate(walletClient!, mutation.borrow, { address: deployAddress })(...args),
    repayDebt: (...args: ExtractArgs<Contract['mutations']['repayDebt']>) =>
      mutate(walletClient!, mutation.repayDebt, { address: deployAddress })(...args),
    claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) =>
      mutate(walletClient!, mutation.claimRewards, { address: deployAddress })(...args),
    convertWethToEth: (...args: ExtractArgs<Contract['mutations']['convertWethToEth']>) =>
      mutate(walletClient!, mutation.convertWethToEth, { address: deployAddress })(...args),
    convertEthToWeth: (...args: ExtractArgs<Contract['mutations']['convertEthToWeth']>) =>
      mutate(walletClient!, mutation.convertEthToWeth, { address: deployAddress })(...args),
    addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) =>
      mutate(walletClient!, mutation.addLiquidity, { address: deployAddress })(...args),
    removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) =>
      mutate(walletClient!, mutation.removeLiquidity, { address: deployAddress })(...args),
    addLiquidityConcentrated: (...args: ExtractArgs<Contract['mutations']['addLiquidityConcentrated']>) =>
      mutate(walletClient!, mutation.addLiquidityConcentrated, { address: deployAddress })(...args),
    removeLiquidityConcentrated: (...args: ExtractArgs<Contract['mutations']['removeLiquidityConcentrated']>) =>
      mutate(walletClient!, mutation.removeLiquidityConcentrated, { address: deployAddress })(...args),
    updateAssetData: (...args: ExtractArgs<Contract['mutations']['updateAssetData']>) =>
      mutate(walletClient!, mutation.updateAssetData, { address: deployAddress })(...args),
    deregisterAsset: (...args: ExtractArgs<Contract['mutations']['deregisterAsset']>) =>
      mutate(walletClient!, mutation.deregisterAsset, { address: deployAddress })(...args),
    recoverNft: (...args: ExtractArgs<Contract['mutations']['recoverNft']>) =>
      mutate(walletClient!, mutation.recoverNft, { address: deployAddress })(...args),
    setLegoAccessForAction: (...args: ExtractArgs<Contract['mutations']['setLegoAccessForAction']>) =>
      mutate(walletClient!, mutation.setLegoAccessForAction, { address: deployAddress })(...args),
  }
}
