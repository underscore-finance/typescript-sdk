/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'TxFeePaid',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'ambassadorFeeRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'ambassadorFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'ambassador',
        type: 'address',
        indexed: true,
      },
      {
        name: 'action',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'YieldBonusPaid',
    inputs: [
      {
        name: 'bonusAsset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bonusAmount',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bonusRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'yieldRealized',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'isAmbassador',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'LootAdjusted',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newClaimable',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'LootClaimed',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepositRewardsAdded',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'addedAmount',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newTotalAmount',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'adder',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepositRewardsClaimed',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'userRewards',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'remainingRewards',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepositRewardsRecovered',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepartmentPauseModified',
    inputs: [
      {
        name: 'isPaused',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepartmentFundsRecovered',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'balance',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddys',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'hq',
            type: 'address',
          },
          {
            name: 'undyToken',
            type: 'address',
          },
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'switchboard',
            type: 'address',
          },
          {
            name: 'hatchery',
            type: 'address',
          },
          {
            name: 'lootDistributor',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
          {
            name: 'walletBackpack',
            type: 'address',
          },
          {
            name: 'billing',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHq',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canMintUndy',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'pause',
    inputs: [
      {
        name: '_shouldPause',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFundsMany',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isPaused',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLootFromSwapOrRewards',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_feeAmount',
        type: 'uint256',
      },
      {
        name: '_action',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLootFromSwapOrRewards',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_feeAmount',
        type: 'uint256',
      },
      {
        name: '_action',
        type: 'uint256',
      },
      {
        name: '_missionControl',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLootFromYieldProfit',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_feeAmount',
        type: 'uint256',
      },
      {
        name: '_yieldRealized',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLootFromYieldProfit',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_feeAmount',
        type: 'uint256',
      },
      {
        name: '_yieldRealized',
        type: 'uint256',
      },
      {
        name: '_missionControl',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLootFromYieldProfit',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_feeAmount',
        type: 'uint256',
      },
      {
        name: '_yieldRealized',
        type: 'uint256',
      },
      {
        name: '_missionControl',
        type: 'address',
      },
      {
        name: '_appraiser',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLootFromYieldProfit',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_feeAmount',
        type: 'uint256',
      },
      {
        name: '_yieldRealized',
        type: 'uint256',
      },
      {
        name: '_missionControl',
        type: 'address',
      },
      {
        name: '_appraiser',
        type: 'address',
      },
      {
        name: '_legoBook',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRevShareAndBonusLoot',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getTotalClaimableAssets',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'adjustLoot',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_newClaimable',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'updateDepositPoints',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'updateDepositPointsWithNewValue',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_newUsdValue',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'updateDepositPointsOnEjection',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getLatestDepositPoints',
    inputs: [
      {
        name: '_usdValue',
        type: 'uint256',
      },
      {
        name: '_lastUpdate',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidWalletConfig',
    inputs: [
      {
        name: '_wallet',
        type: 'address',
      },
      {
        name: '_caller',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimDepositRewards',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addDepositRewards',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverDepositRewards',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getSwapFee',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getSwapFee',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_missionControl',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getRewardsFee',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getRewardsFee',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_missionControl',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimAllLoot',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'validateCanClaimLoot',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_caller',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getLootDistroConfig',
    inputs: [
      {
        name: '_wallet',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'ambassador',
            type: 'address',
          },
          {
            name: 'ambassadorRevShare',
            type: 'tuple',
            components: [
              {
                name: 'swapRatio',
                type: 'uint256',
              },
              {
                name: 'rewardsRatio',
                type: 'uint256',
              },
              {
                name: 'yieldRatio',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'ambassadorBonusRatio',
            type: 'uint256',
          },
          {
            name: 'bonusRatio',
            type: 'uint256',
          },
          {
            name: 'altBonusAsset',
            type: 'address',
          },
          {
            name: 'underlyingAsset',
            type: 'address',
          },
          {
            name: 'decimals',
            type: 'uint256',
          },
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'legoAddr',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getLootDistroConfig',
    inputs: [
      {
        name: '_wallet',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_shouldGetLegoInfo',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'ambassador',
            type: 'address',
          },
          {
            name: 'ambassadorRevShare',
            type: 'tuple',
            components: [
              {
                name: 'swapRatio',
                type: 'uint256',
              },
              {
                name: 'rewardsRatio',
                type: 'uint256',
              },
              {
                name: 'yieldRatio',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'ambassadorBonusRatio',
            type: 'uint256',
          },
          {
            name: 'bonusRatio',
            type: 'uint256',
          },
          {
            name: 'altBonusAsset',
            type: 'address',
          },
          {
            name: 'underlyingAsset',
            type: 'address',
          },
          {
            name: 'decimals',
            type: 'uint256',
          },
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'legoAddr',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'lastClaim',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'totalClaimableLoot',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'claimableLoot',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
      {
        name: 'arg1',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'claimableAssets',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
      {
        name: 'arg1',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'indexOfClaimableAsset',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
      {
        name: 'arg1',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'numClaimableAssets',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'depositRewards',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0xEdcA7eD2248928349Fb9c9289B48471BbDDDee87'

export type Contract = {
  calls: {
    getAddys: () => Promise<{
      hq: `0x${string}`
      undyToken: `0x${string}`
      ledger: `0x${string}`
      missionControl: `0x${string}`
      legoBook: `0x${string}`
      switchboard: `0x${string}`
      hatchery: `0x${string}`
      lootDistributor: `0x${string}`
      appraiser: `0x${string}`
      walletBackpack: `0x${string}`
      billing: `0x${string}`
    }>
    getUndyHq: () => Promise<`0x${string}`>
    canMintUndy: () => Promise<boolean>
    isPaused: () => Promise<boolean>
    getTotalClaimableAssets: (user: `0x${string}`) => Promise<bigint>
    getLatestDepositPoints: (usdValue: bigint, lastUpdate: bigint) => Promise<bigint>
    isValidWalletConfig: (wallet: `0x${string}`, caller: `0x${string}`) => Promise<boolean>
    getSwapFee: (
      user: `0x${string}`,
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      missionControl?: `0x${string}`,
    ) => Promise<bigint>
    getRewardsFee: (user: `0x${string}`, asset: `0x${string}`, missionControl?: `0x${string}`) => Promise<bigint>
    validateCanClaimLoot: (user: `0x${string}`, caller: `0x${string}`) => Promise<boolean>
    getLootDistroConfig: (
      wallet: `0x${string}`,
      asset: `0x${string}`,
      shouldGetLegoInfo?: boolean,
    ) => Promise<{
      ambassador: `0x${string}`
      ambassadorRevShare: { swapRatio: bigint; rewardsRatio: bigint; yieldRatio: bigint }
      ambassadorBonusRatio: bigint
      bonusRatio: bigint
      altBonusAsset: `0x${string}`
      underlyingAsset: `0x${string}`
      decimals: bigint
      legoId: bigint
      legoAddr: `0x${string}`
    }>
    lastClaim: (arg0: `0x${string}`) => Promise<bigint>
    totalClaimableLoot: (arg0: `0x${string}`) => Promise<bigint>
    claimableLoot: (arg0: `0x${string}`, arg1: `0x${string}`) => Promise<bigint>
    claimableAssets: (arg0: `0x${string}`, arg1: bigint) => Promise<`0x${string}`>
    indexOfClaimableAsset: (arg0: `0x${string}`, arg1: `0x${string}`) => Promise<bigint>
    numClaimableAssets: (arg0: `0x${string}`) => Promise<bigint>
    depositRewards: () => Promise<{ asset: `0x${string}`; amount: bigint }>
  }
  mutations: {
    pause: (shouldPause: boolean) => Promise<void>
    recoverFunds: (recipient: `0x${string}`, asset: `0x${string}`) => Promise<void>
    recoverFundsMany: (recipient: `0x${string}`, assets: `0x${string}`[]) => Promise<void>
    addLootFromSwapOrRewards: (
      asset: `0x${string}`,
      feeAmount: bigint,
      action: bigint,
      missionControl?: `0x${string}`,
    ) => Promise<void>
    addLootFromYieldProfit: (
      asset: `0x${string}`,
      feeAmount: bigint,
      yieldRealized: bigint,
      missionControl?: `0x${string}`,
      appraiser?: `0x${string}`,
      legoBook?: `0x${string}`,
    ) => Promise<void>
    claimRevShareAndBonusLoot: (user: `0x${string}`) => Promise<bigint>
    adjustLoot: (user: `0x${string}`, asset: `0x${string}`, newClaimable: bigint) => Promise<boolean>
    updateDepositPoints: (user: `0x${string}`) => Promise<void>
    updateDepositPointsWithNewValue: (user: `0x${string}`, newUsdValue: bigint) => Promise<void>
    updateDepositPointsOnEjection: (user: `0x${string}`) => Promise<void>
    claimDepositRewards: (user: `0x${string}`) => Promise<bigint>
    addDepositRewards: (asset: `0x${string}`, amount: bigint) => Promise<void>
    recoverDepositRewards: (recipient: `0x${string}`) => Promise<void>
    claimAllLoot: (user: `0x${string}`) => Promise<boolean>
  }
  events: {
    TxFeePaid: (
      asset: `0x${string}`,
      totalFee: bigint,
      ambassadorFeeRatio: bigint,
      ambassadorFee: bigint,
      ambassador: `0x${string}`,
      action: bigint,
    ) => Promise<void>
    YieldBonusPaid: (
      bonusAsset: `0x${string}`,
      bonusAmount: bigint,
      bonusRatio: bigint,
      yieldRealized: bigint,
      recipient: `0x${string}`,
      isAmbassador: boolean,
    ) => Promise<void>
    LootAdjusted: (user: `0x${string}`, asset: `0x${string}`, newClaimable: bigint) => Promise<void>
    LootClaimed: (user: `0x${string}`, asset: `0x${string}`, amount: bigint) => Promise<void>
    DepositRewardsAdded: (
      asset: `0x${string}`,
      addedAmount: bigint,
      newTotalAmount: bigint,
      adder: `0x${string}`,
    ) => Promise<void>
    DepositRewardsClaimed: (
      user: `0x${string}`,
      asset: `0x${string}`,
      userRewards: bigint,
      remainingRewards: bigint,
    ) => Promise<void>
    DepositRewardsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, amount: bigint) => Promise<void>
    DepartmentPauseModified: (isPaused: boolean) => Promise<void>
    DepartmentFundsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, balance: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'LootDistributor'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'LootDistributor' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => getRequest('getAddys', args),
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => getRequest('getUndyHq', args),
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => getRequest('canMintUndy', args),
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => getRequest('isPaused', args),
  getTotalClaimableAssets: (...args: ExtractArgs<Contract['calls']['getTotalClaimableAssets']>) =>
    getRequest('getTotalClaimableAssets', args),
  getLatestDepositPoints: (...args: ExtractArgs<Contract['calls']['getLatestDepositPoints']>) =>
    getRequest('getLatestDepositPoints', args),
  isValidWalletConfig: (...args: ExtractArgs<Contract['calls']['isValidWalletConfig']>) =>
    getRequest('isValidWalletConfig', args),
  getSwapFee: (...args: ExtractArgs<Contract['calls']['getSwapFee']>) => getRequest('getSwapFee', args),
  getRewardsFee: (...args: ExtractArgs<Contract['calls']['getRewardsFee']>) => getRequest('getRewardsFee', args),
  validateCanClaimLoot: (...args: ExtractArgs<Contract['calls']['validateCanClaimLoot']>) =>
    getRequest('validateCanClaimLoot', args),
  getLootDistroConfig: (...args: ExtractArgs<Contract['calls']['getLootDistroConfig']>) =>
    getRequest('getLootDistroConfig', args),
  lastClaim: (...args: ExtractArgs<Contract['calls']['lastClaim']>) => getRequest('lastClaim', args),
  totalClaimableLoot: (...args: ExtractArgs<Contract['calls']['totalClaimableLoot']>) =>
    getRequest('totalClaimableLoot', args),
  claimableLoot: (...args: ExtractArgs<Contract['calls']['claimableLoot']>) => getRequest('claimableLoot', args),
  claimableAssets: (...args: ExtractArgs<Contract['calls']['claimableAssets']>) => getRequest('claimableAssets', args),
  indexOfClaimableAsset: (...args: ExtractArgs<Contract['calls']['indexOfClaimableAsset']>) =>
    getRequest('indexOfClaimableAsset', args),
  numClaimableAssets: (...args: ExtractArgs<Contract['calls']['numClaimableAssets']>) =>
    getRequest('numClaimableAssets', args),
  depositRewards: (...args: ExtractArgs<Contract['calls']['depositRewards']>) => getRequest('depositRewards', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'LootDistributor' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'LootDistributor'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  pause: getMutation('pause'),
  recoverFunds: getMutation('recoverFunds'),
  recoverFundsMany: getMutation('recoverFundsMany'),
  addLootFromSwapOrRewards: getMutation('addLootFromSwapOrRewards'),
  addLootFromYieldProfit: getMutation('addLootFromYieldProfit'),
  claimRevShareAndBonusLoot: getMutation('claimRevShareAndBonusLoot'),
  adjustLoot: getMutation('adjustLoot'),
  updateDepositPoints: getMutation('updateDepositPoints'),
  updateDepositPointsWithNewValue: getMutation('updateDepositPointsWithNewValue'),
  updateDepositPointsOnEjection: getMutation('updateDepositPointsOnEjection'),
  claimDepositRewards: getMutation('claimDepositRewards'),
  addDepositRewards: getMutation('addDepositRewards'),
  recoverDepositRewards: getMutation('recoverDepositRewards'),
  claimAllLoot: getMutation('claimAllLoot'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => Promise<CallReturn<'getAddys'>>
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => Promise<CallReturn<'getUndyHq'>>
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => Promise<CallReturn<'canMintUndy'>>
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => Promise<CallReturn<'isPaused'>>
  getTotalClaimableAssets: (
    ...args: ExtractArgs<Contract['calls']['getTotalClaimableAssets']>
  ) => Promise<CallReturn<'getTotalClaimableAssets'>>
  getLatestDepositPoints: (
    ...args: ExtractArgs<Contract['calls']['getLatestDepositPoints']>
  ) => Promise<CallReturn<'getLatestDepositPoints'>>
  isValidWalletConfig: (
    ...args: ExtractArgs<Contract['calls']['isValidWalletConfig']>
  ) => Promise<CallReturn<'isValidWalletConfig'>>
  getSwapFee: (...args: ExtractArgs<Contract['calls']['getSwapFee']>) => Promise<CallReturn<'getSwapFee'>>
  getRewardsFee: (...args: ExtractArgs<Contract['calls']['getRewardsFee']>) => Promise<CallReturn<'getRewardsFee'>>
  validateCanClaimLoot: (
    ...args: ExtractArgs<Contract['calls']['validateCanClaimLoot']>
  ) => Promise<CallReturn<'validateCanClaimLoot'>>
  getLootDistroConfig: (
    ...args: ExtractArgs<Contract['calls']['getLootDistroConfig']>
  ) => Promise<CallReturn<'getLootDistroConfig'>>
  lastClaim: (...args: ExtractArgs<Contract['calls']['lastClaim']>) => Promise<CallReturn<'lastClaim'>>
  totalClaimableLoot: (
    ...args: ExtractArgs<Contract['calls']['totalClaimableLoot']>
  ) => Promise<CallReturn<'totalClaimableLoot'>>
  claimableLoot: (...args: ExtractArgs<Contract['calls']['claimableLoot']>) => Promise<CallReturn<'claimableLoot'>>
  claimableAssets: (
    ...args: ExtractArgs<Contract['calls']['claimableAssets']>
  ) => Promise<CallReturn<'claimableAssets'>>
  indexOfClaimableAsset: (
    ...args: ExtractArgs<Contract['calls']['indexOfClaimableAsset']>
  ) => Promise<CallReturn<'indexOfClaimableAsset'>>
  numClaimableAssets: (
    ...args: ExtractArgs<Contract['calls']['numClaimableAssets']>
  ) => Promise<CallReturn<'numClaimableAssets'>>
  depositRewards: (...args: ExtractArgs<Contract['calls']['depositRewards']>) => Promise<CallReturn<'depositRewards'>>
  pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => Promise<Address>
  recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) => Promise<Address>
  recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) => Promise<Address>
  addLootFromSwapOrRewards: (
    ...args: ExtractArgs<Contract['mutations']['addLootFromSwapOrRewards']>
  ) => Promise<Address>
  addLootFromYieldProfit: (...args: ExtractArgs<Contract['mutations']['addLootFromYieldProfit']>) => Promise<Address>
  claimRevShareAndBonusLoot: (
    ...args: ExtractArgs<Contract['mutations']['claimRevShareAndBonusLoot']>
  ) => Promise<Address>
  adjustLoot: (...args: ExtractArgs<Contract['mutations']['adjustLoot']>) => Promise<Address>
  updateDepositPoints: (...args: ExtractArgs<Contract['mutations']['updateDepositPoints']>) => Promise<Address>
  updateDepositPointsWithNewValue: (
    ...args: ExtractArgs<Contract['mutations']['updateDepositPointsWithNewValue']>
  ) => Promise<Address>
  updateDepositPointsOnEjection: (
    ...args: ExtractArgs<Contract['mutations']['updateDepositPointsOnEjection']>
  ) => Promise<Address>
  claimDepositRewards: (...args: ExtractArgs<Contract['mutations']['claimDepositRewards']>) => Promise<Address>
  addDepositRewards: (...args: ExtractArgs<Contract['mutations']['addDepositRewards']>) => Promise<Address>
  recoverDepositRewards: (...args: ExtractArgs<Contract['mutations']['recoverDepositRewards']>) => Promise<Address>
  claimAllLoot: (...args: ExtractArgs<Contract['mutations']['claimAllLoot']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) =>
      singleQuery(publicClient!, call.getAddys(...args)) as Promise<CallReturn<'getAddys'>>,
    getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) =>
      singleQuery(publicClient!, call.getUndyHq(...args)) as Promise<CallReturn<'getUndyHq'>>,
    canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) =>
      singleQuery(publicClient!, call.canMintUndy(...args)) as Promise<CallReturn<'canMintUndy'>>,
    isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) =>
      singleQuery(publicClient!, call.isPaused(...args)) as Promise<CallReturn<'isPaused'>>,
    getTotalClaimableAssets: (...args: ExtractArgs<Contract['calls']['getTotalClaimableAssets']>) =>
      singleQuery(publicClient!, call.getTotalClaimableAssets(...args)) as Promise<
        CallReturn<'getTotalClaimableAssets'>
      >,
    getLatestDepositPoints: (...args: ExtractArgs<Contract['calls']['getLatestDepositPoints']>) =>
      singleQuery(publicClient!, call.getLatestDepositPoints(...args)) as Promise<CallReturn<'getLatestDepositPoints'>>,
    isValidWalletConfig: (...args: ExtractArgs<Contract['calls']['isValidWalletConfig']>) =>
      singleQuery(publicClient!, call.isValidWalletConfig(...args)) as Promise<CallReturn<'isValidWalletConfig'>>,
    getSwapFee: (...args: ExtractArgs<Contract['calls']['getSwapFee']>) =>
      singleQuery(publicClient!, call.getSwapFee(...args)) as Promise<CallReturn<'getSwapFee'>>,
    getRewardsFee: (...args: ExtractArgs<Contract['calls']['getRewardsFee']>) =>
      singleQuery(publicClient!, call.getRewardsFee(...args)) as Promise<CallReturn<'getRewardsFee'>>,
    validateCanClaimLoot: (...args: ExtractArgs<Contract['calls']['validateCanClaimLoot']>) =>
      singleQuery(publicClient!, call.validateCanClaimLoot(...args)) as Promise<CallReturn<'validateCanClaimLoot'>>,
    getLootDistroConfig: (...args: ExtractArgs<Contract['calls']['getLootDistroConfig']>) =>
      singleQuery(publicClient!, call.getLootDistroConfig(...args)) as Promise<CallReturn<'getLootDistroConfig'>>,
    lastClaim: (...args: ExtractArgs<Contract['calls']['lastClaim']>) =>
      singleQuery(publicClient!, call.lastClaim(...args)) as Promise<CallReturn<'lastClaim'>>,
    totalClaimableLoot: (...args: ExtractArgs<Contract['calls']['totalClaimableLoot']>) =>
      singleQuery(publicClient!, call.totalClaimableLoot(...args)) as Promise<CallReturn<'totalClaimableLoot'>>,
    claimableLoot: (...args: ExtractArgs<Contract['calls']['claimableLoot']>) =>
      singleQuery(publicClient!, call.claimableLoot(...args)) as Promise<CallReturn<'claimableLoot'>>,
    claimableAssets: (...args: ExtractArgs<Contract['calls']['claimableAssets']>) =>
      singleQuery(publicClient!, call.claimableAssets(...args)) as Promise<CallReturn<'claimableAssets'>>,
    indexOfClaimableAsset: (...args: ExtractArgs<Contract['calls']['indexOfClaimableAsset']>) =>
      singleQuery(publicClient!, call.indexOfClaimableAsset(...args)) as Promise<CallReturn<'indexOfClaimableAsset'>>,
    numClaimableAssets: (...args: ExtractArgs<Contract['calls']['numClaimableAssets']>) =>
      singleQuery(publicClient!, call.numClaimableAssets(...args)) as Promise<CallReturn<'numClaimableAssets'>>,
    depositRewards: (...args: ExtractArgs<Contract['calls']['depositRewards']>) =>
      singleQuery(publicClient!, call.depositRewards(...args)) as Promise<CallReturn<'depositRewards'>>,

    // Mutations
    pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => mutate(walletClient!, mutation.pause)(...args),
    recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) =>
      mutate(walletClient!, mutation.recoverFunds)(...args),
    recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) =>
      mutate(walletClient!, mutation.recoverFundsMany)(...args),
    addLootFromSwapOrRewards: (...args: ExtractArgs<Contract['mutations']['addLootFromSwapOrRewards']>) =>
      mutate(walletClient!, mutation.addLootFromSwapOrRewards)(...args),
    addLootFromYieldProfit: (...args: ExtractArgs<Contract['mutations']['addLootFromYieldProfit']>) =>
      mutate(walletClient!, mutation.addLootFromYieldProfit)(...args),
    claimRevShareAndBonusLoot: (...args: ExtractArgs<Contract['mutations']['claimRevShareAndBonusLoot']>) =>
      mutate(walletClient!, mutation.claimRevShareAndBonusLoot)(...args),
    adjustLoot: (...args: ExtractArgs<Contract['mutations']['adjustLoot']>) =>
      mutate(walletClient!, mutation.adjustLoot)(...args),
    updateDepositPoints: (...args: ExtractArgs<Contract['mutations']['updateDepositPoints']>) =>
      mutate(walletClient!, mutation.updateDepositPoints)(...args),
    updateDepositPointsWithNewValue: (...args: ExtractArgs<Contract['mutations']['updateDepositPointsWithNewValue']>) =>
      mutate(walletClient!, mutation.updateDepositPointsWithNewValue)(...args),
    updateDepositPointsOnEjection: (...args: ExtractArgs<Contract['mutations']['updateDepositPointsOnEjection']>) =>
      mutate(walletClient!, mutation.updateDepositPointsOnEjection)(...args),
    claimDepositRewards: (...args: ExtractArgs<Contract['mutations']['claimDepositRewards']>) =>
      mutate(walletClient!, mutation.claimDepositRewards)(...args),
    addDepositRewards: (...args: ExtractArgs<Contract['mutations']['addDepositRewards']>) =>
      mutate(walletClient!, mutation.addDepositRewards)(...args),
    recoverDepositRewards: (...args: ExtractArgs<Contract['mutations']['recoverDepositRewards']>) =>
      mutate(walletClient!, mutation.recoverDepositRewards)(...args),
    claimAllLoot: (...args: ExtractArgs<Contract['mutations']['claimAllLoot']>) =>
      mutate(walletClient!, mutation.claimAllLoot)(...args),
  }
}
