/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`


export const abi = [
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "asset",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "feedId",
                "type": "bytes32"
            }
        ],
        "name": "StorkFeedAdded",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "asset",
                "type": "address"
            }
        ],
        "name": "StorkFeedDisabled",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "payload",
                "type": "bytes"
            },
            {
                "indexed": false,
                "name": "feeAmount",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "caller",
                "type": "address"
            }
        ],
        "name": "StorkPriceUpdated",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "recipient",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "EthRecoveredFromStork",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "addr",
                "type": "address"
            }
        ],
        "name": "LocalGovernorSet",
        "type": "event"
    },
    {
        "inputs": [
            {
                "name": "_address",
                "type": "address"
            }
        ],
        "name": "isGovernor",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_newGovernor",
                "type": "address"
            }
        ],
        "name": "isValidLocalGovernor",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_newGovernor",
                "type": "address"
            }
        ],
        "name": "setLocalGovernor",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "localGovernor",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "getConfiguredAssets",
        "outputs": [
            {
                "name": "",
                "type": "address[]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "arg0",
                "type": "uint256"
            }
        ],
        "name": "assets",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "arg0",
                "type": "address"
            }
        ],
        "name": "indexOfAsset",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "numAssets",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "stateMutability": "payable",
        "type": "fallback"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "name": "getPrice",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_staleTime",
                "type": "uint256"
            }
        ],
        "name": "getPrice",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_staleTime",
                "type": "uint256"
            },
            {
                "name": "_oracleRegistry",
                "type": "address"
            }
        ],
        "name": "getPrice",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "name": "getPriceAndHasFeed",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            },
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_staleTime",
                "type": "uint256"
            }
        ],
        "name": "getPriceAndHasFeed",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            },
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_staleTime",
                "type": "uint256"
            },
            {
                "name": "_oracleRegistry",
                "type": "address"
            }
        ],
        "name": "getPriceAndHasFeed",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            },
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "name": "hasPriceFeed",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_payloads",
                "type": "bytes[]"
            }
        ],
        "name": "updateStorkPrices",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_feedId",
                "type": "bytes32"
            }
        ],
        "name": "isValidStorkFeed",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_feedId",
                "type": "bytes32"
            }
        ],
        "name": "setStorkFeed",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "name": "disableStorkPriceFeed",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_recipient",
                "type": "address"
            }
        ],
        "name": "isValidEthRecovery",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_recipient",
                "type": "address"
            }
        ],
        "name": "recoverEthBalance",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_oracleId",
                "type": "uint256"
            }
        ],
        "name": "setOraclePartnerId",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "STORK",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "arg0",
                "type": "address"
            }
        ],
        "name": "feedConfig",
        "outputs": [
            {
                "name": "",
                "type": "bytes32"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "oraclePartnerId",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "ADDY_REGISTRY",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_stork",
                "type": "address"
            },
            {
                "name": "_addyRegistry",
                "type": "address"
            }
        ],
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
    }
] as const

export const deployAddress: Address | undefined = undefined

export type Contract = {
  calls: {
    isGovernor: (address: `0x${string}`) => Promise<boolean>
    isValidLocalGovernor: (newGovernor: `0x${string}`) => Promise<boolean>
    localGovernor: () => Promise<`0x${string}`>
    getConfiguredAssets: () => Promise<`0x${string}`[]>
    assets: (arg0: bigint) => Promise<`0x${string}`>
    indexOfAsset: (arg0: `0x${string}`) => Promise<bigint>
    numAssets: () => Promise<bigint>
    getPrice: (asset: `0x${string}`, staleTime?: bigint, oracleRegistry?: `0x${string}`) => Promise<bigint>
    getPriceAndHasFeed: (asset: `0x${string}`, staleTime?: bigint, oracleRegistry?: `0x${string}`) => Promise<[bigint, boolean]>
    hasPriceFeed: (asset: `0x${string}`) => Promise<boolean>
    isValidStorkFeed: (asset: `0x${string}`, feedId: `0x${string}`) => Promise<boolean>
    isValidEthRecovery: (recipient: `0x${string}`) => Promise<boolean>
    STORK: () => Promise<`0x${string}`>
    feedConfig: (arg0: `0x${string}`) => Promise<`0x${string}`>
    oraclePartnerId: () => Promise<bigint>
    ADDY_REGISTRY: () => Promise<`0x${string}`>
  }
  mutations: {
    setLocalGovernor: (newGovernor: `0x${string}`) => Promise<boolean>
    updateStorkPrices: (payloads: `0x${string}`[]) => Promise<void>
    setStorkFeed: (asset: `0x${string}`, feedId: `0x${string}`) => Promise<boolean>
    disableStorkPriceFeed: (asset: `0x${string}`) => Promise<boolean>
    recoverEthBalance: (recipient: `0x${string}`) => Promise<boolean>
    setOraclePartnerId: (oracleId: bigint) => Promise<boolean>
  }
  events: {
    StorkFeedAdded: (asset: `0x${string}`, feedId: `0x${string}`) => Promise<void>
    StorkFeedDisabled: (asset: `0x${string}`) => Promise<void>
    StorkPriceUpdated: (payload: `0x${string}`, feeAmount: bigint, caller: `0x${string}`) => Promise<void>
    EthRecoveredFromStork: (recipient: `0x${string}`, amount: bigint) => Promise<void>
    LocalGovernorSet: (addr: `0x${string}`) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'StorkFeeds'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: {
    contractAddress?: Address
    defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
  }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
  | Address
  | {
    contractAddress?: Address
    defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
    },
  ): Request<M> {
    const address =
      typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
    const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

    const call = {
      contractName: 'StorkFeeds' as const,
      method,
      args,
      address,
      deployAddress,
      defaultValue,
      getAbi: () => abi,
      with: (options: {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      }) => {
          call.address = options.contractAddress
          call.defaultValue = options.defaultValue
          return call as Request<M>
      },
      defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
        call.defaultValue = defaultValue
        return call as Request<M>
      },
      at: (address: Address) => {
        call.address = address
        return call as Request<M>
      },
    } as Request<M>

    return call
}

type CallType = {
  [K in Calls]: (
    ...args: ExtractArgs<Contract['calls'][K]>
  ) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
		isGovernor: (...args: ExtractArgs<Contract['calls']['isGovernor']>) => getRequest('isGovernor', args),
		isValidLocalGovernor: (...args: ExtractArgs<Contract['calls']['isValidLocalGovernor']>) => getRequest('isValidLocalGovernor', args),
		localGovernor: (...args: ExtractArgs<Contract['calls']['localGovernor']>) => getRequest('localGovernor', args),
		getConfiguredAssets: (...args: ExtractArgs<Contract['calls']['getConfiguredAssets']>) => getRequest('getConfiguredAssets', args),
		assets: (...args: ExtractArgs<Contract['calls']['assets']>) => getRequest('assets', args),
		indexOfAsset: (...args: ExtractArgs<Contract['calls']['indexOfAsset']>) => getRequest('indexOfAsset', args),
		numAssets: (...args: ExtractArgs<Contract['calls']['numAssets']>) => getRequest('numAssets', args),
		getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) => getRequest('getPrice', args),
		getPriceAndHasFeed: (...args: ExtractArgs<Contract['calls']['getPriceAndHasFeed']>) => getRequest('getPriceAndHasFeed', args),
		hasPriceFeed: (...args: ExtractArgs<Contract['calls']['hasPriceFeed']>) => getRequest('hasPriceFeed', args),
		isValidStorkFeed: (...args: ExtractArgs<Contract['calls']['isValidStorkFeed']>) => getRequest('isValidStorkFeed', args),
		isValidEthRecovery: (...args: ExtractArgs<Contract['calls']['isValidEthRecovery']>) => getRequest('isValidEthRecovery', args),
		STORK: (...args: ExtractArgs<Contract['calls']['STORK']>) => getRequest('STORK', args),
		feedConfig: (...args: ExtractArgs<Contract['calls']['feedConfig']>) => getRequest('feedConfig', args),
		oraclePartnerId: (...args: ExtractArgs<Contract['calls']['oraclePartnerId']>) => getRequest('oraclePartnerId', args),
		ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) => getRequest('ADDY_REGISTRY', args),
}


export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'StorkFeeds' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation:  {
  [K in Mutations]: {
    contractName: 'StorkFeeds'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
		setLocalGovernor: getMutation('setLocalGovernor'),
		updateStorkPrices: getMutation('updateStorkPrices'),
		setStorkFeed: getMutation('setStorkFeed'),
		disableStorkPriceFeed: getMutation('disableStorkPriceFeed'),
		recoverEthBalance: getMutation('recoverEthBalance'),
		setOraclePartnerId: getMutation('setOraclePartnerId'),
}




export type SDK = {
		isGovernor: (...args: ExtractArgs<Contract['calls']['isGovernor']>) => Promise<CallReturn<'isGovernor'>>
		isValidLocalGovernor: (...args: ExtractArgs<Contract['calls']['isValidLocalGovernor']>) => Promise<CallReturn<'isValidLocalGovernor'>>
		localGovernor: (...args: ExtractArgs<Contract['calls']['localGovernor']>) => Promise<CallReturn<'localGovernor'>>
		getConfiguredAssets: (...args: ExtractArgs<Contract['calls']['getConfiguredAssets']>) => Promise<CallReturn<'getConfiguredAssets'>>
		assets: (...args: ExtractArgs<Contract['calls']['assets']>) => Promise<CallReturn<'assets'>>
		indexOfAsset: (...args: ExtractArgs<Contract['calls']['indexOfAsset']>) => Promise<CallReturn<'indexOfAsset'>>
		numAssets: (...args: ExtractArgs<Contract['calls']['numAssets']>) => Promise<CallReturn<'numAssets'>>
		getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) => Promise<CallReturn<'getPrice'>>
		getPriceAndHasFeed: (...args: ExtractArgs<Contract['calls']['getPriceAndHasFeed']>) => Promise<CallReturn<'getPriceAndHasFeed'>>
		hasPriceFeed: (...args: ExtractArgs<Contract['calls']['hasPriceFeed']>) => Promise<CallReturn<'hasPriceFeed'>>
		isValidStorkFeed: (...args: ExtractArgs<Contract['calls']['isValidStorkFeed']>) => Promise<CallReturn<'isValidStorkFeed'>>
		isValidEthRecovery: (...args: ExtractArgs<Contract['calls']['isValidEthRecovery']>) => Promise<CallReturn<'isValidEthRecovery'>>
		STORK: (...args: ExtractArgs<Contract['calls']['STORK']>) => Promise<CallReturn<'STORK'>>
		feedConfig: (...args: ExtractArgs<Contract['calls']['feedConfig']>) => Promise<CallReturn<'feedConfig'>>
		oraclePartnerId: (...args: ExtractArgs<Contract['calls']['oraclePartnerId']>) => Promise<CallReturn<'oraclePartnerId'>>
		ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) => Promise<CallReturn<'ADDY_REGISTRY'>>
		setLocalGovernor: (...args: ExtractArgs<Contract['mutations']['setLocalGovernor']>) => Promise<Address>
		updateStorkPrices: (...args: ExtractArgs<Contract['mutations']['updateStorkPrices']>) => Promise<Address>
		setStorkFeed: (...args: ExtractArgs<Contract['mutations']['setStorkFeed']>) => Promise<Address>
		disableStorkPriceFeed: (...args: ExtractArgs<Contract['mutations']['disableStorkPriceFeed']>) => Promise<Address>
		recoverEthBalance: (...args: ExtractArgs<Contract['mutations']['recoverEthBalance']>) => Promise<Address>
		setOraclePartnerId: (...args: ExtractArgs<Contract['mutations']['setOraclePartnerId']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    // Queries
		isGovernor: (...args: ExtractArgs<Contract['calls']['isGovernor']>) => singleQuery(publicClient!, call.isGovernor(...args)) as Promise<CallReturn<'isGovernor'>>,
		isValidLocalGovernor: (...args: ExtractArgs<Contract['calls']['isValidLocalGovernor']>) => singleQuery(publicClient!, call.isValidLocalGovernor(...args)) as Promise<CallReturn<'isValidLocalGovernor'>>,
		localGovernor: (...args: ExtractArgs<Contract['calls']['localGovernor']>) => singleQuery(publicClient!, call.localGovernor(...args)) as Promise<CallReturn<'localGovernor'>>,
		getConfiguredAssets: (...args: ExtractArgs<Contract['calls']['getConfiguredAssets']>) => singleQuery(publicClient!, call.getConfiguredAssets(...args)) as Promise<CallReturn<'getConfiguredAssets'>>,
		assets: (...args: ExtractArgs<Contract['calls']['assets']>) => singleQuery(publicClient!, call.assets(...args)) as Promise<CallReturn<'assets'>>,
		indexOfAsset: (...args: ExtractArgs<Contract['calls']['indexOfAsset']>) => singleQuery(publicClient!, call.indexOfAsset(...args)) as Promise<CallReturn<'indexOfAsset'>>,
		numAssets: (...args: ExtractArgs<Contract['calls']['numAssets']>) => singleQuery(publicClient!, call.numAssets(...args)) as Promise<CallReturn<'numAssets'>>,
		getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) => singleQuery(publicClient!, call.getPrice(...args)) as Promise<CallReturn<'getPrice'>>,
		getPriceAndHasFeed: (...args: ExtractArgs<Contract['calls']['getPriceAndHasFeed']>) => singleQuery(publicClient!, call.getPriceAndHasFeed(...args)) as Promise<CallReturn<'getPriceAndHasFeed'>>,
		hasPriceFeed: (...args: ExtractArgs<Contract['calls']['hasPriceFeed']>) => singleQuery(publicClient!, call.hasPriceFeed(...args)) as Promise<CallReturn<'hasPriceFeed'>>,
		isValidStorkFeed: (...args: ExtractArgs<Contract['calls']['isValidStorkFeed']>) => singleQuery(publicClient!, call.isValidStorkFeed(...args)) as Promise<CallReturn<'isValidStorkFeed'>>,
		isValidEthRecovery: (...args: ExtractArgs<Contract['calls']['isValidEthRecovery']>) => singleQuery(publicClient!, call.isValidEthRecovery(...args)) as Promise<CallReturn<'isValidEthRecovery'>>,
		STORK: (...args: ExtractArgs<Contract['calls']['STORK']>) => singleQuery(publicClient!, call.STORK(...args)) as Promise<CallReturn<'STORK'>>,
		feedConfig: (...args: ExtractArgs<Contract['calls']['feedConfig']>) => singleQuery(publicClient!, call.feedConfig(...args)) as Promise<CallReturn<'feedConfig'>>,
		oraclePartnerId: (...args: ExtractArgs<Contract['calls']['oraclePartnerId']>) => singleQuery(publicClient!, call.oraclePartnerId(...args)) as Promise<CallReturn<'oraclePartnerId'>>,
		ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) => singleQuery(publicClient!, call.ADDY_REGISTRY(...args)) as Promise<CallReturn<'ADDY_REGISTRY'>>,
    
    // Mutations
		setLocalGovernor: (...args: ExtractArgs<Contract['mutations']['setLocalGovernor']>) => mutate(walletClient!, mutation.setLocalGovernor)(...args),
		updateStorkPrices: (...args: ExtractArgs<Contract['mutations']['updateStorkPrices']>) => mutate(walletClient!, mutation.updateStorkPrices)(...args),
		setStorkFeed: (...args: ExtractArgs<Contract['mutations']['setStorkFeed']>) => mutate(walletClient!, mutation.setStorkFeed)(...args),
		disableStorkPriceFeed: (...args: ExtractArgs<Contract['mutations']['disableStorkPriceFeed']>) => mutate(walletClient!, mutation.disableStorkPriceFeed)(...args),
		recoverEthBalance: (...args: ExtractArgs<Contract['mutations']['recoverEthBalance']>) => mutate(walletClient!, mutation.recoverEthBalance)(...args),
		setOraclePartnerId: (...args: ExtractArgs<Contract['mutations']['setOraclePartnerId']>) => mutate(walletClient!, mutation.setOraclePartnerId)(...args),
  }
}

