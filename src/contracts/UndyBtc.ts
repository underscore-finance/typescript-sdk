/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'Deposit',
    inputs: [
      {
        name: 'sender',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        type: 'address',
        indexed: true,
      },
      {
        name: 'assets',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'Withdraw',
    inputs: [
      {
        name: 'sender',
        type: 'address',
        indexed: true,
      },
      {
        name: 'receiver',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        type: 'address',
        indexed: true,
      },
      {
        name: 'assets',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'Transfer',
    inputs: [
      {
        name: 'sender',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'Approval',
    inputs: [
      {
        name: 'owner',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'BlacklistModified',
    inputs: [
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'isBlacklisted',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'TokenPauseModified',
    inputs: [
      {
        name: 'isPaused',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'EarnVaultAction',
    inputs: [
      {
        name: 'op',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'asset1',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset2',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount1',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount2',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdValue',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'legoId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'signer',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PerformanceFeesClaimed',
    inputs: [
      {
        name: 'pendingFees',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'name',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'symbol',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'decimals',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transfer',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transferFrom',
    inputs: [
      {
        name: '_sender',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'approve',
    inputs: [
      {
        name: '_spender',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'increaseAllowance',
    inputs: [
      {
        name: '_spender',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'decreaseAllowance',
    inputs: [
      {
        name: '_spender',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'burn',
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'DOMAIN_SEPARATOR',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bytes32',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'permit',
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_spender',
        type: 'address',
      },
      {
        name: '_value',
        type: 'uint256',
      },
      {
        name: '_deadline',
        type: 'uint256',
      },
      {
        name: '_signature',
        type: 'bytes',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setBlacklist',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
      {
        name: '_shouldBlacklist',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'burnBlacklistTokens',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'burnBlacklistTokens',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'pause',
    inputs: [
      {
        name: '_shouldPause',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'undyHq',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'blacklisted',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isPaused',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'balanceOf',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'allowance',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
      {
        name: 'arg1',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'totalSupply',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'TOKEN_NAME',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'TOKEN_SYMBOL',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'TOKEN_DECIMALS',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'VERSION',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'nonces',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_isSpecialTx',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'swapTokens',
    inputs: [
      {
        name: '_instructions',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimPerformanceFees',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getClaimablePerformanceFees',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'updateYieldPosition',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addManager',
    inputs: [
      {
        name: '_manager',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeManager',
    inputs: [
      {
        name: '_manager',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'lastUnderlyingBal',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingYieldRealized',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'vaultToLegoId',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'assets',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'indexOfAsset',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'numAssets',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'managers',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'indexOfManager',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'numManagers',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'asset',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'totalAssets',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getTotalAssets',
    inputs: [
      {
        name: '_shouldGetMax',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxDeposit',
    inputs: [
      {
        name: '_receiver',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'previewDeposit',
    inputs: [
      {
        name: '_assets',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'deposit',
    inputs: [
      {
        name: '_assets',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'deposit',
    inputs: [
      {
        name: '_assets',
        type: 'uint256',
      },
      {
        name: '_receiver',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxMint',
    inputs: [
      {
        name: '_receiver',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'previewMint',
    inputs: [
      {
        name: '_shares',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mint',
    inputs: [
      {
        name: '_shares',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mint',
    inputs: [
      {
        name: '_shares',
        type: 'uint256',
      },
      {
        name: '_receiver',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxWithdraw',
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'previewWithdraw',
    inputs: [
      {
        name: '_assets',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdraw',
    inputs: [
      {
        name: '_assets',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdraw',
    inputs: [
      {
        name: '_assets',
        type: 'uint256',
      },
      {
        name: '_receiver',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdraw',
    inputs: [
      {
        name: '_assets',
        type: 'uint256',
      },
      {
        name: '_receiver',
        type: 'address',
      },
      {
        name: '_owner',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxRedeem',
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'previewRedeem',
    inputs: [
      {
        name: '_shares',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'redeem',
    inputs: [
      {
        name: '_shares',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'redeem',
    inputs: [
      {
        name: '_shares',
        type: 'uint256',
      },
      {
        name: '_receiver',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'redeem',
    inputs: [
      {
        name: '_shares',
        type: 'uint256',
      },
      {
        name: '_receiver',
        type: 'address',
      },
      {
        name: '_owner',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'convertToShares',
    inputs: [
      {
        name: '_assets',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'convertToSharesSafe',
    inputs: [
      {
        name: '_assets',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'convertToAssets',
    inputs: [
      {
        name: '_shares',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'convertToAssetsSafe',
    inputs: [
      {
        name: '_shares',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_tokenName',
        type: 'string',
      },
      {
        name: '_tokenSymbol',
        type: 'string',
      },
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_minHqTimeLock',
        type: 'uint256',
      },
      {
        name: '_maxHqTimeLock',
        type: 'uint256',
      },
      {
        name: '_startingAgent',
        type: 'address',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0xf18F6E7738961F363b2Ab51a446d3612cC1DaAd5'

export type Contract = {
  calls: {
    name: () => Promise<string>
    symbol: () => Promise<string>
    decimals: () => Promise<number>
    DOMAIN_SEPARATOR: () => Promise<`0x${string}`>
    undyHq: () => Promise<`0x${string}`>
    blacklisted: (arg0: `0x${string}`) => Promise<boolean>
    isPaused: () => Promise<boolean>
    balanceOf: (arg0: `0x${string}`) => Promise<bigint>
    allowance: (arg0: `0x${string}`, arg1: `0x${string}`) => Promise<bigint>
    totalSupply: () => Promise<bigint>
    TOKEN_NAME: () => Promise<string>
    TOKEN_SYMBOL: () => Promise<string>
    TOKEN_DECIMALS: () => Promise<number>
    VERSION: () => Promise<string>
    nonces: (arg0: `0x${string}`) => Promise<bigint>
    getClaimablePerformanceFees: () => Promise<bigint>
    lastUnderlyingBal: () => Promise<bigint>
    pendingYieldRealized: () => Promise<bigint>
    vaultToLegoId: (arg0: `0x${string}`) => Promise<bigint>
    assets: (arg0: bigint) => Promise<`0x${string}`>
    indexOfAsset: (arg0: `0x${string}`) => Promise<bigint>
    numAssets: () => Promise<bigint>
    managers: (arg0: bigint) => Promise<`0x${string}`>
    indexOfManager: (arg0: `0x${string}`) => Promise<bigint>
    numManagers: () => Promise<bigint>
    asset: () => Promise<`0x${string}`>
    totalAssets: () => Promise<bigint>
    getTotalAssets: (shouldGetMax: boolean) => Promise<bigint>
    maxDeposit: (receiver: `0x${string}`) => Promise<bigint>
    previewDeposit: (assets: bigint) => Promise<bigint>
    maxMint: (receiver: `0x${string}`) => Promise<bigint>
    previewMint: (shares: bigint) => Promise<bigint>
    maxWithdraw: (owner: `0x${string}`) => Promise<bigint>
    previewWithdraw: (assets: bigint) => Promise<bigint>
    maxRedeem: (owner: `0x${string}`) => Promise<bigint>
    previewRedeem: (shares: bigint) => Promise<bigint>
    convertToShares: (assets: bigint) => Promise<bigint>
    convertToSharesSafe: (assets: bigint) => Promise<bigint>
    convertToAssets: (shares: bigint) => Promise<bigint>
    convertToAssetsSafe: (shares: bigint) => Promise<bigint>
  }
  mutations: {
    transfer: (recipient: `0x${string}`, amount: bigint) => Promise<boolean>
    transferFrom: (sender: `0x${string}`, recipient: `0x${string}`, amount: bigint) => Promise<boolean>
    approve: (spender: `0x${string}`, amount: bigint) => Promise<boolean>
    increaseAllowance: (spender: `0x${string}`, amount: bigint) => Promise<boolean>
    decreaseAllowance: (spender: `0x${string}`, amount: bigint) => Promise<boolean>
    burn: (amount: bigint) => Promise<boolean>
    permit: (
      owner: `0x${string}`,
      spender: `0x${string}`,
      value: bigint,
      deadline: bigint,
      signature: `0x${string}`,
    ) => Promise<boolean>
    setBlacklist: (addr: `0x${string}`, shouldBlacklist: boolean) => Promise<boolean>
    burnBlacklistTokens: (addr: `0x${string}`, amount?: bigint) => Promise<boolean>
    pause: (shouldPause: boolean) => Promise<void>
    depositForYield: (
      legoId: bigint,
      asset: `0x${string}`,
      vaultAddr?: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    withdrawFromYield: (
      legoId: bigint,
      vaultToken: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
      isSpecialTx?: boolean,
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    swapTokens: (
      instructions: {
        legoId: bigint
        amountIn: bigint
        minAmountOut: bigint
        tokenPath: `0x${string}`[]
        poolPath: `0x${string}`[]
      }[],
    ) => Promise<[`0x${string}`, bigint, `0x${string}`, bigint, bigint]>
    claimRewards: (
      legoId: bigint,
      rewardToken?: `0x${string}`,
      rewardAmount?: bigint,
      extraData?: `0x${string}`,
    ) => Promise<[bigint, bigint]>
    claimPerformanceFees: () => Promise<bigint>
    updateYieldPosition: (vaultToken: `0x${string}`) => Promise<void>
    addManager: (manager: `0x${string}`) => Promise<void>
    removeManager: (manager: `0x${string}`) => Promise<void>
    deposit: (assets: bigint, receiver?: `0x${string}`) => Promise<bigint>
    mint: (shares: bigint, receiver?: `0x${string}`) => Promise<bigint>
    withdraw: (assets: bigint, receiver?: `0x${string}`, owner?: `0x${string}`) => Promise<bigint>
    redeem: (shares: bigint, receiver?: `0x${string}`, owner?: `0x${string}`) => Promise<bigint>
  }
  events: {
    Deposit: (sender: `0x${string}`, owner: `0x${string}`, assets: bigint, shares: bigint) => Promise<void>
    Withdraw: (
      sender: `0x${string}`,
      receiver: `0x${string}`,
      owner: `0x${string}`,
      assets: bigint,
      shares: bigint,
    ) => Promise<void>
    Transfer: (sender: `0x${string}`, recipient: `0x${string}`, amount: bigint) => Promise<void>
    Approval: (owner: `0x${string}`, spender: `0x${string}`, amount: bigint) => Promise<void>
    BlacklistModified: (addr: `0x${string}`, isBlacklisted: boolean) => Promise<void>
    TokenPauseModified: (isPaused: boolean) => Promise<void>
    EarnVaultAction: (
      op: number,
      asset1: `0x${string}`,
      asset2: `0x${string}`,
      amount1: bigint,
      amount2: bigint,
      usdValue: bigint,
      legoId: bigint,
      signer: `0x${string}`,
    ) => Promise<void>
    PerformanceFeesClaimed: (pendingFees: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'UndyBtc'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'UndyBtc' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  name: (...args: ExtractArgs<Contract['calls']['name']>) => getRequest('name', args),
  symbol: (...args: ExtractArgs<Contract['calls']['symbol']>) => getRequest('symbol', args),
  decimals: (...args: ExtractArgs<Contract['calls']['decimals']>) => getRequest('decimals', args),
  DOMAIN_SEPARATOR: (...args: ExtractArgs<Contract['calls']['DOMAIN_SEPARATOR']>) =>
    getRequest('DOMAIN_SEPARATOR', args),
  undyHq: (...args: ExtractArgs<Contract['calls']['undyHq']>) => getRequest('undyHq', args),
  blacklisted: (...args: ExtractArgs<Contract['calls']['blacklisted']>) => getRequest('blacklisted', args),
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => getRequest('isPaused', args),
  balanceOf: (...args: ExtractArgs<Contract['calls']['balanceOf']>) => getRequest('balanceOf', args),
  allowance: (...args: ExtractArgs<Contract['calls']['allowance']>) => getRequest('allowance', args),
  totalSupply: (...args: ExtractArgs<Contract['calls']['totalSupply']>) => getRequest('totalSupply', args),
  TOKEN_NAME: (...args: ExtractArgs<Contract['calls']['TOKEN_NAME']>) => getRequest('TOKEN_NAME', args),
  TOKEN_SYMBOL: (...args: ExtractArgs<Contract['calls']['TOKEN_SYMBOL']>) => getRequest('TOKEN_SYMBOL', args),
  TOKEN_DECIMALS: (...args: ExtractArgs<Contract['calls']['TOKEN_DECIMALS']>) => getRequest('TOKEN_DECIMALS', args),
  VERSION: (...args: ExtractArgs<Contract['calls']['VERSION']>) => getRequest('VERSION', args),
  nonces: (...args: ExtractArgs<Contract['calls']['nonces']>) => getRequest('nonces', args),
  getClaimablePerformanceFees: (...args: ExtractArgs<Contract['calls']['getClaimablePerformanceFees']>) =>
    getRequest('getClaimablePerformanceFees', args),
  lastUnderlyingBal: (...args: ExtractArgs<Contract['calls']['lastUnderlyingBal']>) =>
    getRequest('lastUnderlyingBal', args),
  pendingYieldRealized: (...args: ExtractArgs<Contract['calls']['pendingYieldRealized']>) =>
    getRequest('pendingYieldRealized', args),
  vaultToLegoId: (...args: ExtractArgs<Contract['calls']['vaultToLegoId']>) => getRequest('vaultToLegoId', args),
  assets: (...args: ExtractArgs<Contract['calls']['assets']>) => getRequest('assets', args),
  indexOfAsset: (...args: ExtractArgs<Contract['calls']['indexOfAsset']>) => getRequest('indexOfAsset', args),
  numAssets: (...args: ExtractArgs<Contract['calls']['numAssets']>) => getRequest('numAssets', args),
  managers: (...args: ExtractArgs<Contract['calls']['managers']>) => getRequest('managers', args),
  indexOfManager: (...args: ExtractArgs<Contract['calls']['indexOfManager']>) => getRequest('indexOfManager', args),
  numManagers: (...args: ExtractArgs<Contract['calls']['numManagers']>) => getRequest('numManagers', args),
  asset: (...args: ExtractArgs<Contract['calls']['asset']>) => getRequest('asset', args),
  totalAssets: (...args: ExtractArgs<Contract['calls']['totalAssets']>) => getRequest('totalAssets', args),
  getTotalAssets: (...args: ExtractArgs<Contract['calls']['getTotalAssets']>) => getRequest('getTotalAssets', args),
  maxDeposit: (...args: ExtractArgs<Contract['calls']['maxDeposit']>) => getRequest('maxDeposit', args),
  previewDeposit: (...args: ExtractArgs<Contract['calls']['previewDeposit']>) => getRequest('previewDeposit', args),
  maxMint: (...args: ExtractArgs<Contract['calls']['maxMint']>) => getRequest('maxMint', args),
  previewMint: (...args: ExtractArgs<Contract['calls']['previewMint']>) => getRequest('previewMint', args),
  maxWithdraw: (...args: ExtractArgs<Contract['calls']['maxWithdraw']>) => getRequest('maxWithdraw', args),
  previewWithdraw: (...args: ExtractArgs<Contract['calls']['previewWithdraw']>) => getRequest('previewWithdraw', args),
  maxRedeem: (...args: ExtractArgs<Contract['calls']['maxRedeem']>) => getRequest('maxRedeem', args),
  previewRedeem: (...args: ExtractArgs<Contract['calls']['previewRedeem']>) => getRequest('previewRedeem', args),
  convertToShares: (...args: ExtractArgs<Contract['calls']['convertToShares']>) => getRequest('convertToShares', args),
  convertToSharesSafe: (...args: ExtractArgs<Contract['calls']['convertToSharesSafe']>) =>
    getRequest('convertToSharesSafe', args),
  convertToAssets: (...args: ExtractArgs<Contract['calls']['convertToAssets']>) => getRequest('convertToAssets', args),
  convertToAssetsSafe: (...args: ExtractArgs<Contract['calls']['convertToAssetsSafe']>) =>
    getRequest('convertToAssetsSafe', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'UndyBtc' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'UndyBtc'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  transfer: getMutation('transfer'),
  transferFrom: getMutation('transferFrom'),
  approve: getMutation('approve'),
  increaseAllowance: getMutation('increaseAllowance'),
  decreaseAllowance: getMutation('decreaseAllowance'),
  burn: getMutation('burn'),
  permit: getMutation('permit'),
  setBlacklist: getMutation('setBlacklist'),
  burnBlacklistTokens: getMutation('burnBlacklistTokens'),
  pause: getMutation('pause'),
  depositForYield: getMutation('depositForYield'),
  withdrawFromYield: getMutation('withdrawFromYield'),
  swapTokens: getMutation('swapTokens'),
  claimRewards: getMutation('claimRewards'),
  claimPerformanceFees: getMutation('claimPerformanceFees'),
  updateYieldPosition: getMutation('updateYieldPosition'),
  addManager: getMutation('addManager'),
  removeManager: getMutation('removeManager'),
  deposit: getMutation('deposit'),
  mint: getMutation('mint'),
  withdraw: getMutation('withdraw'),
  redeem: getMutation('redeem'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  name: (...args: ExtractArgs<Contract['calls']['name']>) => Promise<CallReturn<'name'>>
  symbol: (...args: ExtractArgs<Contract['calls']['symbol']>) => Promise<CallReturn<'symbol'>>
  decimals: (...args: ExtractArgs<Contract['calls']['decimals']>) => Promise<CallReturn<'decimals'>>
  DOMAIN_SEPARATOR: (
    ...args: ExtractArgs<Contract['calls']['DOMAIN_SEPARATOR']>
  ) => Promise<CallReturn<'DOMAIN_SEPARATOR'>>
  undyHq: (...args: ExtractArgs<Contract['calls']['undyHq']>) => Promise<CallReturn<'undyHq'>>
  blacklisted: (...args: ExtractArgs<Contract['calls']['blacklisted']>) => Promise<CallReturn<'blacklisted'>>
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => Promise<CallReturn<'isPaused'>>
  balanceOf: (...args: ExtractArgs<Contract['calls']['balanceOf']>) => Promise<CallReturn<'balanceOf'>>
  allowance: (...args: ExtractArgs<Contract['calls']['allowance']>) => Promise<CallReturn<'allowance'>>
  totalSupply: (...args: ExtractArgs<Contract['calls']['totalSupply']>) => Promise<CallReturn<'totalSupply'>>
  TOKEN_NAME: (...args: ExtractArgs<Contract['calls']['TOKEN_NAME']>) => Promise<CallReturn<'TOKEN_NAME'>>
  TOKEN_SYMBOL: (...args: ExtractArgs<Contract['calls']['TOKEN_SYMBOL']>) => Promise<CallReturn<'TOKEN_SYMBOL'>>
  TOKEN_DECIMALS: (...args: ExtractArgs<Contract['calls']['TOKEN_DECIMALS']>) => Promise<CallReturn<'TOKEN_DECIMALS'>>
  VERSION: (...args: ExtractArgs<Contract['calls']['VERSION']>) => Promise<CallReturn<'VERSION'>>
  nonces: (...args: ExtractArgs<Contract['calls']['nonces']>) => Promise<CallReturn<'nonces'>>
  getClaimablePerformanceFees: (
    ...args: ExtractArgs<Contract['calls']['getClaimablePerformanceFees']>
  ) => Promise<CallReturn<'getClaimablePerformanceFees'>>
  lastUnderlyingBal: (
    ...args: ExtractArgs<Contract['calls']['lastUnderlyingBal']>
  ) => Promise<CallReturn<'lastUnderlyingBal'>>
  pendingYieldRealized: (
    ...args: ExtractArgs<Contract['calls']['pendingYieldRealized']>
  ) => Promise<CallReturn<'pendingYieldRealized'>>
  vaultToLegoId: (...args: ExtractArgs<Contract['calls']['vaultToLegoId']>) => Promise<CallReturn<'vaultToLegoId'>>
  assets: (...args: ExtractArgs<Contract['calls']['assets']>) => Promise<CallReturn<'assets'>>
  indexOfAsset: (...args: ExtractArgs<Contract['calls']['indexOfAsset']>) => Promise<CallReturn<'indexOfAsset'>>
  numAssets: (...args: ExtractArgs<Contract['calls']['numAssets']>) => Promise<CallReturn<'numAssets'>>
  managers: (...args: ExtractArgs<Contract['calls']['managers']>) => Promise<CallReturn<'managers'>>
  indexOfManager: (...args: ExtractArgs<Contract['calls']['indexOfManager']>) => Promise<CallReturn<'indexOfManager'>>
  numManagers: (...args: ExtractArgs<Contract['calls']['numManagers']>) => Promise<CallReturn<'numManagers'>>
  asset: (...args: ExtractArgs<Contract['calls']['asset']>) => Promise<CallReturn<'asset'>>
  totalAssets: (...args: ExtractArgs<Contract['calls']['totalAssets']>) => Promise<CallReturn<'totalAssets'>>
  getTotalAssets: (...args: ExtractArgs<Contract['calls']['getTotalAssets']>) => Promise<CallReturn<'getTotalAssets'>>
  maxDeposit: (...args: ExtractArgs<Contract['calls']['maxDeposit']>) => Promise<CallReturn<'maxDeposit'>>
  previewDeposit: (...args: ExtractArgs<Contract['calls']['previewDeposit']>) => Promise<CallReturn<'previewDeposit'>>
  maxMint: (...args: ExtractArgs<Contract['calls']['maxMint']>) => Promise<CallReturn<'maxMint'>>
  previewMint: (...args: ExtractArgs<Contract['calls']['previewMint']>) => Promise<CallReturn<'previewMint'>>
  maxWithdraw: (...args: ExtractArgs<Contract['calls']['maxWithdraw']>) => Promise<CallReturn<'maxWithdraw'>>
  previewWithdraw: (
    ...args: ExtractArgs<Contract['calls']['previewWithdraw']>
  ) => Promise<CallReturn<'previewWithdraw'>>
  maxRedeem: (...args: ExtractArgs<Contract['calls']['maxRedeem']>) => Promise<CallReturn<'maxRedeem'>>
  previewRedeem: (...args: ExtractArgs<Contract['calls']['previewRedeem']>) => Promise<CallReturn<'previewRedeem'>>
  convertToShares: (
    ...args: ExtractArgs<Contract['calls']['convertToShares']>
  ) => Promise<CallReturn<'convertToShares'>>
  convertToSharesSafe: (
    ...args: ExtractArgs<Contract['calls']['convertToSharesSafe']>
  ) => Promise<CallReturn<'convertToSharesSafe'>>
  convertToAssets: (
    ...args: ExtractArgs<Contract['calls']['convertToAssets']>
  ) => Promise<CallReturn<'convertToAssets'>>
  convertToAssetsSafe: (
    ...args: ExtractArgs<Contract['calls']['convertToAssetsSafe']>
  ) => Promise<CallReturn<'convertToAssetsSafe'>>
  transfer: (...args: ExtractArgs<Contract['mutations']['transfer']>) => Promise<Address>
  transferFrom: (...args: ExtractArgs<Contract['mutations']['transferFrom']>) => Promise<Address>
  approve: (...args: ExtractArgs<Contract['mutations']['approve']>) => Promise<Address>
  increaseAllowance: (...args: ExtractArgs<Contract['mutations']['increaseAllowance']>) => Promise<Address>
  decreaseAllowance: (...args: ExtractArgs<Contract['mutations']['decreaseAllowance']>) => Promise<Address>
  burn: (...args: ExtractArgs<Contract['mutations']['burn']>) => Promise<Address>
  permit: (...args: ExtractArgs<Contract['mutations']['permit']>) => Promise<Address>
  setBlacklist: (...args: ExtractArgs<Contract['mutations']['setBlacklist']>) => Promise<Address>
  burnBlacklistTokens: (...args: ExtractArgs<Contract['mutations']['burnBlacklistTokens']>) => Promise<Address>
  pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => Promise<Address>
  depositForYield: (...args: ExtractArgs<Contract['mutations']['depositForYield']>) => Promise<Address>
  withdrawFromYield: (...args: ExtractArgs<Contract['mutations']['withdrawFromYield']>) => Promise<Address>
  swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) => Promise<Address>
  claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) => Promise<Address>
  claimPerformanceFees: (...args: ExtractArgs<Contract['mutations']['claimPerformanceFees']>) => Promise<Address>
  updateYieldPosition: (...args: ExtractArgs<Contract['mutations']['updateYieldPosition']>) => Promise<Address>
  addManager: (...args: ExtractArgs<Contract['mutations']['addManager']>) => Promise<Address>
  removeManager: (...args: ExtractArgs<Contract['mutations']['removeManager']>) => Promise<Address>
  deposit: (...args: ExtractArgs<Contract['mutations']['deposit']>) => Promise<Address>
  mint: (...args: ExtractArgs<Contract['mutations']['mint']>) => Promise<Address>
  withdraw: (...args: ExtractArgs<Contract['mutations']['withdraw']>) => Promise<Address>
  redeem: (...args: ExtractArgs<Contract['mutations']['redeem']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    name: (...args: ExtractArgs<Contract['calls']['name']>) =>
      singleQuery(publicClient!, call.name(...args)) as Promise<CallReturn<'name'>>,
    symbol: (...args: ExtractArgs<Contract['calls']['symbol']>) =>
      singleQuery(publicClient!, call.symbol(...args)) as Promise<CallReturn<'symbol'>>,
    decimals: (...args: ExtractArgs<Contract['calls']['decimals']>) =>
      singleQuery(publicClient!, call.decimals(...args)) as Promise<CallReturn<'decimals'>>,
    DOMAIN_SEPARATOR: (...args: ExtractArgs<Contract['calls']['DOMAIN_SEPARATOR']>) =>
      singleQuery(publicClient!, call.DOMAIN_SEPARATOR(...args)) as Promise<CallReturn<'DOMAIN_SEPARATOR'>>,
    undyHq: (...args: ExtractArgs<Contract['calls']['undyHq']>) =>
      singleQuery(publicClient!, call.undyHq(...args)) as Promise<CallReturn<'undyHq'>>,
    blacklisted: (...args: ExtractArgs<Contract['calls']['blacklisted']>) =>
      singleQuery(publicClient!, call.blacklisted(...args)) as Promise<CallReturn<'blacklisted'>>,
    isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) =>
      singleQuery(publicClient!, call.isPaused(...args)) as Promise<CallReturn<'isPaused'>>,
    balanceOf: (...args: ExtractArgs<Contract['calls']['balanceOf']>) =>
      singleQuery(publicClient!, call.balanceOf(...args)) as Promise<CallReturn<'balanceOf'>>,
    allowance: (...args: ExtractArgs<Contract['calls']['allowance']>) =>
      singleQuery(publicClient!, call.allowance(...args)) as Promise<CallReturn<'allowance'>>,
    totalSupply: (...args: ExtractArgs<Contract['calls']['totalSupply']>) =>
      singleQuery(publicClient!, call.totalSupply(...args)) as Promise<CallReturn<'totalSupply'>>,
    TOKEN_NAME: (...args: ExtractArgs<Contract['calls']['TOKEN_NAME']>) =>
      singleQuery(publicClient!, call.TOKEN_NAME(...args)) as Promise<CallReturn<'TOKEN_NAME'>>,
    TOKEN_SYMBOL: (...args: ExtractArgs<Contract['calls']['TOKEN_SYMBOL']>) =>
      singleQuery(publicClient!, call.TOKEN_SYMBOL(...args)) as Promise<CallReturn<'TOKEN_SYMBOL'>>,
    TOKEN_DECIMALS: (...args: ExtractArgs<Contract['calls']['TOKEN_DECIMALS']>) =>
      singleQuery(publicClient!, call.TOKEN_DECIMALS(...args)) as Promise<CallReturn<'TOKEN_DECIMALS'>>,
    VERSION: (...args: ExtractArgs<Contract['calls']['VERSION']>) =>
      singleQuery(publicClient!, call.VERSION(...args)) as Promise<CallReturn<'VERSION'>>,
    nonces: (...args: ExtractArgs<Contract['calls']['nonces']>) =>
      singleQuery(publicClient!, call.nonces(...args)) as Promise<CallReturn<'nonces'>>,
    getClaimablePerformanceFees: (...args: ExtractArgs<Contract['calls']['getClaimablePerformanceFees']>) =>
      singleQuery(publicClient!, call.getClaimablePerformanceFees(...args)) as Promise<
        CallReturn<'getClaimablePerformanceFees'>
      >,
    lastUnderlyingBal: (...args: ExtractArgs<Contract['calls']['lastUnderlyingBal']>) =>
      singleQuery(publicClient!, call.lastUnderlyingBal(...args)) as Promise<CallReturn<'lastUnderlyingBal'>>,
    pendingYieldRealized: (...args: ExtractArgs<Contract['calls']['pendingYieldRealized']>) =>
      singleQuery(publicClient!, call.pendingYieldRealized(...args)) as Promise<CallReturn<'pendingYieldRealized'>>,
    vaultToLegoId: (...args: ExtractArgs<Contract['calls']['vaultToLegoId']>) =>
      singleQuery(publicClient!, call.vaultToLegoId(...args)) as Promise<CallReturn<'vaultToLegoId'>>,
    assets: (...args: ExtractArgs<Contract['calls']['assets']>) =>
      singleQuery(publicClient!, call.assets(...args)) as Promise<CallReturn<'assets'>>,
    indexOfAsset: (...args: ExtractArgs<Contract['calls']['indexOfAsset']>) =>
      singleQuery(publicClient!, call.indexOfAsset(...args)) as Promise<CallReturn<'indexOfAsset'>>,
    numAssets: (...args: ExtractArgs<Contract['calls']['numAssets']>) =>
      singleQuery(publicClient!, call.numAssets(...args)) as Promise<CallReturn<'numAssets'>>,
    managers: (...args: ExtractArgs<Contract['calls']['managers']>) =>
      singleQuery(publicClient!, call.managers(...args)) as Promise<CallReturn<'managers'>>,
    indexOfManager: (...args: ExtractArgs<Contract['calls']['indexOfManager']>) =>
      singleQuery(publicClient!, call.indexOfManager(...args)) as Promise<CallReturn<'indexOfManager'>>,
    numManagers: (...args: ExtractArgs<Contract['calls']['numManagers']>) =>
      singleQuery(publicClient!, call.numManagers(...args)) as Promise<CallReturn<'numManagers'>>,
    asset: (...args: ExtractArgs<Contract['calls']['asset']>) =>
      singleQuery(publicClient!, call.asset(...args)) as Promise<CallReturn<'asset'>>,
    totalAssets: (...args: ExtractArgs<Contract['calls']['totalAssets']>) =>
      singleQuery(publicClient!, call.totalAssets(...args)) as Promise<CallReturn<'totalAssets'>>,
    getTotalAssets: (...args: ExtractArgs<Contract['calls']['getTotalAssets']>) =>
      singleQuery(publicClient!, call.getTotalAssets(...args)) as Promise<CallReturn<'getTotalAssets'>>,
    maxDeposit: (...args: ExtractArgs<Contract['calls']['maxDeposit']>) =>
      singleQuery(publicClient!, call.maxDeposit(...args)) as Promise<CallReturn<'maxDeposit'>>,
    previewDeposit: (...args: ExtractArgs<Contract['calls']['previewDeposit']>) =>
      singleQuery(publicClient!, call.previewDeposit(...args)) as Promise<CallReturn<'previewDeposit'>>,
    maxMint: (...args: ExtractArgs<Contract['calls']['maxMint']>) =>
      singleQuery(publicClient!, call.maxMint(...args)) as Promise<CallReturn<'maxMint'>>,
    previewMint: (...args: ExtractArgs<Contract['calls']['previewMint']>) =>
      singleQuery(publicClient!, call.previewMint(...args)) as Promise<CallReturn<'previewMint'>>,
    maxWithdraw: (...args: ExtractArgs<Contract['calls']['maxWithdraw']>) =>
      singleQuery(publicClient!, call.maxWithdraw(...args)) as Promise<CallReturn<'maxWithdraw'>>,
    previewWithdraw: (...args: ExtractArgs<Contract['calls']['previewWithdraw']>) =>
      singleQuery(publicClient!, call.previewWithdraw(...args)) as Promise<CallReturn<'previewWithdraw'>>,
    maxRedeem: (...args: ExtractArgs<Contract['calls']['maxRedeem']>) =>
      singleQuery(publicClient!, call.maxRedeem(...args)) as Promise<CallReturn<'maxRedeem'>>,
    previewRedeem: (...args: ExtractArgs<Contract['calls']['previewRedeem']>) =>
      singleQuery(publicClient!, call.previewRedeem(...args)) as Promise<CallReturn<'previewRedeem'>>,
    convertToShares: (...args: ExtractArgs<Contract['calls']['convertToShares']>) =>
      singleQuery(publicClient!, call.convertToShares(...args)) as Promise<CallReturn<'convertToShares'>>,
    convertToSharesSafe: (...args: ExtractArgs<Contract['calls']['convertToSharesSafe']>) =>
      singleQuery(publicClient!, call.convertToSharesSafe(...args)) as Promise<CallReturn<'convertToSharesSafe'>>,
    convertToAssets: (...args: ExtractArgs<Contract['calls']['convertToAssets']>) =>
      singleQuery(publicClient!, call.convertToAssets(...args)) as Promise<CallReturn<'convertToAssets'>>,
    convertToAssetsSafe: (...args: ExtractArgs<Contract['calls']['convertToAssetsSafe']>) =>
      singleQuery(publicClient!, call.convertToAssetsSafe(...args)) as Promise<CallReturn<'convertToAssetsSafe'>>,

    // Mutations
    transfer: (...args: ExtractArgs<Contract['mutations']['transfer']>) =>
      mutate(walletClient!, mutation.transfer)(...args),
    transferFrom: (...args: ExtractArgs<Contract['mutations']['transferFrom']>) =>
      mutate(walletClient!, mutation.transferFrom)(...args),
    approve: (...args: ExtractArgs<Contract['mutations']['approve']>) =>
      mutate(walletClient!, mutation.approve)(...args),
    increaseAllowance: (...args: ExtractArgs<Contract['mutations']['increaseAllowance']>) =>
      mutate(walletClient!, mutation.increaseAllowance)(...args),
    decreaseAllowance: (...args: ExtractArgs<Contract['mutations']['decreaseAllowance']>) =>
      mutate(walletClient!, mutation.decreaseAllowance)(...args),
    burn: (...args: ExtractArgs<Contract['mutations']['burn']>) => mutate(walletClient!, mutation.burn)(...args),
    permit: (...args: ExtractArgs<Contract['mutations']['permit']>) => mutate(walletClient!, mutation.permit)(...args),
    setBlacklist: (...args: ExtractArgs<Contract['mutations']['setBlacklist']>) =>
      mutate(walletClient!, mutation.setBlacklist)(...args),
    burnBlacklistTokens: (...args: ExtractArgs<Contract['mutations']['burnBlacklistTokens']>) =>
      mutate(walletClient!, mutation.burnBlacklistTokens)(...args),
    pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => mutate(walletClient!, mutation.pause)(...args),
    depositForYield: (...args: ExtractArgs<Contract['mutations']['depositForYield']>) =>
      mutate(walletClient!, mutation.depositForYield)(...args),
    withdrawFromYield: (...args: ExtractArgs<Contract['mutations']['withdrawFromYield']>) =>
      mutate(walletClient!, mutation.withdrawFromYield)(...args),
    swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) =>
      mutate(walletClient!, mutation.swapTokens)(...args),
    claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) =>
      mutate(walletClient!, mutation.claimRewards)(...args),
    claimPerformanceFees: (...args: ExtractArgs<Contract['mutations']['claimPerformanceFees']>) =>
      mutate(walletClient!, mutation.claimPerformanceFees)(...args),
    updateYieldPosition: (...args: ExtractArgs<Contract['mutations']['updateYieldPosition']>) =>
      mutate(walletClient!, mutation.updateYieldPosition)(...args),
    addManager: (...args: ExtractArgs<Contract['mutations']['addManager']>) =>
      mutate(walletClient!, mutation.addManager)(...args),
    removeManager: (...args: ExtractArgs<Contract['mutations']['removeManager']>) =>
      mutate(walletClient!, mutation.removeManager)(...args),
    deposit: (...args: ExtractArgs<Contract['mutations']['deposit']>) =>
      mutate(walletClient!, mutation.deposit)(...args),
    mint: (...args: ExtractArgs<Contract['mutations']['mint']>) => mutate(walletClient!, mutation.mint)(...args),
    withdraw: (...args: ExtractArgs<Contract['mutations']['withdraw']>) =>
      mutate(walletClient!, mutation.withdraw)(...args),
    redeem: (...args: ExtractArgs<Contract['mutations']['redeem']>) => mutate(walletClient!, mutation.redeem)(...args),
  }
}
