/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'GovChangeTimeLockModified',
    inputs: [
      {
        name: 'prevTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newTimeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'RegistryTimeLockModified',
    inputs: [
      {
        name: 'newTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'prevTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'registry',
        type: 'string',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeStarted',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeConfirmed',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeCancelled',
    inputs: [
      {
        name: 'cancelledGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovRelinquished',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'UndyHqSetupFinished',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'timeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepartmentPauseModified',
    inputs: [
      {
        name: 'isPaused',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepartmentFundsRecovered',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'balance',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'NewAddressPending',
    inputs: [
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'description',
        type: 'string',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'registry',
        type: 'string',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'NewAddressConfirmed',
    inputs: [
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'regId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        type: 'string',
        indexed: false,
      },
      {
        name: 'registry',
        type: 'string',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'NewAddressCancelled',
    inputs: [
      {
        name: 'description',
        type: 'string',
        indexed: false,
      },
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'registry',
        type: 'string',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AddressUpdatePending',
    inputs: [
      {
        name: 'regId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        type: 'string',
        indexed: false,
      },
      {
        name: 'newAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'prevAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'version',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'registry',
        type: 'string',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AddressUpdateConfirmed',
    inputs: [
      {
        name: 'regId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        type: 'string',
        indexed: false,
      },
      {
        name: 'newAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'prevAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'version',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'registry',
        type: 'string',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AddressUpdateCancelled',
    inputs: [
      {
        name: 'regId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        type: 'string',
        indexed: false,
      },
      {
        name: 'newAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'prevAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'registry',
        type: 'string',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AddressDisablePending',
    inputs: [
      {
        name: 'regId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        type: 'string',
        indexed: false,
      },
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'version',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'registry',
        type: 'string',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AddressDisableConfirmed',
    inputs: [
      {
        name: 'regId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        type: 'string',
        indexed: false,
      },
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'version',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'registry',
        type: 'string',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AddressDisableCancelled',
    inputs: [
      {
        name: 'regId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'description',
        type: 'string',
        indexed: false,
      },
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'registry',
        type: 'string',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHqFromGov',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canGovern',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getGovernors',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasPendingGovChange',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'startGovernanceChange',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmGovernanceChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelGovernanceChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'relinquishGov',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setGovTimeLock',
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidGovTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'minGovChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxGovChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'finishUndyHqSetup',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'finishUndyHqSetup',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
      {
        name: '_timeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'governance',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingGov',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'newGov',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'numGovChanges',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'govChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getRegistryDescription',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidNewAddress',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidAddressUpdate',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidAddressDisable',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setRegistryTimeLock',
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidRegistryTimeLock',
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setRegistryTimeLockAfterSetup',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setRegistryTimeLockAfterSetup',
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'minRegistryTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxRegistryTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidAddr',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidRegId',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getRegId',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddr',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddrInfo',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
          {
            name: 'description',
            type: 'string',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddrDescription',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getNumAddrs',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getLastAddr',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getLastRegId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'registryChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'addrInfo',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
          {
            name: 'description',
            type: 'string',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'addrToRegId',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'numAddrs',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingNewAddr',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'description',
            type: 'string',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingAddrUpdate',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'newAddr',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingAddrDisable',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddys',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'hq',
            type: 'address',
          },
          {
            name: 'undyToken',
            type: 'address',
          },
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'switchboard',
            type: 'address',
          },
          {
            name: 'hatchery',
            type: 'address',
          },
          {
            name: 'lootDistributor',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
          {
            name: 'walletBackpack',
            type: 'address',
          },
          {
            name: 'billing',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHq',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canMintUndy',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'pause',
    inputs: [
      {
        name: '_shouldPause',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFundsMany',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isPaused',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isSwitchboardAddr',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'startAddNewAddressToRegistry',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
      {
        name: '_description',
        type: 'string',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmNewAddressToRegistry',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelNewAddressToRegistry',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'startAddressUpdateToRegistry',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmAddressUpdateToRegistry',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelAddressUpdateToRegistry',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'startAddressDisableInRegistry',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmAddressDisableInRegistry',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelAddressDisableInRegistry',
    inputs: [
      {
        name: '_regId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setBlacklist',
    inputs: [
      {
        name: '_tokenAddr',
        type: 'address',
      },
      {
        name: '_addr',
        type: 'address',
      },
      {
        name: '_shouldBlacklist',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_minRegistryTimeLock',
        type: 'uint256',
      },
      {
        name: '_maxRegistryTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0xe52A6790fC8210DE16847f1FaF55A6146c0BfC7e'

export type Contract = {
  calls: {
    getUndyHqFromGov: () => Promise<`0x${string}`>
    canGovern: (addr: `0x${string}`) => Promise<boolean>
    getGovernors: () => Promise<`0x${string}`[]>
    hasPendingGovChange: () => Promise<boolean>
    isValidGovTimeLock: (newTimeLock: bigint) => Promise<boolean>
    minGovChangeTimeLock: () => Promise<bigint>
    maxGovChangeTimeLock: () => Promise<bigint>
    governance: () => Promise<`0x${string}`>
    pendingGov: () => Promise<{ newGov: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    numGovChanges: () => Promise<bigint>
    govChangeTimeLock: () => Promise<bigint>
    getRegistryDescription: () => Promise<string>
    isValidNewAddress: (addr: `0x${string}`) => Promise<boolean>
    isValidAddressUpdate: (regId: bigint, newAddr: `0x${string}`) => Promise<boolean>
    isValidAddressDisable: (regId: bigint) => Promise<boolean>
    isValidRegistryTimeLock: (numBlocks: bigint) => Promise<boolean>
    minRegistryTimeLock: () => Promise<bigint>
    maxRegistryTimeLock: () => Promise<bigint>
    isValidAddr: (addr: `0x${string}`) => Promise<boolean>
    isValidRegId: (regId: bigint) => Promise<boolean>
    getRegId: (addr: `0x${string}`) => Promise<bigint>
    getAddr: (regId: bigint) => Promise<`0x${string}`>
    getAddrInfo: (
      regId: bigint,
    ) => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint; description: string }>
    getAddrDescription: (regId: bigint) => Promise<string>
    getNumAddrs: () => Promise<bigint>
    getLastAddr: () => Promise<`0x${string}`>
    getLastRegId: () => Promise<bigint>
    registryChangeTimeLock: () => Promise<bigint>
    addrInfo: (
      arg0: bigint,
    ) => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint; description: string }>
    addrToRegId: (arg0: `0x${string}`) => Promise<bigint>
    numAddrs: () => Promise<bigint>
    pendingNewAddr: (
      arg0: `0x${string}`,
    ) => Promise<{ description: string; initiatedBlock: bigint; confirmBlock: bigint }>
    pendingAddrUpdate: (
      arg0: bigint,
    ) => Promise<{ newAddr: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    pendingAddrDisable: (arg0: bigint) => Promise<{ initiatedBlock: bigint; confirmBlock: bigint }>
    getAddys: () => Promise<{
      hq: `0x${string}`
      undyToken: `0x${string}`
      ledger: `0x${string}`
      missionControl: `0x${string}`
      legoBook: `0x${string}`
      switchboard: `0x${string}`
      hatchery: `0x${string}`
      lootDistributor: `0x${string}`
      appraiser: `0x${string}`
      walletBackpack: `0x${string}`
      billing: `0x${string}`
    }>
    getUndyHq: () => Promise<`0x${string}`>
    canMintUndy: () => Promise<boolean>
    isPaused: () => Promise<boolean>
    isSwitchboardAddr: (addr: `0x${string}`) => Promise<boolean>
  }
  mutations: {
    startGovernanceChange: (newGov: `0x${string}`) => Promise<void>
    confirmGovernanceChange: () => Promise<void>
    cancelGovernanceChange: () => Promise<void>
    relinquishGov: () => Promise<void>
    setGovTimeLock: (numBlocks: bigint) => Promise<boolean>
    finishUndyHqSetup: (newGov: `0x${string}`, timeLock?: bigint) => Promise<boolean>
    setRegistryTimeLock: (numBlocks: bigint) => Promise<boolean>
    setRegistryTimeLockAfterSetup: (numBlocks?: bigint) => Promise<boolean>
    pause: (shouldPause: boolean) => Promise<void>
    recoverFunds: (recipient: `0x${string}`, asset: `0x${string}`) => Promise<void>
    recoverFundsMany: (recipient: `0x${string}`, assets: `0x${string}`[]) => Promise<void>
    startAddNewAddressToRegistry: (addr: `0x${string}`, description: string) => Promise<boolean>
    confirmNewAddressToRegistry: (addr: `0x${string}`) => Promise<bigint>
    cancelNewAddressToRegistry: (addr: `0x${string}`) => Promise<boolean>
    startAddressUpdateToRegistry: (regId: bigint, newAddr: `0x${string}`) => Promise<boolean>
    confirmAddressUpdateToRegistry: (regId: bigint) => Promise<boolean>
    cancelAddressUpdateToRegistry: (regId: bigint) => Promise<boolean>
    startAddressDisableInRegistry: (regId: bigint) => Promise<boolean>
    confirmAddressDisableInRegistry: (regId: bigint) => Promise<boolean>
    cancelAddressDisableInRegistry: (regId: bigint) => Promise<boolean>
    setBlacklist: (tokenAddr: `0x${string}`, addr: `0x${string}`, shouldBlacklist: boolean) => Promise<boolean>
  }
  events: {
    GovChangeTimeLockModified: (prevTimeLock: bigint, newTimeLock: bigint) => Promise<void>
    RegistryTimeLockModified: (newTimeLock: bigint, prevTimeLock: bigint, registry: string) => Promise<void>
    GovChangeStarted: (prevGov: `0x${string}`, newGov: `0x${string}`, confirmBlock: bigint) => Promise<void>
    GovChangeConfirmed: (
      prevGov: `0x${string}`,
      newGov: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    GovChangeCancelled: (cancelledGov: `0x${string}`, initiatedBlock: bigint, confirmBlock: bigint) => Promise<void>
    GovRelinquished: (prevGov: `0x${string}`) => Promise<void>
    UndyHqSetupFinished: (prevGov: `0x${string}`, newGov: `0x${string}`, timeLock: bigint) => Promise<void>
    DepartmentPauseModified: (isPaused: boolean) => Promise<void>
    DepartmentFundsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, balance: bigint) => Promise<void>
    NewAddressPending: (
      addr: `0x${string}`,
      description: string,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    NewAddressConfirmed: (addr: `0x${string}`, regId: bigint, description: string, registry: string) => Promise<void>
    NewAddressCancelled: (
      description: string,
      addr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddressUpdatePending: (
      regId: bigint,
      description: string,
      newAddr: `0x${string}`,
      prevAddr: `0x${string}`,
      version: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddressUpdateConfirmed: (
      regId: bigint,
      description: string,
      newAddr: `0x${string}`,
      prevAddr: `0x${string}`,
      version: bigint,
      registry: string,
    ) => Promise<void>
    AddressUpdateCancelled: (
      regId: bigint,
      description: string,
      newAddr: `0x${string}`,
      prevAddr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddressDisablePending: (
      regId: bigint,
      description: string,
      addr: `0x${string}`,
      version: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddressDisableConfirmed: (
      regId: bigint,
      description: string,
      addr: `0x${string}`,
      version: bigint,
      registry: string,
    ) => Promise<void>
    AddressDisableCancelled: (
      regId: bigint,
      description: string,
      addr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'Switchboard'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'Switchboard' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getUndyHqFromGov: (...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>) =>
    getRequest('getUndyHqFromGov', args),
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => getRequest('canGovern', args),
  getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) => getRequest('getGovernors', args),
  hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
    getRequest('hasPendingGovChange', args),
  isValidGovTimeLock: (...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>) =>
    getRequest('isValidGovTimeLock', args),
  minGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>) =>
    getRequest('minGovChangeTimeLock', args),
  maxGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>) =>
    getRequest('maxGovChangeTimeLock', args),
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => getRequest('governance', args),
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => getRequest('pendingGov', args),
  numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) => getRequest('numGovChanges', args),
  govChangeTimeLock: (...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>) =>
    getRequest('govChangeTimeLock', args),
  getRegistryDescription: (...args: ExtractArgs<Contract['calls']['getRegistryDescription']>) =>
    getRequest('getRegistryDescription', args),
  isValidNewAddress: (...args: ExtractArgs<Contract['calls']['isValidNewAddress']>) =>
    getRequest('isValidNewAddress', args),
  isValidAddressUpdate: (...args: ExtractArgs<Contract['calls']['isValidAddressUpdate']>) =>
    getRequest('isValidAddressUpdate', args),
  isValidAddressDisable: (...args: ExtractArgs<Contract['calls']['isValidAddressDisable']>) =>
    getRequest('isValidAddressDisable', args),
  isValidRegistryTimeLock: (...args: ExtractArgs<Contract['calls']['isValidRegistryTimeLock']>) =>
    getRequest('isValidRegistryTimeLock', args),
  minRegistryTimeLock: (...args: ExtractArgs<Contract['calls']['minRegistryTimeLock']>) =>
    getRequest('minRegistryTimeLock', args),
  maxRegistryTimeLock: (...args: ExtractArgs<Contract['calls']['maxRegistryTimeLock']>) =>
    getRequest('maxRegistryTimeLock', args),
  isValidAddr: (...args: ExtractArgs<Contract['calls']['isValidAddr']>) => getRequest('isValidAddr', args),
  isValidRegId: (...args: ExtractArgs<Contract['calls']['isValidRegId']>) => getRequest('isValidRegId', args),
  getRegId: (...args: ExtractArgs<Contract['calls']['getRegId']>) => getRequest('getRegId', args),
  getAddr: (...args: ExtractArgs<Contract['calls']['getAddr']>) => getRequest('getAddr', args),
  getAddrInfo: (...args: ExtractArgs<Contract['calls']['getAddrInfo']>) => getRequest('getAddrInfo', args),
  getAddrDescription: (...args: ExtractArgs<Contract['calls']['getAddrDescription']>) =>
    getRequest('getAddrDescription', args),
  getNumAddrs: (...args: ExtractArgs<Contract['calls']['getNumAddrs']>) => getRequest('getNumAddrs', args),
  getLastAddr: (...args: ExtractArgs<Contract['calls']['getLastAddr']>) => getRequest('getLastAddr', args),
  getLastRegId: (...args: ExtractArgs<Contract['calls']['getLastRegId']>) => getRequest('getLastRegId', args),
  registryChangeTimeLock: (...args: ExtractArgs<Contract['calls']['registryChangeTimeLock']>) =>
    getRequest('registryChangeTimeLock', args),
  addrInfo: (...args: ExtractArgs<Contract['calls']['addrInfo']>) => getRequest('addrInfo', args),
  addrToRegId: (...args: ExtractArgs<Contract['calls']['addrToRegId']>) => getRequest('addrToRegId', args),
  numAddrs: (...args: ExtractArgs<Contract['calls']['numAddrs']>) => getRequest('numAddrs', args),
  pendingNewAddr: (...args: ExtractArgs<Contract['calls']['pendingNewAddr']>) => getRequest('pendingNewAddr', args),
  pendingAddrUpdate: (...args: ExtractArgs<Contract['calls']['pendingAddrUpdate']>) =>
    getRequest('pendingAddrUpdate', args),
  pendingAddrDisable: (...args: ExtractArgs<Contract['calls']['pendingAddrDisable']>) =>
    getRequest('pendingAddrDisable', args),
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => getRequest('getAddys', args),
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => getRequest('getUndyHq', args),
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => getRequest('canMintUndy', args),
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => getRequest('isPaused', args),
  isSwitchboardAddr: (...args: ExtractArgs<Contract['calls']['isSwitchboardAddr']>) =>
    getRequest('isSwitchboardAddr', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'Switchboard' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'Switchboard'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  startGovernanceChange: getMutation('startGovernanceChange'),
  confirmGovernanceChange: getMutation('confirmGovernanceChange'),
  cancelGovernanceChange: getMutation('cancelGovernanceChange'),
  relinquishGov: getMutation('relinquishGov'),
  setGovTimeLock: getMutation('setGovTimeLock'),
  finishUndyHqSetup: getMutation('finishUndyHqSetup'),
  setRegistryTimeLock: getMutation('setRegistryTimeLock'),
  setRegistryTimeLockAfterSetup: getMutation('setRegistryTimeLockAfterSetup'),
  pause: getMutation('pause'),
  recoverFunds: getMutation('recoverFunds'),
  recoverFundsMany: getMutation('recoverFundsMany'),
  startAddNewAddressToRegistry: getMutation('startAddNewAddressToRegistry'),
  confirmNewAddressToRegistry: getMutation('confirmNewAddressToRegistry'),
  cancelNewAddressToRegistry: getMutation('cancelNewAddressToRegistry'),
  startAddressUpdateToRegistry: getMutation('startAddressUpdateToRegistry'),
  confirmAddressUpdateToRegistry: getMutation('confirmAddressUpdateToRegistry'),
  cancelAddressUpdateToRegistry: getMutation('cancelAddressUpdateToRegistry'),
  startAddressDisableInRegistry: getMutation('startAddressDisableInRegistry'),
  confirmAddressDisableInRegistry: getMutation('confirmAddressDisableInRegistry'),
  cancelAddressDisableInRegistry: getMutation('cancelAddressDisableInRegistry'),
  setBlacklist: getMutation('setBlacklist'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getUndyHqFromGov: (
    ...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>
  ) => Promise<CallReturn<'getUndyHqFromGov'>>
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => Promise<CallReturn<'canGovern'>>
  getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) => Promise<CallReturn<'getGovernors'>>
  hasPendingGovChange: (
    ...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>
  ) => Promise<CallReturn<'hasPendingGovChange'>>
  isValidGovTimeLock: (
    ...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>
  ) => Promise<CallReturn<'isValidGovTimeLock'>>
  minGovChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>
  ) => Promise<CallReturn<'minGovChangeTimeLock'>>
  maxGovChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>
  ) => Promise<CallReturn<'maxGovChangeTimeLock'>>
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => Promise<CallReturn<'governance'>>
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => Promise<CallReturn<'pendingGov'>>
  numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) => Promise<CallReturn<'numGovChanges'>>
  govChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>
  ) => Promise<CallReturn<'govChangeTimeLock'>>
  getRegistryDescription: (
    ...args: ExtractArgs<Contract['calls']['getRegistryDescription']>
  ) => Promise<CallReturn<'getRegistryDescription'>>
  isValidNewAddress: (
    ...args: ExtractArgs<Contract['calls']['isValidNewAddress']>
  ) => Promise<CallReturn<'isValidNewAddress'>>
  isValidAddressUpdate: (
    ...args: ExtractArgs<Contract['calls']['isValidAddressUpdate']>
  ) => Promise<CallReturn<'isValidAddressUpdate'>>
  isValidAddressDisable: (
    ...args: ExtractArgs<Contract['calls']['isValidAddressDisable']>
  ) => Promise<CallReturn<'isValidAddressDisable'>>
  isValidRegistryTimeLock: (
    ...args: ExtractArgs<Contract['calls']['isValidRegistryTimeLock']>
  ) => Promise<CallReturn<'isValidRegistryTimeLock'>>
  minRegistryTimeLock: (
    ...args: ExtractArgs<Contract['calls']['minRegistryTimeLock']>
  ) => Promise<CallReturn<'minRegistryTimeLock'>>
  maxRegistryTimeLock: (
    ...args: ExtractArgs<Contract['calls']['maxRegistryTimeLock']>
  ) => Promise<CallReturn<'maxRegistryTimeLock'>>
  isValidAddr: (...args: ExtractArgs<Contract['calls']['isValidAddr']>) => Promise<CallReturn<'isValidAddr'>>
  isValidRegId: (...args: ExtractArgs<Contract['calls']['isValidRegId']>) => Promise<CallReturn<'isValidRegId'>>
  getRegId: (...args: ExtractArgs<Contract['calls']['getRegId']>) => Promise<CallReturn<'getRegId'>>
  getAddr: (...args: ExtractArgs<Contract['calls']['getAddr']>) => Promise<CallReturn<'getAddr'>>
  getAddrInfo: (...args: ExtractArgs<Contract['calls']['getAddrInfo']>) => Promise<CallReturn<'getAddrInfo'>>
  getAddrDescription: (
    ...args: ExtractArgs<Contract['calls']['getAddrDescription']>
  ) => Promise<CallReturn<'getAddrDescription'>>
  getNumAddrs: (...args: ExtractArgs<Contract['calls']['getNumAddrs']>) => Promise<CallReturn<'getNumAddrs'>>
  getLastAddr: (...args: ExtractArgs<Contract['calls']['getLastAddr']>) => Promise<CallReturn<'getLastAddr'>>
  getLastRegId: (...args: ExtractArgs<Contract['calls']['getLastRegId']>) => Promise<CallReturn<'getLastRegId'>>
  registryChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['registryChangeTimeLock']>
  ) => Promise<CallReturn<'registryChangeTimeLock'>>
  addrInfo: (...args: ExtractArgs<Contract['calls']['addrInfo']>) => Promise<CallReturn<'addrInfo'>>
  addrToRegId: (...args: ExtractArgs<Contract['calls']['addrToRegId']>) => Promise<CallReturn<'addrToRegId'>>
  numAddrs: (...args: ExtractArgs<Contract['calls']['numAddrs']>) => Promise<CallReturn<'numAddrs'>>
  pendingNewAddr: (...args: ExtractArgs<Contract['calls']['pendingNewAddr']>) => Promise<CallReturn<'pendingNewAddr'>>
  pendingAddrUpdate: (
    ...args: ExtractArgs<Contract['calls']['pendingAddrUpdate']>
  ) => Promise<CallReturn<'pendingAddrUpdate'>>
  pendingAddrDisable: (
    ...args: ExtractArgs<Contract['calls']['pendingAddrDisable']>
  ) => Promise<CallReturn<'pendingAddrDisable'>>
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => Promise<CallReturn<'getAddys'>>
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => Promise<CallReturn<'getUndyHq'>>
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => Promise<CallReturn<'canMintUndy'>>
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => Promise<CallReturn<'isPaused'>>
  isSwitchboardAddr: (
    ...args: ExtractArgs<Contract['calls']['isSwitchboardAddr']>
  ) => Promise<CallReturn<'isSwitchboardAddr'>>
  startGovernanceChange: (...args: ExtractArgs<Contract['mutations']['startGovernanceChange']>) => Promise<Address>
  confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) => Promise<Address>
  cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) => Promise<Address>
  relinquishGov: (...args: ExtractArgs<Contract['mutations']['relinquishGov']>) => Promise<Address>
  setGovTimeLock: (...args: ExtractArgs<Contract['mutations']['setGovTimeLock']>) => Promise<Address>
  finishUndyHqSetup: (...args: ExtractArgs<Contract['mutations']['finishUndyHqSetup']>) => Promise<Address>
  setRegistryTimeLock: (...args: ExtractArgs<Contract['mutations']['setRegistryTimeLock']>) => Promise<Address>
  setRegistryTimeLockAfterSetup: (
    ...args: ExtractArgs<Contract['mutations']['setRegistryTimeLockAfterSetup']>
  ) => Promise<Address>
  pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => Promise<Address>
  recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) => Promise<Address>
  recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) => Promise<Address>
  startAddNewAddressToRegistry: (
    ...args: ExtractArgs<Contract['mutations']['startAddNewAddressToRegistry']>
  ) => Promise<Address>
  confirmNewAddressToRegistry: (
    ...args: ExtractArgs<Contract['mutations']['confirmNewAddressToRegistry']>
  ) => Promise<Address>
  cancelNewAddressToRegistry: (
    ...args: ExtractArgs<Contract['mutations']['cancelNewAddressToRegistry']>
  ) => Promise<Address>
  startAddressUpdateToRegistry: (
    ...args: ExtractArgs<Contract['mutations']['startAddressUpdateToRegistry']>
  ) => Promise<Address>
  confirmAddressUpdateToRegistry: (
    ...args: ExtractArgs<Contract['mutations']['confirmAddressUpdateToRegistry']>
  ) => Promise<Address>
  cancelAddressUpdateToRegistry: (
    ...args: ExtractArgs<Contract['mutations']['cancelAddressUpdateToRegistry']>
  ) => Promise<Address>
  startAddressDisableInRegistry: (
    ...args: ExtractArgs<Contract['mutations']['startAddressDisableInRegistry']>
  ) => Promise<Address>
  confirmAddressDisableInRegistry: (
    ...args: ExtractArgs<Contract['mutations']['confirmAddressDisableInRegistry']>
  ) => Promise<Address>
  cancelAddressDisableInRegistry: (
    ...args: ExtractArgs<Contract['mutations']['cancelAddressDisableInRegistry']>
  ) => Promise<Address>
  setBlacklist: (...args: ExtractArgs<Contract['mutations']['setBlacklist']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getUndyHqFromGov: (...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>) =>
      singleQuery(publicClient!, call.getUndyHqFromGov(...args)) as Promise<CallReturn<'getUndyHqFromGov'>>,
    canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) =>
      singleQuery(publicClient!, call.canGovern(...args)) as Promise<CallReturn<'canGovern'>>,
    getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) =>
      singleQuery(publicClient!, call.getGovernors(...args)) as Promise<CallReturn<'getGovernors'>>,
    hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
      singleQuery(publicClient!, call.hasPendingGovChange(...args)) as Promise<CallReturn<'hasPendingGovChange'>>,
    isValidGovTimeLock: (...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>) =>
      singleQuery(publicClient!, call.isValidGovTimeLock(...args)) as Promise<CallReturn<'isValidGovTimeLock'>>,
    minGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>) =>
      singleQuery(publicClient!, call.minGovChangeTimeLock(...args)) as Promise<CallReturn<'minGovChangeTimeLock'>>,
    maxGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>) =>
      singleQuery(publicClient!, call.maxGovChangeTimeLock(...args)) as Promise<CallReturn<'maxGovChangeTimeLock'>>,
    governance: (...args: ExtractArgs<Contract['calls']['governance']>) =>
      singleQuery(publicClient!, call.governance(...args)) as Promise<CallReturn<'governance'>>,
    pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) =>
      singleQuery(publicClient!, call.pendingGov(...args)) as Promise<CallReturn<'pendingGov'>>,
    numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) =>
      singleQuery(publicClient!, call.numGovChanges(...args)) as Promise<CallReturn<'numGovChanges'>>,
    govChangeTimeLock: (...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>) =>
      singleQuery(publicClient!, call.govChangeTimeLock(...args)) as Promise<CallReturn<'govChangeTimeLock'>>,
    getRegistryDescription: (...args: ExtractArgs<Contract['calls']['getRegistryDescription']>) =>
      singleQuery(publicClient!, call.getRegistryDescription(...args)) as Promise<CallReturn<'getRegistryDescription'>>,
    isValidNewAddress: (...args: ExtractArgs<Contract['calls']['isValidNewAddress']>) =>
      singleQuery(publicClient!, call.isValidNewAddress(...args)) as Promise<CallReturn<'isValidNewAddress'>>,
    isValidAddressUpdate: (...args: ExtractArgs<Contract['calls']['isValidAddressUpdate']>) =>
      singleQuery(publicClient!, call.isValidAddressUpdate(...args)) as Promise<CallReturn<'isValidAddressUpdate'>>,
    isValidAddressDisable: (...args: ExtractArgs<Contract['calls']['isValidAddressDisable']>) =>
      singleQuery(publicClient!, call.isValidAddressDisable(...args)) as Promise<CallReturn<'isValidAddressDisable'>>,
    isValidRegistryTimeLock: (...args: ExtractArgs<Contract['calls']['isValidRegistryTimeLock']>) =>
      singleQuery(publicClient!, call.isValidRegistryTimeLock(...args)) as Promise<
        CallReturn<'isValidRegistryTimeLock'>
      >,
    minRegistryTimeLock: (...args: ExtractArgs<Contract['calls']['minRegistryTimeLock']>) =>
      singleQuery(publicClient!, call.minRegistryTimeLock(...args)) as Promise<CallReturn<'minRegistryTimeLock'>>,
    maxRegistryTimeLock: (...args: ExtractArgs<Contract['calls']['maxRegistryTimeLock']>) =>
      singleQuery(publicClient!, call.maxRegistryTimeLock(...args)) as Promise<CallReturn<'maxRegistryTimeLock'>>,
    isValidAddr: (...args: ExtractArgs<Contract['calls']['isValidAddr']>) =>
      singleQuery(publicClient!, call.isValidAddr(...args)) as Promise<CallReturn<'isValidAddr'>>,
    isValidRegId: (...args: ExtractArgs<Contract['calls']['isValidRegId']>) =>
      singleQuery(publicClient!, call.isValidRegId(...args)) as Promise<CallReturn<'isValidRegId'>>,
    getRegId: (...args: ExtractArgs<Contract['calls']['getRegId']>) =>
      singleQuery(publicClient!, call.getRegId(...args)) as Promise<CallReturn<'getRegId'>>,
    getAddr: (...args: ExtractArgs<Contract['calls']['getAddr']>) =>
      singleQuery(publicClient!, call.getAddr(...args)) as Promise<CallReturn<'getAddr'>>,
    getAddrInfo: (...args: ExtractArgs<Contract['calls']['getAddrInfo']>) =>
      singleQuery(publicClient!, call.getAddrInfo(...args)) as Promise<CallReturn<'getAddrInfo'>>,
    getAddrDescription: (...args: ExtractArgs<Contract['calls']['getAddrDescription']>) =>
      singleQuery(publicClient!, call.getAddrDescription(...args)) as Promise<CallReturn<'getAddrDescription'>>,
    getNumAddrs: (...args: ExtractArgs<Contract['calls']['getNumAddrs']>) =>
      singleQuery(publicClient!, call.getNumAddrs(...args)) as Promise<CallReturn<'getNumAddrs'>>,
    getLastAddr: (...args: ExtractArgs<Contract['calls']['getLastAddr']>) =>
      singleQuery(publicClient!, call.getLastAddr(...args)) as Promise<CallReturn<'getLastAddr'>>,
    getLastRegId: (...args: ExtractArgs<Contract['calls']['getLastRegId']>) =>
      singleQuery(publicClient!, call.getLastRegId(...args)) as Promise<CallReturn<'getLastRegId'>>,
    registryChangeTimeLock: (...args: ExtractArgs<Contract['calls']['registryChangeTimeLock']>) =>
      singleQuery(publicClient!, call.registryChangeTimeLock(...args)) as Promise<CallReturn<'registryChangeTimeLock'>>,
    addrInfo: (...args: ExtractArgs<Contract['calls']['addrInfo']>) =>
      singleQuery(publicClient!, call.addrInfo(...args)) as Promise<CallReturn<'addrInfo'>>,
    addrToRegId: (...args: ExtractArgs<Contract['calls']['addrToRegId']>) =>
      singleQuery(publicClient!, call.addrToRegId(...args)) as Promise<CallReturn<'addrToRegId'>>,
    numAddrs: (...args: ExtractArgs<Contract['calls']['numAddrs']>) =>
      singleQuery(publicClient!, call.numAddrs(...args)) as Promise<CallReturn<'numAddrs'>>,
    pendingNewAddr: (...args: ExtractArgs<Contract['calls']['pendingNewAddr']>) =>
      singleQuery(publicClient!, call.pendingNewAddr(...args)) as Promise<CallReturn<'pendingNewAddr'>>,
    pendingAddrUpdate: (...args: ExtractArgs<Contract['calls']['pendingAddrUpdate']>) =>
      singleQuery(publicClient!, call.pendingAddrUpdate(...args)) as Promise<CallReturn<'pendingAddrUpdate'>>,
    pendingAddrDisable: (...args: ExtractArgs<Contract['calls']['pendingAddrDisable']>) =>
      singleQuery(publicClient!, call.pendingAddrDisable(...args)) as Promise<CallReturn<'pendingAddrDisable'>>,
    getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) =>
      singleQuery(publicClient!, call.getAddys(...args)) as Promise<CallReturn<'getAddys'>>,
    getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) =>
      singleQuery(publicClient!, call.getUndyHq(...args)) as Promise<CallReturn<'getUndyHq'>>,
    canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) =>
      singleQuery(publicClient!, call.canMintUndy(...args)) as Promise<CallReturn<'canMintUndy'>>,
    isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) =>
      singleQuery(publicClient!, call.isPaused(...args)) as Promise<CallReturn<'isPaused'>>,
    isSwitchboardAddr: (...args: ExtractArgs<Contract['calls']['isSwitchboardAddr']>) =>
      singleQuery(publicClient!, call.isSwitchboardAddr(...args)) as Promise<CallReturn<'isSwitchboardAddr'>>,

    // Mutations
    startGovernanceChange: (...args: ExtractArgs<Contract['mutations']['startGovernanceChange']>) =>
      mutate(walletClient!, mutation.startGovernanceChange)(...args),
    confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) =>
      mutate(walletClient!, mutation.confirmGovernanceChange)(...args),
    cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) =>
      mutate(walletClient!, mutation.cancelGovernanceChange)(...args),
    relinquishGov: (...args: ExtractArgs<Contract['mutations']['relinquishGov']>) =>
      mutate(walletClient!, mutation.relinquishGov)(...args),
    setGovTimeLock: (...args: ExtractArgs<Contract['mutations']['setGovTimeLock']>) =>
      mutate(walletClient!, mutation.setGovTimeLock)(...args),
    finishUndyHqSetup: (...args: ExtractArgs<Contract['mutations']['finishUndyHqSetup']>) =>
      mutate(walletClient!, mutation.finishUndyHqSetup)(...args),
    setRegistryTimeLock: (...args: ExtractArgs<Contract['mutations']['setRegistryTimeLock']>) =>
      mutate(walletClient!, mutation.setRegistryTimeLock)(...args),
    setRegistryTimeLockAfterSetup: (...args: ExtractArgs<Contract['mutations']['setRegistryTimeLockAfterSetup']>) =>
      mutate(walletClient!, mutation.setRegistryTimeLockAfterSetup)(...args),
    pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => mutate(walletClient!, mutation.pause)(...args),
    recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) =>
      mutate(walletClient!, mutation.recoverFunds)(...args),
    recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) =>
      mutate(walletClient!, mutation.recoverFundsMany)(...args),
    startAddNewAddressToRegistry: (...args: ExtractArgs<Contract['mutations']['startAddNewAddressToRegistry']>) =>
      mutate(walletClient!, mutation.startAddNewAddressToRegistry)(...args),
    confirmNewAddressToRegistry: (...args: ExtractArgs<Contract['mutations']['confirmNewAddressToRegistry']>) =>
      mutate(walletClient!, mutation.confirmNewAddressToRegistry)(...args),
    cancelNewAddressToRegistry: (...args: ExtractArgs<Contract['mutations']['cancelNewAddressToRegistry']>) =>
      mutate(walletClient!, mutation.cancelNewAddressToRegistry)(...args),
    startAddressUpdateToRegistry: (...args: ExtractArgs<Contract['mutations']['startAddressUpdateToRegistry']>) =>
      mutate(walletClient!, mutation.startAddressUpdateToRegistry)(...args),
    confirmAddressUpdateToRegistry: (...args: ExtractArgs<Contract['mutations']['confirmAddressUpdateToRegistry']>) =>
      mutate(walletClient!, mutation.confirmAddressUpdateToRegistry)(...args),
    cancelAddressUpdateToRegistry: (...args: ExtractArgs<Contract['mutations']['cancelAddressUpdateToRegistry']>) =>
      mutate(walletClient!, mutation.cancelAddressUpdateToRegistry)(...args),
    startAddressDisableInRegistry: (...args: ExtractArgs<Contract['mutations']['startAddressDisableInRegistry']>) =>
      mutate(walletClient!, mutation.startAddressDisableInRegistry)(...args),
    confirmAddressDisableInRegistry: (...args: ExtractArgs<Contract['mutations']['confirmAddressDisableInRegistry']>) =>
      mutate(walletClient!, mutation.confirmAddressDisableInRegistry)(...args),
    cancelAddressDisableInRegistry: (...args: ExtractArgs<Contract['mutations']['cancelAddressDisableInRegistry']>) =>
      mutate(walletClient!, mutation.cancelAddressDisableInRegistry)(...args),
    setBlacklist: (...args: ExtractArgs<Contract['mutations']['setBlacklist']>) =>
      mutate(walletClient!, mutation.setBlacklist)(...args),
  }
}
