/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`


export const abi = [
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "agent",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "asset",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "usdValue",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "trialPeriod",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "payPeriod",
                "type": "uint256"
            }
        ],
        "name": "AgentSubPriceSet",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "agent",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "asset",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "usdValue",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "trialPeriod",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "payPeriod",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "effectiveBlock",
                "type": "uint256"
            }
        ],
        "name": "PendingAgentSubPriceSet",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "asset",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "usdValue",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "trialPeriod",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "payPeriod",
                "type": "uint256"
            }
        ],
        "name": "ProtocolSubPriceSet",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "agent",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "asset",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "usdValue",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "trialPeriod",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "payPeriod",
                "type": "uint256"
            }
        ],
        "name": "AgentSubPriceRemoved",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "asset",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "usdValue",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "trialPeriod",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "payPeriod",
                "type": "uint256"
            }
        ],
        "name": "ProtocolSubPriceRemoved",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "isEnabled",
                "type": "bool"
            }
        ],
        "name": "AgentSubPricingEnabled",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "depositFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "withdrawalFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "rebalanceFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "transferFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "swapFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "addLiqFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "removeLiqFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "claimRewardsFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "borrowFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "repayFee",
                "type": "uint256"
            }
        ],
        "name": "ProtocolTxPriceSheetSet",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "depositFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "withdrawalFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "rebalanceFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "transferFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "swapFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "addLiqFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "removeLiqFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "claimRewardsFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "borrowFee",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "repayFee",
                "type": "uint256"
            }
        ],
        "name": "ProtocolTxPriceSheetRemoved",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "recipient",
                "type": "address"
            }
        ],
        "name": "ProtocolRecipientSet",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "delayBlocks",
                "type": "uint256"
            }
        ],
        "name": "PriceChangeDelaySet",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "isActivated",
                "type": "bool"
            }
        ],
        "name": "PriceSheetsActivated",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "addr",
                "type": "address"
            }
        ],
        "name": "LocalGovernorSet",
        "type": "event"
    },
    {
        "inputs": [
            {
                "name": "_address",
                "type": "address"
            }
        ],
        "name": "isGovernor",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_newGovernor",
                "type": "address"
            }
        ],
        "name": "isValidLocalGovernor",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_newGovernor",
                "type": "address"
            }
        ],
        "name": "setLocalGovernor",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "localGovernor",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_user",
                "type": "address"
            },
            {
                "name": "_agent",
                "type": "address"
            },
            {
                "name": "_agentPaidThru",
                "type": "uint256"
            },
            {
                "name": "_protocolPaidThru",
                "type": "uint256"
            },
            {
                "name": "_oracleRegistry",
                "type": "address"
            }
        ],
        "name": "getCombinedSubData",
        "outputs": [
            {
                "components": [
                    {
                        "name": "recipient",
                        "type": "address"
                    },
                    {
                        "name": "asset",
                        "type": "address"
                    },
                    {
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "name": "usdValue",
                        "type": "uint256"
                    },
                    {
                        "name": "paidThroughBlock",
                        "type": "uint256"
                    },
                    {
                        "name": "didChange",
                        "type": "bool"
                    }
                ],
                "name": "",
                "type": "tuple"
            },
            {
                "components": [
                    {
                        "name": "recipient",
                        "type": "address"
                    },
                    {
                        "name": "asset",
                        "type": "address"
                    },
                    {
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "name": "usdValue",
                        "type": "uint256"
                    },
                    {
                        "name": "paidThroughBlock",
                        "type": "uint256"
                    },
                    {
                        "name": "didChange",
                        "type": "bool"
                    }
                ],
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_agent",
                "type": "address"
            }
        ],
        "name": "getAgentSubPriceData",
        "outputs": [
            {
                "components": [
                    {
                        "name": "asset",
                        "type": "address"
                    },
                    {
                        "name": "usdValue",
                        "type": "uint256"
                    },
                    {
                        "name": "trialPeriod",
                        "type": "uint256"
                    },
                    {
                        "name": "payPeriod",
                        "type": "uint256"
                    }
                ],
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_usdValue",
                "type": "uint256"
            },
            {
                "name": "_trialPeriod",
                "type": "uint256"
            },
            {
                "name": "_payPeriod",
                "type": "uint256"
            }
        ],
        "name": "isValidSubPrice",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_agent",
                "type": "address"
            },
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_usdValue",
                "type": "uint256"
            },
            {
                "name": "_trialPeriod",
                "type": "uint256"
            },
            {
                "name": "_payPeriod",
                "type": "uint256"
            }
        ],
        "name": "setAgentSubPrice",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_agent",
                "type": "address"
            }
        ],
        "name": "finalizePendingAgentSubPrice",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_agent",
                "type": "address"
            }
        ],
        "name": "removeAgentSubPrice",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_isEnabled",
                "type": "bool"
            }
        ],
        "name": "setAgentSubPricingEnabled",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_usdValue",
                "type": "uint256"
            },
            {
                "name": "_trialPeriod",
                "type": "uint256"
            },
            {
                "name": "_payPeriod",
                "type": "uint256"
            }
        ],
        "name": "setProtocolSubPrice",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "removeProtocolSubPrice",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_user",
                "type": "address"
            },
            {
                "name": "_action",
                "type": "uint256"
            }
        ],
        "name": "getTransactionFeeData",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            },
            {
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_depositFee",
                "type": "uint256"
            },
            {
                "name": "_withdrawalFee",
                "type": "uint256"
            },
            {
                "name": "_rebalanceFee",
                "type": "uint256"
            },
            {
                "name": "_transferFee",
                "type": "uint256"
            },
            {
                "name": "_swapFee",
                "type": "uint256"
            },
            {
                "name": "_addLiqFee",
                "type": "uint256"
            },
            {
                "name": "_removeLiqFee",
                "type": "uint256"
            },
            {
                "name": "_claimRewardsFee",
                "type": "uint256"
            },
            {
                "name": "_borrowFee",
                "type": "uint256"
            },
            {
                "name": "_repayFee",
                "type": "uint256"
            }
        ],
        "name": "isValidTxPriceSheet",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_depositFee",
                "type": "uint256"
            },
            {
                "name": "_withdrawalFee",
                "type": "uint256"
            },
            {
                "name": "_rebalanceFee",
                "type": "uint256"
            },
            {
                "name": "_transferFee",
                "type": "uint256"
            },
            {
                "name": "_swapFee",
                "type": "uint256"
            },
            {
                "name": "_addLiqFee",
                "type": "uint256"
            },
            {
                "name": "_removeLiqFee",
                "type": "uint256"
            },
            {
                "name": "_claimRewardsFee",
                "type": "uint256"
            },
            {
                "name": "_borrowFee",
                "type": "uint256"
            },
            {
                "name": "_repayFee",
                "type": "uint256"
            }
        ],
        "name": "setProtocolTxPriceSheet",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "removeProtocolTxPriceSheet",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_recipient",
                "type": "address"
            }
        ],
        "name": "setProtocolRecipient",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_delayBlocks",
                "type": "uint256"
            }
        ],
        "name": "setPriceChangeDelay",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_shouldActivate",
                "type": "bool"
            }
        ],
        "name": "activate",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "protocolRecipient",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "protocolTxPriceData",
        "outputs": [
            {
                "components": [
                    {
                        "name": "depositFee",
                        "type": "uint256"
                    },
                    {
                        "name": "withdrawalFee",
                        "type": "uint256"
                    },
                    {
                        "name": "rebalanceFee",
                        "type": "uint256"
                    },
                    {
                        "name": "transferFee",
                        "type": "uint256"
                    },
                    {
                        "name": "swapFee",
                        "type": "uint256"
                    },
                    {
                        "name": "addLiqFee",
                        "type": "uint256"
                    },
                    {
                        "name": "removeLiqFee",
                        "type": "uint256"
                    },
                    {
                        "name": "claimRewardsFee",
                        "type": "uint256"
                    },
                    {
                        "name": "borrowFee",
                        "type": "uint256"
                    },
                    {
                        "name": "repayFee",
                        "type": "uint256"
                    }
                ],
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "protocolSubPriceData",
        "outputs": [
            {
                "components": [
                    {
                        "name": "asset",
                        "type": "address"
                    },
                    {
                        "name": "usdValue",
                        "type": "uint256"
                    },
                    {
                        "name": "trialPeriod",
                        "type": "uint256"
                    },
                    {
                        "name": "payPeriod",
                        "type": "uint256"
                    }
                ],
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "isAgentSubPricingEnabled",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "arg0",
                "type": "address"
            }
        ],
        "name": "agentSubPriceData",
        "outputs": [
            {
                "components": [
                    {
                        "name": "asset",
                        "type": "address"
                    },
                    {
                        "name": "usdValue",
                        "type": "uint256"
                    },
                    {
                        "name": "trialPeriod",
                        "type": "uint256"
                    },
                    {
                        "name": "payPeriod",
                        "type": "uint256"
                    }
                ],
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "arg0",
                "type": "address"
            }
        ],
        "name": "pendingAgentSubPrices",
        "outputs": [
            {
                "components": [
                    {
                        "components": [
                            {
                                "name": "asset",
                                "type": "address"
                            },
                            {
                                "name": "usdValue",
                                "type": "uint256"
                            },
                            {
                                "name": "trialPeriod",
                                "type": "uint256"
                            },
                            {
                                "name": "payPeriod",
                                "type": "uint256"
                            }
                        ],
                        "name": "subInfo",
                        "type": "tuple"
                    },
                    {
                        "name": "effectiveBlock",
                        "type": "uint256"
                    }
                ],
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "priceChangeDelay",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "ADDY_REGISTRY",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "isActivated",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "MIN_TRIAL_PERIOD",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "MAX_TRIAL_PERIOD",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "MIN_PAY_PERIOD",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "MAX_PAY_PERIOD",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "MIN_PRICE_CHANGE_BUFFER",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_minTrialPeriod",
                "type": "uint256"
            },
            {
                "name": "_maxTrialPeriod",
                "type": "uint256"
            },
            {
                "name": "_minPayPeriod",
                "type": "uint256"
            },
            {
                "name": "_maxPayPeriod",
                "type": "uint256"
            },
            {
                "name": "_minPriceChangeBuffer",
                "type": "uint256"
            },
            {
                "name": "_addyRegistry",
                "type": "address"
            }
        ],
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
    }
] as const

export const deployAddress: Address | undefined = undefined

export type Contract = {
  calls: {
    isGovernor: (address: `0x${string}`) => Promise<boolean>
    isValidLocalGovernor: (newGovernor: `0x${string}`) => Promise<boolean>
    localGovernor: () => Promise<`0x${string}`>
    getCombinedSubData: (user: `0x${string}`, agent: `0x${string}`, agentPaidThru: bigint, protocolPaidThru: bigint, oracleRegistry: `0x${string}`) => Promise<[{ recipient: `0x${string}`; asset: `0x${string}`; amount: bigint; usdValue: bigint; paidThroughBlock: bigint; didChange: boolean }, { recipient: `0x${string}`; asset: `0x${string}`; amount: bigint; usdValue: bigint; paidThroughBlock: bigint; didChange: boolean }]>
    getAgentSubPriceData: (agent: `0x${string}`) => Promise<{ asset: `0x${string}`; usdValue: bigint; trialPeriod: bigint; payPeriod: bigint }>
    isValidSubPrice: (asset: `0x${string}`, usdValue: bigint, trialPeriod: bigint, payPeriod: bigint) => Promise<boolean>
    getTransactionFeeData: (user: `0x${string}`, action: bigint) => Promise<[bigint, `0x${string}`]>
    isValidTxPriceSheet: (depositFee: bigint, withdrawalFee: bigint, rebalanceFee: bigint, transferFee: bigint, swapFee: bigint, addLiqFee: bigint, removeLiqFee: bigint, claimRewardsFee: bigint, borrowFee: bigint, repayFee: bigint) => Promise<boolean>
    protocolRecipient: () => Promise<`0x${string}`>
    protocolTxPriceData: () => Promise<{ depositFee: bigint; withdrawalFee: bigint; rebalanceFee: bigint; transferFee: bigint; swapFee: bigint; addLiqFee: bigint; removeLiqFee: bigint; claimRewardsFee: bigint; borrowFee: bigint; repayFee: bigint }>
    protocolSubPriceData: () => Promise<{ asset: `0x${string}`; usdValue: bigint; trialPeriod: bigint; payPeriod: bigint }>
    isAgentSubPricingEnabled: () => Promise<boolean>
    agentSubPriceData: (arg0: `0x${string}`) => Promise<{ asset: `0x${string}`; usdValue: bigint; trialPeriod: bigint; payPeriod: bigint }>
    pendingAgentSubPrices: (arg0: `0x${string}`) => Promise<{ subInfo: { asset: `0x${string}`; usdValue: bigint; trialPeriod: bigint; payPeriod: bigint }; effectiveBlock: bigint }>
    priceChangeDelay: () => Promise<bigint>
    ADDY_REGISTRY: () => Promise<`0x${string}`>
    isActivated: () => Promise<boolean>
    MIN_TRIAL_PERIOD: () => Promise<bigint>
    MAX_TRIAL_PERIOD: () => Promise<bigint>
    MIN_PAY_PERIOD: () => Promise<bigint>
    MAX_PAY_PERIOD: () => Promise<bigint>
    MIN_PRICE_CHANGE_BUFFER: () => Promise<bigint>
  }
  mutations: {
    setLocalGovernor: (newGovernor: `0x${string}`) => Promise<boolean>
    setAgentSubPrice: (agent: `0x${string}`, asset: `0x${string}`, usdValue: bigint, trialPeriod: bigint, payPeriod: bigint) => Promise<boolean>
    finalizePendingAgentSubPrice: (agent: `0x${string}`) => Promise<boolean>
    removeAgentSubPrice: (agent: `0x${string}`) => Promise<boolean>
    setAgentSubPricingEnabled: (isEnabled: boolean) => Promise<boolean>
    setProtocolSubPrice: (asset: `0x${string}`, usdValue: bigint, trialPeriod: bigint, payPeriod: bigint) => Promise<boolean>
    removeProtocolSubPrice: () => Promise<boolean>
    setProtocolTxPriceSheet: (depositFee: bigint, withdrawalFee: bigint, rebalanceFee: bigint, transferFee: bigint, swapFee: bigint, addLiqFee: bigint, removeLiqFee: bigint, claimRewardsFee: bigint, borrowFee: bigint, repayFee: bigint) => Promise<boolean>
    removeProtocolTxPriceSheet: () => Promise<boolean>
    setProtocolRecipient: (recipient: `0x${string}`) => Promise<boolean>
    setPriceChangeDelay: (delayBlocks: bigint) => Promise<boolean>
    activate: (shouldActivate: boolean) => Promise<void>
  }
  events: {
    AgentSubPriceSet: (agent: `0x${string}`, asset: `0x${string}`, usdValue: bigint, trialPeriod: bigint, payPeriod: bigint) => Promise<void>
    PendingAgentSubPriceSet: (agent: `0x${string}`, asset: `0x${string}`, usdValue: bigint, trialPeriod: bigint, payPeriod: bigint, effectiveBlock: bigint) => Promise<void>
    ProtocolSubPriceSet: (asset: `0x${string}`, usdValue: bigint, trialPeriod: bigint, payPeriod: bigint) => Promise<void>
    AgentSubPriceRemoved: (agent: `0x${string}`, asset: `0x${string}`, usdValue: bigint, trialPeriod: bigint, payPeriod: bigint) => Promise<void>
    ProtocolSubPriceRemoved: (asset: `0x${string}`, usdValue: bigint, trialPeriod: bigint, payPeriod: bigint) => Promise<void>
    AgentSubPricingEnabled: (isEnabled: boolean) => Promise<void>
    ProtocolTxPriceSheetSet: (depositFee: bigint, withdrawalFee: bigint, rebalanceFee: bigint, transferFee: bigint, swapFee: bigint, addLiqFee: bigint, removeLiqFee: bigint, claimRewardsFee: bigint, borrowFee: bigint, repayFee: bigint) => Promise<void>
    ProtocolTxPriceSheetRemoved: (depositFee: bigint, withdrawalFee: bigint, rebalanceFee: bigint, transferFee: bigint, swapFee: bigint, addLiqFee: bigint, removeLiqFee: bigint, claimRewardsFee: bigint, borrowFee: bigint, repayFee: bigint) => Promise<void>
    ProtocolRecipientSet: (recipient: `0x${string}`) => Promise<void>
    PriceChangeDelaySet: (delayBlocks: bigint) => Promise<void>
    PriceSheetsActivated: (isActivated: boolean) => Promise<void>
    LocalGovernorSet: (addr: `0x${string}`) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'PriceSheets'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: {
    contractAddress?: Address
    defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
  }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
  | Address
  | {
    contractAddress?: Address
    defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
    },
  ): Request<M> {
    const address =
      typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
    const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

    const call = {
      contractName: 'PriceSheets' as const,
      method,
      args,
      address,
      deployAddress,
      defaultValue,
      getAbi: () => abi,
      with: (options: {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      }) => {
          call.address = options.contractAddress
          call.defaultValue = options.defaultValue
          return call as Request<M>
      },
      defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
        call.defaultValue = defaultValue
        return call as Request<M>
      },
      at: (address: Address) => {
        call.address = address
        return call as Request<M>
      },
    } as Request<M>

    return call
}

type CallType = {
  [K in Calls]: (
    ...args: ExtractArgs<Contract['calls'][K]>
  ) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
		isGovernor: (...args: ExtractArgs<Contract['calls']['isGovernor']>) => getRequest('isGovernor', args),
		isValidLocalGovernor: (...args: ExtractArgs<Contract['calls']['isValidLocalGovernor']>) => getRequest('isValidLocalGovernor', args),
		localGovernor: (...args: ExtractArgs<Contract['calls']['localGovernor']>) => getRequest('localGovernor', args),
		getCombinedSubData: (...args: ExtractArgs<Contract['calls']['getCombinedSubData']>) => getRequest('getCombinedSubData', args),
		getAgentSubPriceData: (...args: ExtractArgs<Contract['calls']['getAgentSubPriceData']>) => getRequest('getAgentSubPriceData', args),
		isValidSubPrice: (...args: ExtractArgs<Contract['calls']['isValidSubPrice']>) => getRequest('isValidSubPrice', args),
		getTransactionFeeData: (...args: ExtractArgs<Contract['calls']['getTransactionFeeData']>) => getRequest('getTransactionFeeData', args),
		isValidTxPriceSheet: (...args: ExtractArgs<Contract['calls']['isValidTxPriceSheet']>) => getRequest('isValidTxPriceSheet', args),
		protocolRecipient: (...args: ExtractArgs<Contract['calls']['protocolRecipient']>) => getRequest('protocolRecipient', args),
		protocolTxPriceData: (...args: ExtractArgs<Contract['calls']['protocolTxPriceData']>) => getRequest('protocolTxPriceData', args),
		protocolSubPriceData: (...args: ExtractArgs<Contract['calls']['protocolSubPriceData']>) => getRequest('protocolSubPriceData', args),
		isAgentSubPricingEnabled: (...args: ExtractArgs<Contract['calls']['isAgentSubPricingEnabled']>) => getRequest('isAgentSubPricingEnabled', args),
		agentSubPriceData: (...args: ExtractArgs<Contract['calls']['agentSubPriceData']>) => getRequest('agentSubPriceData', args),
		pendingAgentSubPrices: (...args: ExtractArgs<Contract['calls']['pendingAgentSubPrices']>) => getRequest('pendingAgentSubPrices', args),
		priceChangeDelay: (...args: ExtractArgs<Contract['calls']['priceChangeDelay']>) => getRequest('priceChangeDelay', args),
		ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) => getRequest('ADDY_REGISTRY', args),
		isActivated: (...args: ExtractArgs<Contract['calls']['isActivated']>) => getRequest('isActivated', args),
		MIN_TRIAL_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_TRIAL_PERIOD']>) => getRequest('MIN_TRIAL_PERIOD', args),
		MAX_TRIAL_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_TRIAL_PERIOD']>) => getRequest('MAX_TRIAL_PERIOD', args),
		MIN_PAY_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_PAY_PERIOD']>) => getRequest('MIN_PAY_PERIOD', args),
		MAX_PAY_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_PAY_PERIOD']>) => getRequest('MAX_PAY_PERIOD', args),
		MIN_PRICE_CHANGE_BUFFER: (...args: ExtractArgs<Contract['calls']['MIN_PRICE_CHANGE_BUFFER']>) => getRequest('MIN_PRICE_CHANGE_BUFFER', args),
}


export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'PriceSheets' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation:  {
  [K in Mutations]: {
    contractName: 'PriceSheets'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
		setLocalGovernor: getMutation('setLocalGovernor'),
		setAgentSubPrice: getMutation('setAgentSubPrice'),
		finalizePendingAgentSubPrice: getMutation('finalizePendingAgentSubPrice'),
		removeAgentSubPrice: getMutation('removeAgentSubPrice'),
		setAgentSubPricingEnabled: getMutation('setAgentSubPricingEnabled'),
		setProtocolSubPrice: getMutation('setProtocolSubPrice'),
		removeProtocolSubPrice: getMutation('removeProtocolSubPrice'),
		setProtocolTxPriceSheet: getMutation('setProtocolTxPriceSheet'),
		removeProtocolTxPriceSheet: getMutation('removeProtocolTxPriceSheet'),
		setProtocolRecipient: getMutation('setProtocolRecipient'),
		setPriceChangeDelay: getMutation('setPriceChangeDelay'),
		activate: getMutation('activate'),
}




export type SDK = {
		isGovernor: (...args: ExtractArgs<Contract['calls']['isGovernor']>) => Promise<CallReturn<'isGovernor'>>
		isValidLocalGovernor: (...args: ExtractArgs<Contract['calls']['isValidLocalGovernor']>) => Promise<CallReturn<'isValidLocalGovernor'>>
		localGovernor: (...args: ExtractArgs<Contract['calls']['localGovernor']>) => Promise<CallReturn<'localGovernor'>>
		getCombinedSubData: (...args: ExtractArgs<Contract['calls']['getCombinedSubData']>) => Promise<CallReturn<'getCombinedSubData'>>
		getAgentSubPriceData: (...args: ExtractArgs<Contract['calls']['getAgentSubPriceData']>) => Promise<CallReturn<'getAgentSubPriceData'>>
		isValidSubPrice: (...args: ExtractArgs<Contract['calls']['isValidSubPrice']>) => Promise<CallReturn<'isValidSubPrice'>>
		getTransactionFeeData: (...args: ExtractArgs<Contract['calls']['getTransactionFeeData']>) => Promise<CallReturn<'getTransactionFeeData'>>
		isValidTxPriceSheet: (...args: ExtractArgs<Contract['calls']['isValidTxPriceSheet']>) => Promise<CallReturn<'isValidTxPriceSheet'>>
		protocolRecipient: (...args: ExtractArgs<Contract['calls']['protocolRecipient']>) => Promise<CallReturn<'protocolRecipient'>>
		protocolTxPriceData: (...args: ExtractArgs<Contract['calls']['protocolTxPriceData']>) => Promise<CallReturn<'protocolTxPriceData'>>
		protocolSubPriceData: (...args: ExtractArgs<Contract['calls']['protocolSubPriceData']>) => Promise<CallReturn<'protocolSubPriceData'>>
		isAgentSubPricingEnabled: (...args: ExtractArgs<Contract['calls']['isAgentSubPricingEnabled']>) => Promise<CallReturn<'isAgentSubPricingEnabled'>>
		agentSubPriceData: (...args: ExtractArgs<Contract['calls']['agentSubPriceData']>) => Promise<CallReturn<'agentSubPriceData'>>
		pendingAgentSubPrices: (...args: ExtractArgs<Contract['calls']['pendingAgentSubPrices']>) => Promise<CallReturn<'pendingAgentSubPrices'>>
		priceChangeDelay: (...args: ExtractArgs<Contract['calls']['priceChangeDelay']>) => Promise<CallReturn<'priceChangeDelay'>>
		ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) => Promise<CallReturn<'ADDY_REGISTRY'>>
		isActivated: (...args: ExtractArgs<Contract['calls']['isActivated']>) => Promise<CallReturn<'isActivated'>>
		MIN_TRIAL_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_TRIAL_PERIOD']>) => Promise<CallReturn<'MIN_TRIAL_PERIOD'>>
		MAX_TRIAL_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_TRIAL_PERIOD']>) => Promise<CallReturn<'MAX_TRIAL_PERIOD'>>
		MIN_PAY_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_PAY_PERIOD']>) => Promise<CallReturn<'MIN_PAY_PERIOD'>>
		MAX_PAY_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_PAY_PERIOD']>) => Promise<CallReturn<'MAX_PAY_PERIOD'>>
		MIN_PRICE_CHANGE_BUFFER: (...args: ExtractArgs<Contract['calls']['MIN_PRICE_CHANGE_BUFFER']>) => Promise<CallReturn<'MIN_PRICE_CHANGE_BUFFER'>>
		setLocalGovernor: (...args: ExtractArgs<Contract['mutations']['setLocalGovernor']>) => Promise<Address>
		setAgentSubPrice: (...args: ExtractArgs<Contract['mutations']['setAgentSubPrice']>) => Promise<Address>
		finalizePendingAgentSubPrice: (...args: ExtractArgs<Contract['mutations']['finalizePendingAgentSubPrice']>) => Promise<Address>
		removeAgentSubPrice: (...args: ExtractArgs<Contract['mutations']['removeAgentSubPrice']>) => Promise<Address>
		setAgentSubPricingEnabled: (...args: ExtractArgs<Contract['mutations']['setAgentSubPricingEnabled']>) => Promise<Address>
		setProtocolSubPrice: (...args: ExtractArgs<Contract['mutations']['setProtocolSubPrice']>) => Promise<Address>
		removeProtocolSubPrice: (...args: ExtractArgs<Contract['mutations']['removeProtocolSubPrice']>) => Promise<Address>
		setProtocolTxPriceSheet: (...args: ExtractArgs<Contract['mutations']['setProtocolTxPriceSheet']>) => Promise<Address>
		removeProtocolTxPriceSheet: (...args: ExtractArgs<Contract['mutations']['removeProtocolTxPriceSheet']>) => Promise<Address>
		setProtocolRecipient: (...args: ExtractArgs<Contract['mutations']['setProtocolRecipient']>) => Promise<Address>
		setPriceChangeDelay: (...args: ExtractArgs<Contract['mutations']['setPriceChangeDelay']>) => Promise<Address>
		activate: (...args: ExtractArgs<Contract['mutations']['activate']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    // Queries
		isGovernor: (...args: ExtractArgs<Contract['calls']['isGovernor']>) => singleQuery(publicClient!, call.isGovernor(...args)) as Promise<CallReturn<'isGovernor'>>,
		isValidLocalGovernor: (...args: ExtractArgs<Contract['calls']['isValidLocalGovernor']>) => singleQuery(publicClient!, call.isValidLocalGovernor(...args)) as Promise<CallReturn<'isValidLocalGovernor'>>,
		localGovernor: (...args: ExtractArgs<Contract['calls']['localGovernor']>) => singleQuery(publicClient!, call.localGovernor(...args)) as Promise<CallReturn<'localGovernor'>>,
		getCombinedSubData: (...args: ExtractArgs<Contract['calls']['getCombinedSubData']>) => singleQuery(publicClient!, call.getCombinedSubData(...args)) as Promise<CallReturn<'getCombinedSubData'>>,
		getAgentSubPriceData: (...args: ExtractArgs<Contract['calls']['getAgentSubPriceData']>) => singleQuery(publicClient!, call.getAgentSubPriceData(...args)) as Promise<CallReturn<'getAgentSubPriceData'>>,
		isValidSubPrice: (...args: ExtractArgs<Contract['calls']['isValidSubPrice']>) => singleQuery(publicClient!, call.isValidSubPrice(...args)) as Promise<CallReturn<'isValidSubPrice'>>,
		getTransactionFeeData: (...args: ExtractArgs<Contract['calls']['getTransactionFeeData']>) => singleQuery(publicClient!, call.getTransactionFeeData(...args)) as Promise<CallReturn<'getTransactionFeeData'>>,
		isValidTxPriceSheet: (...args: ExtractArgs<Contract['calls']['isValidTxPriceSheet']>) => singleQuery(publicClient!, call.isValidTxPriceSheet(...args)) as Promise<CallReturn<'isValidTxPriceSheet'>>,
		protocolRecipient: (...args: ExtractArgs<Contract['calls']['protocolRecipient']>) => singleQuery(publicClient!, call.protocolRecipient(...args)) as Promise<CallReturn<'protocolRecipient'>>,
		protocolTxPriceData: (...args: ExtractArgs<Contract['calls']['protocolTxPriceData']>) => singleQuery(publicClient!, call.protocolTxPriceData(...args)) as Promise<CallReturn<'protocolTxPriceData'>>,
		protocolSubPriceData: (...args: ExtractArgs<Contract['calls']['protocolSubPriceData']>) => singleQuery(publicClient!, call.protocolSubPriceData(...args)) as Promise<CallReturn<'protocolSubPriceData'>>,
		isAgentSubPricingEnabled: (...args: ExtractArgs<Contract['calls']['isAgentSubPricingEnabled']>) => singleQuery(publicClient!, call.isAgentSubPricingEnabled(...args)) as Promise<CallReturn<'isAgentSubPricingEnabled'>>,
		agentSubPriceData: (...args: ExtractArgs<Contract['calls']['agentSubPriceData']>) => singleQuery(publicClient!, call.agentSubPriceData(...args)) as Promise<CallReturn<'agentSubPriceData'>>,
		pendingAgentSubPrices: (...args: ExtractArgs<Contract['calls']['pendingAgentSubPrices']>) => singleQuery(publicClient!, call.pendingAgentSubPrices(...args)) as Promise<CallReturn<'pendingAgentSubPrices'>>,
		priceChangeDelay: (...args: ExtractArgs<Contract['calls']['priceChangeDelay']>) => singleQuery(publicClient!, call.priceChangeDelay(...args)) as Promise<CallReturn<'priceChangeDelay'>>,
		ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) => singleQuery(publicClient!, call.ADDY_REGISTRY(...args)) as Promise<CallReturn<'ADDY_REGISTRY'>>,
		isActivated: (...args: ExtractArgs<Contract['calls']['isActivated']>) => singleQuery(publicClient!, call.isActivated(...args)) as Promise<CallReturn<'isActivated'>>,
		MIN_TRIAL_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_TRIAL_PERIOD']>) => singleQuery(publicClient!, call.MIN_TRIAL_PERIOD(...args)) as Promise<CallReturn<'MIN_TRIAL_PERIOD'>>,
		MAX_TRIAL_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_TRIAL_PERIOD']>) => singleQuery(publicClient!, call.MAX_TRIAL_PERIOD(...args)) as Promise<CallReturn<'MAX_TRIAL_PERIOD'>>,
		MIN_PAY_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_PAY_PERIOD']>) => singleQuery(publicClient!, call.MIN_PAY_PERIOD(...args)) as Promise<CallReturn<'MIN_PAY_PERIOD'>>,
		MAX_PAY_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_PAY_PERIOD']>) => singleQuery(publicClient!, call.MAX_PAY_PERIOD(...args)) as Promise<CallReturn<'MAX_PAY_PERIOD'>>,
		MIN_PRICE_CHANGE_BUFFER: (...args: ExtractArgs<Contract['calls']['MIN_PRICE_CHANGE_BUFFER']>) => singleQuery(publicClient!, call.MIN_PRICE_CHANGE_BUFFER(...args)) as Promise<CallReturn<'MIN_PRICE_CHANGE_BUFFER'>>,
    
    // Mutations
		setLocalGovernor: (...args: ExtractArgs<Contract['mutations']['setLocalGovernor']>) => mutate(walletClient!, mutation.setLocalGovernor)(...args),
		setAgentSubPrice: (...args: ExtractArgs<Contract['mutations']['setAgentSubPrice']>) => mutate(walletClient!, mutation.setAgentSubPrice)(...args),
		finalizePendingAgentSubPrice: (...args: ExtractArgs<Contract['mutations']['finalizePendingAgentSubPrice']>) => mutate(walletClient!, mutation.finalizePendingAgentSubPrice)(...args),
		removeAgentSubPrice: (...args: ExtractArgs<Contract['mutations']['removeAgentSubPrice']>) => mutate(walletClient!, mutation.removeAgentSubPrice)(...args),
		setAgentSubPricingEnabled: (...args: ExtractArgs<Contract['mutations']['setAgentSubPricingEnabled']>) => mutate(walletClient!, mutation.setAgentSubPricingEnabled)(...args),
		setProtocolSubPrice: (...args: ExtractArgs<Contract['mutations']['setProtocolSubPrice']>) => mutate(walletClient!, mutation.setProtocolSubPrice)(...args),
		removeProtocolSubPrice: (...args: ExtractArgs<Contract['mutations']['removeProtocolSubPrice']>) => mutate(walletClient!, mutation.removeProtocolSubPrice)(...args),
		setProtocolTxPriceSheet: (...args: ExtractArgs<Contract['mutations']['setProtocolTxPriceSheet']>) => mutate(walletClient!, mutation.setProtocolTxPriceSheet)(...args),
		removeProtocolTxPriceSheet: (...args: ExtractArgs<Contract['mutations']['removeProtocolTxPriceSheet']>) => mutate(walletClient!, mutation.removeProtocolTxPriceSheet)(...args),
		setProtocolRecipient: (...args: ExtractArgs<Contract['mutations']['setProtocolRecipient']>) => mutate(walletClient!, mutation.setProtocolRecipient)(...args),
		setPriceChangeDelay: (...args: ExtractArgs<Contract['mutations']['setPriceChangeDelay']>) => mutate(walletClient!, mutation.setPriceChangeDelay)(...args),
		activate: (...args: ExtractArgs<Contract['mutations']['activate']>) => mutate(walletClient!, mutation.activate)(...args),
  }
}

