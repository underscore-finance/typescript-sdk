/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'PendingRedemptionBufferChange',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'buffer',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'RedemptionBufferSet',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'buffer',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingMinYieldWithdrawAmountChange',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'MinYieldWithdrawAmountSet',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingSnapShotPriceConfigChange',
    inputs: [
      {
        name: 'legoId',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'minSnapshotDelay',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxNumSnapshots',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxUpsideDeviation',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'staleTime',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'SnapShotPriceConfigSet',
    inputs: [
      {
        name: 'legoId',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'legoAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'minSnapshotDelay',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxNumSnapshots',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxUpsideDeviation',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'staleTime',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingApprovedVaultTokenChange',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'vaultToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'isApproved',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ApprovedVaultTokenSet',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'vaultToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'isApproved',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingPerformanceFeeChange',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'performanceFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PerformanceFeeSet',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'performanceFee',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingDefaultTargetVaultTokenChange',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'targetVaultToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DefaultTargetVaultTokenSet',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'targetVaultToken',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingMaxDepositAmountChange',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxDepositAmount',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'MaxDepositAmountSet',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxDepositAmount',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'CanDepositSet',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'canDeposit',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'caller',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'CanWithdrawSet',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'canWithdraw',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'caller',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'VaultOpsFrozenSet',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'isFrozen',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'caller',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ShouldAutoDepositSet',
    inputs: [
      {
        name: 'vaultAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'shouldAutoDeposit',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'caller',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeTimeLockModified',
    inputs: [
      {
        name: 'prevTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newTimeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ExpirationSet',
    inputs: [
      {
        name: 'expiration',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ActionTimeLockSet',
    inputs: [
      {
        name: 'newTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'prevTimeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeStarted',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeConfirmed',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeCancelled',
    inputs: [
      {
        name: 'cancelledGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovRelinquished',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'UndyHqSetupFinished',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'timeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddys',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'hq',
            type: 'address',
          },
          {
            name: 'undyToken',
            type: 'address',
          },
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'switchboard',
            type: 'address',
          },
          {
            name: 'hatchery',
            type: 'address',
          },
          {
            name: 'lootDistributor',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
          {
            name: 'walletBackpack',
            type: 'address',
          },
          {
            name: 'billing',
            type: 'address',
          },
          {
            name: 'vaultRegistry',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHq',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHqFromGov',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canGovern',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getGovernors',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasPendingGovChange',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'startGovernanceChange',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmGovernanceChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelGovernanceChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'relinquishGov',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setGovTimeLock',
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidGovTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'minGovChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxGovChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'finishUndyHqSetup',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'finishUndyHqSetup',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
      {
        name: '_timeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'governance',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingGov',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'newGov',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'numGovChanges',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'govChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canConfirmAction',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isExpired',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasPendingAction',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getActionConfirmationBlock',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidActionTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'minActionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxActionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setExpiration',
    inputs: [
      {
        name: '_expiration',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLockAfterSetup',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLockAfterSetup',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingActions',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'actionId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'actionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'expiration',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setCanDeposit',
    inputs: [
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_canDeposit',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setCanWithdraw',
    inputs: [
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_canWithdraw',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setVaultOpsFrozen',
    inputs: [
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_isFrozen',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setShouldAutoDeposit',
    inputs: [
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_shouldAutoDeposit',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setRedemptionBuffer',
    inputs: [
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_buffer',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setMinYieldWithdrawAmount',
    inputs: [
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setSnapShotPriceConfig',
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_minSnapshotDelay',
        type: 'uint256',
      },
      {
        name: '_maxNumSnapshots',
        type: 'uint256',
      },
      {
        name: '_maxUpsideDeviation',
        type: 'uint256',
      },
      {
        name: '_staleTime',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setApprovedVaultToken',
    inputs: [
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_isApproved',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setPerformanceFee',
    inputs: [
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_performanceFee',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setDefaultTargetVaultToken',
    inputs: [
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_targetVaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setMaxDepositAmount',
    inputs: [
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_maxDepositAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'executePendingAction',
    inputs: [
      {
        name: '_aid',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelPendingAction',
    inputs: [
      {
        name: '_aid',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'actionType',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingRedemptionBuffer',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'vaultAddr',
            type: 'address',
          },
          {
            name: 'buffer',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingMinYieldWithdrawAmount',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'vaultAddr',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingSnapShotPriceConfig',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'config',
            type: 'tuple',
            components: [
              {
                name: 'minSnapshotDelay',
                type: 'uint256',
              },
              {
                name: 'maxNumSnapshots',
                type: 'uint256',
              },
              {
                name: 'maxUpsideDeviation',
                type: 'uint256',
              },
              {
                name: 'staleTime',
                type: 'uint256',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingApprovedVaultToken',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'vaultAddr',
            type: 'address',
          },
          {
            name: 'vaultToken',
            type: 'address',
          },
          {
            name: 'isApproved',
            type: 'bool',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingPerformanceFee',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'vaultAddr',
            type: 'address',
          },
          {
            name: 'performanceFee',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingDefaultTargetVaultToken',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'vaultAddr',
            type: 'address',
          },
          {
            name: 'targetVaultToken',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingMaxDepositAmount',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'vaultAddr',
            type: 'address',
          },
          {
            name: 'maxDepositAmount',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_tempGov',
        type: 'address',
      },
      {
        name: '_minConfigTimeLock',
        type: 'uint256',
      },
      {
        name: '_maxConfigTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0x2258662cA2AF19846b9e62A74b803009f5770417'

export type Contract = {
  calls: {
    getAddys: () => Promise<{
      hq: `0x${string}`
      undyToken: `0x${string}`
      ledger: `0x${string}`
      missionControl: `0x${string}`
      legoBook: `0x${string}`
      switchboard: `0x${string}`
      hatchery: `0x${string}`
      lootDistributor: `0x${string}`
      appraiser: `0x${string}`
      walletBackpack: `0x${string}`
      billing: `0x${string}`
      vaultRegistry: `0x${string}`
    }>
    getUndyHq: () => Promise<`0x${string}`>
    getUndyHqFromGov: () => Promise<`0x${string}`>
    canGovern: (addr: `0x${string}`) => Promise<boolean>
    getGovernors: () => Promise<`0x${string}`[]>
    hasPendingGovChange: () => Promise<boolean>
    isValidGovTimeLock: (newTimeLock: bigint) => Promise<boolean>
    minGovChangeTimeLock: () => Promise<bigint>
    maxGovChangeTimeLock: () => Promise<bigint>
    governance: () => Promise<`0x${string}`>
    pendingGov: () => Promise<{ newGov: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    numGovChanges: () => Promise<bigint>
    govChangeTimeLock: () => Promise<bigint>
    canConfirmAction: (actionId: bigint) => Promise<boolean>
    isExpired: (actionId: bigint) => Promise<boolean>
    hasPendingAction: (actionId: bigint) => Promise<boolean>
    getActionConfirmationBlock: (actionId: bigint) => Promise<bigint>
    isValidActionTimeLock: (newTimeLock: bigint) => Promise<boolean>
    minActionTimeLock: () => Promise<bigint>
    maxActionTimeLock: () => Promise<bigint>
    pendingActions: (arg0: bigint) => Promise<{ initiatedBlock: bigint; confirmBlock: bigint; expiration: bigint }>
    actionId: () => Promise<bigint>
    actionTimeLock: () => Promise<bigint>
    expiration: () => Promise<bigint>
    actionType: (arg0: bigint) => Promise<bigint>
    pendingRedemptionBuffer: (arg0: bigint) => Promise<{ vaultAddr: `0x${string}`; buffer: bigint }>
    pendingMinYieldWithdrawAmount: (arg0: bigint) => Promise<{ vaultAddr: `0x${string}`; amount: bigint }>
    pendingSnapShotPriceConfig: (
      arg0: bigint,
    ) => Promise<{
      legoId: bigint
      config: { minSnapshotDelay: bigint; maxNumSnapshots: bigint; maxUpsideDeviation: bigint; staleTime: bigint }
    }>
    pendingApprovedVaultToken: (
      arg0: bigint,
    ) => Promise<{ vaultAddr: `0x${string}`; vaultToken: `0x${string}`; isApproved: boolean }>
    pendingPerformanceFee: (arg0: bigint) => Promise<{ vaultAddr: `0x${string}`; performanceFee: bigint }>
    pendingDefaultTargetVaultToken: (
      arg0: bigint,
    ) => Promise<{ vaultAddr: `0x${string}`; targetVaultToken: `0x${string}` }>
    pendingMaxDepositAmount: (arg0: bigint) => Promise<{ vaultAddr: `0x${string}`; maxDepositAmount: bigint }>
  }
  mutations: {
    startGovernanceChange: (newGov: `0x${string}`) => Promise<void>
    confirmGovernanceChange: () => Promise<void>
    cancelGovernanceChange: () => Promise<void>
    relinquishGov: () => Promise<void>
    setGovTimeLock: (numBlocks: bigint) => Promise<boolean>
    finishUndyHqSetup: (newGov: `0x${string}`, timeLock?: bigint) => Promise<boolean>
    setActionTimeLock: (newTimeLock: bigint) => Promise<boolean>
    setExpiration: (expiration: bigint) => Promise<boolean>
    setActionTimeLockAfterSetup: (newTimeLock?: bigint) => Promise<boolean>
    setCanDeposit: (vaultAddr: `0x${string}`, canDeposit: boolean) => Promise<void>
    setCanWithdraw: (vaultAddr: `0x${string}`, canWithdraw: boolean) => Promise<void>
    setVaultOpsFrozen: (vaultAddr: `0x${string}`, isFrozen: boolean) => Promise<void>
    setShouldAutoDeposit: (vaultAddr: `0x${string}`, shouldAutoDeposit: boolean) => Promise<void>
    setRedemptionBuffer: (vaultAddr: `0x${string}`, buffer: bigint) => Promise<bigint>
    setMinYieldWithdrawAmount: (vaultAddr: `0x${string}`, amount: bigint) => Promise<bigint>
    setSnapShotPriceConfig: (
      legoId: bigint,
      minSnapshotDelay: bigint,
      maxNumSnapshots: bigint,
      maxUpsideDeviation: bigint,
      staleTime: bigint,
    ) => Promise<bigint>
    setApprovedVaultToken: (vaultAddr: `0x${string}`, vaultToken: `0x${string}`, isApproved: boolean) => Promise<bigint>
    setPerformanceFee: (vaultAddr: `0x${string}`, performanceFee: bigint) => Promise<bigint>
    setDefaultTargetVaultToken: (vaultAddr: `0x${string}`, targetVaultToken: `0x${string}`) => Promise<bigint>
    setMaxDepositAmount: (vaultAddr: `0x${string}`, maxDepositAmount: bigint) => Promise<bigint>
    executePendingAction: (aid: bigint) => Promise<boolean>
    cancelPendingAction: (aid: bigint) => Promise<boolean>
  }
  events: {
    PendingRedemptionBufferChange: (
      vaultAddr: `0x${string}`,
      buffer: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    RedemptionBufferSet: (vaultAddr: `0x${string}`, buffer: bigint) => Promise<void>
    PendingMinYieldWithdrawAmountChange: (
      vaultAddr: `0x${string}`,
      amount: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    MinYieldWithdrawAmountSet: (vaultAddr: `0x${string}`, amount: bigint) => Promise<void>
    PendingSnapShotPriceConfigChange: (
      legoId: bigint,
      minSnapshotDelay: bigint,
      maxNumSnapshots: bigint,
      maxUpsideDeviation: bigint,
      staleTime: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    SnapShotPriceConfigSet: (
      legoId: bigint,
      legoAddr: `0x${string}`,
      minSnapshotDelay: bigint,
      maxNumSnapshots: bigint,
      maxUpsideDeviation: bigint,
      staleTime: bigint,
    ) => Promise<void>
    PendingApprovedVaultTokenChange: (
      vaultAddr: `0x${string}`,
      vaultToken: `0x${string}`,
      isApproved: boolean,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    ApprovedVaultTokenSet: (vaultAddr: `0x${string}`, vaultToken: `0x${string}`, isApproved: boolean) => Promise<void>
    PendingPerformanceFeeChange: (
      vaultAddr: `0x${string}`,
      performanceFee: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    PerformanceFeeSet: (vaultAddr: `0x${string}`, performanceFee: bigint) => Promise<void>
    PendingDefaultTargetVaultTokenChange: (
      vaultAddr: `0x${string}`,
      targetVaultToken: `0x${string}`,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    DefaultTargetVaultTokenSet: (vaultAddr: `0x${string}`, targetVaultToken: `0x${string}`) => Promise<void>
    PendingMaxDepositAmountChange: (
      vaultAddr: `0x${string}`,
      maxDepositAmount: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    MaxDepositAmountSet: (vaultAddr: `0x${string}`, maxDepositAmount: bigint) => Promise<void>
    CanDepositSet: (vaultAddr: `0x${string}`, canDeposit: boolean, caller: `0x${string}`) => Promise<void>
    CanWithdrawSet: (vaultAddr: `0x${string}`, canWithdraw: boolean, caller: `0x${string}`) => Promise<void>
    VaultOpsFrozenSet: (vaultAddr: `0x${string}`, isFrozen: boolean, caller: `0x${string}`) => Promise<void>
    ShouldAutoDepositSet: (vaultAddr: `0x${string}`, shouldAutoDeposit: boolean, caller: `0x${string}`) => Promise<void>
    GovChangeTimeLockModified: (prevTimeLock: bigint, newTimeLock: bigint) => Promise<void>
    ExpirationSet: (expiration: bigint) => Promise<void>
    ActionTimeLockSet: (newTimeLock: bigint, prevTimeLock: bigint) => Promise<void>
    GovChangeStarted: (prevGov: `0x${string}`, newGov: `0x${string}`, confirmBlock: bigint) => Promise<void>
    GovChangeConfirmed: (
      prevGov: `0x${string}`,
      newGov: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    GovChangeCancelled: (cancelledGov: `0x${string}`, initiatedBlock: bigint, confirmBlock: bigint) => Promise<void>
    GovRelinquished: (prevGov: `0x${string}`) => Promise<void>
    UndyHqSetupFinished: (prevGov: `0x${string}`, newGov: `0x${string}`, timeLock: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'SwitchboardCharlie'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'SwitchboardCharlie' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => getRequest('getAddys', args),
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => getRequest('getUndyHq', args),
  getUndyHqFromGov: (...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>) =>
    getRequest('getUndyHqFromGov', args),
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => getRequest('canGovern', args),
  getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) => getRequest('getGovernors', args),
  hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
    getRequest('hasPendingGovChange', args),
  isValidGovTimeLock: (...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>) =>
    getRequest('isValidGovTimeLock', args),
  minGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>) =>
    getRequest('minGovChangeTimeLock', args),
  maxGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>) =>
    getRequest('maxGovChangeTimeLock', args),
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => getRequest('governance', args),
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => getRequest('pendingGov', args),
  numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) => getRequest('numGovChanges', args),
  govChangeTimeLock: (...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>) =>
    getRequest('govChangeTimeLock', args),
  canConfirmAction: (...args: ExtractArgs<Contract['calls']['canConfirmAction']>) =>
    getRequest('canConfirmAction', args),
  isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) => getRequest('isExpired', args),
  hasPendingAction: (...args: ExtractArgs<Contract['calls']['hasPendingAction']>) =>
    getRequest('hasPendingAction', args),
  getActionConfirmationBlock: (...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>) =>
    getRequest('getActionConfirmationBlock', args),
  isValidActionTimeLock: (...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>) =>
    getRequest('isValidActionTimeLock', args),
  minActionTimeLock: (...args: ExtractArgs<Contract['calls']['minActionTimeLock']>) =>
    getRequest('minActionTimeLock', args),
  maxActionTimeLock: (...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>) =>
    getRequest('maxActionTimeLock', args),
  pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) => getRequest('pendingActions', args),
  actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) => getRequest('actionId', args),
  actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) => getRequest('actionTimeLock', args),
  expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) => getRequest('expiration', args),
  actionType: (...args: ExtractArgs<Contract['calls']['actionType']>) => getRequest('actionType', args),
  pendingRedemptionBuffer: (...args: ExtractArgs<Contract['calls']['pendingRedemptionBuffer']>) =>
    getRequest('pendingRedemptionBuffer', args),
  pendingMinYieldWithdrawAmount: (...args: ExtractArgs<Contract['calls']['pendingMinYieldWithdrawAmount']>) =>
    getRequest('pendingMinYieldWithdrawAmount', args),
  pendingSnapShotPriceConfig: (...args: ExtractArgs<Contract['calls']['pendingSnapShotPriceConfig']>) =>
    getRequest('pendingSnapShotPriceConfig', args),
  pendingApprovedVaultToken: (...args: ExtractArgs<Contract['calls']['pendingApprovedVaultToken']>) =>
    getRequest('pendingApprovedVaultToken', args),
  pendingPerformanceFee: (...args: ExtractArgs<Contract['calls']['pendingPerformanceFee']>) =>
    getRequest('pendingPerformanceFee', args),
  pendingDefaultTargetVaultToken: (...args: ExtractArgs<Contract['calls']['pendingDefaultTargetVaultToken']>) =>
    getRequest('pendingDefaultTargetVaultToken', args),
  pendingMaxDepositAmount: (...args: ExtractArgs<Contract['calls']['pendingMaxDepositAmount']>) =>
    getRequest('pendingMaxDepositAmount', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'SwitchboardCharlie' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'SwitchboardCharlie'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  startGovernanceChange: getMutation('startGovernanceChange'),
  confirmGovernanceChange: getMutation('confirmGovernanceChange'),
  cancelGovernanceChange: getMutation('cancelGovernanceChange'),
  relinquishGov: getMutation('relinquishGov'),
  setGovTimeLock: getMutation('setGovTimeLock'),
  finishUndyHqSetup: getMutation('finishUndyHqSetup'),
  setActionTimeLock: getMutation('setActionTimeLock'),
  setExpiration: getMutation('setExpiration'),
  setActionTimeLockAfterSetup: getMutation('setActionTimeLockAfterSetup'),
  setCanDeposit: getMutation('setCanDeposit'),
  setCanWithdraw: getMutation('setCanWithdraw'),
  setVaultOpsFrozen: getMutation('setVaultOpsFrozen'),
  setShouldAutoDeposit: getMutation('setShouldAutoDeposit'),
  setRedemptionBuffer: getMutation('setRedemptionBuffer'),
  setMinYieldWithdrawAmount: getMutation('setMinYieldWithdrawAmount'),
  setSnapShotPriceConfig: getMutation('setSnapShotPriceConfig'),
  setApprovedVaultToken: getMutation('setApprovedVaultToken'),
  setPerformanceFee: getMutation('setPerformanceFee'),
  setDefaultTargetVaultToken: getMutation('setDefaultTargetVaultToken'),
  setMaxDepositAmount: getMutation('setMaxDepositAmount'),
  executePendingAction: getMutation('executePendingAction'),
  cancelPendingAction: getMutation('cancelPendingAction'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => Promise<CallReturn<'getAddys'>>
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => Promise<CallReturn<'getUndyHq'>>
  getUndyHqFromGov: (
    ...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>
  ) => Promise<CallReturn<'getUndyHqFromGov'>>
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => Promise<CallReturn<'canGovern'>>
  getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) => Promise<CallReturn<'getGovernors'>>
  hasPendingGovChange: (
    ...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>
  ) => Promise<CallReturn<'hasPendingGovChange'>>
  isValidGovTimeLock: (
    ...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>
  ) => Promise<CallReturn<'isValidGovTimeLock'>>
  minGovChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>
  ) => Promise<CallReturn<'minGovChangeTimeLock'>>
  maxGovChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>
  ) => Promise<CallReturn<'maxGovChangeTimeLock'>>
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => Promise<CallReturn<'governance'>>
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => Promise<CallReturn<'pendingGov'>>
  numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) => Promise<CallReturn<'numGovChanges'>>
  govChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>
  ) => Promise<CallReturn<'govChangeTimeLock'>>
  canConfirmAction: (
    ...args: ExtractArgs<Contract['calls']['canConfirmAction']>
  ) => Promise<CallReturn<'canConfirmAction'>>
  isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) => Promise<CallReturn<'isExpired'>>
  hasPendingAction: (
    ...args: ExtractArgs<Contract['calls']['hasPendingAction']>
  ) => Promise<CallReturn<'hasPendingAction'>>
  getActionConfirmationBlock: (
    ...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>
  ) => Promise<CallReturn<'getActionConfirmationBlock'>>
  isValidActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>
  ) => Promise<CallReturn<'isValidActionTimeLock'>>
  minActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['minActionTimeLock']>
  ) => Promise<CallReturn<'minActionTimeLock'>>
  maxActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>
  ) => Promise<CallReturn<'maxActionTimeLock'>>
  pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) => Promise<CallReturn<'pendingActions'>>
  actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) => Promise<CallReturn<'actionId'>>
  actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) => Promise<CallReturn<'actionTimeLock'>>
  expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) => Promise<CallReturn<'expiration'>>
  actionType: (...args: ExtractArgs<Contract['calls']['actionType']>) => Promise<CallReturn<'actionType'>>
  pendingRedemptionBuffer: (
    ...args: ExtractArgs<Contract['calls']['pendingRedemptionBuffer']>
  ) => Promise<CallReturn<'pendingRedemptionBuffer'>>
  pendingMinYieldWithdrawAmount: (
    ...args: ExtractArgs<Contract['calls']['pendingMinYieldWithdrawAmount']>
  ) => Promise<CallReturn<'pendingMinYieldWithdrawAmount'>>
  pendingSnapShotPriceConfig: (
    ...args: ExtractArgs<Contract['calls']['pendingSnapShotPriceConfig']>
  ) => Promise<CallReturn<'pendingSnapShotPriceConfig'>>
  pendingApprovedVaultToken: (
    ...args: ExtractArgs<Contract['calls']['pendingApprovedVaultToken']>
  ) => Promise<CallReturn<'pendingApprovedVaultToken'>>
  pendingPerformanceFee: (
    ...args: ExtractArgs<Contract['calls']['pendingPerformanceFee']>
  ) => Promise<CallReturn<'pendingPerformanceFee'>>
  pendingDefaultTargetVaultToken: (
    ...args: ExtractArgs<Contract['calls']['pendingDefaultTargetVaultToken']>
  ) => Promise<CallReturn<'pendingDefaultTargetVaultToken'>>
  pendingMaxDepositAmount: (
    ...args: ExtractArgs<Contract['calls']['pendingMaxDepositAmount']>
  ) => Promise<CallReturn<'pendingMaxDepositAmount'>>
  startGovernanceChange: (...args: ExtractArgs<Contract['mutations']['startGovernanceChange']>) => Promise<Address>
  confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) => Promise<Address>
  cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) => Promise<Address>
  relinquishGov: (...args: ExtractArgs<Contract['mutations']['relinquishGov']>) => Promise<Address>
  setGovTimeLock: (...args: ExtractArgs<Contract['mutations']['setGovTimeLock']>) => Promise<Address>
  finishUndyHqSetup: (...args: ExtractArgs<Contract['mutations']['finishUndyHqSetup']>) => Promise<Address>
  setActionTimeLock: (...args: ExtractArgs<Contract['mutations']['setActionTimeLock']>) => Promise<Address>
  setExpiration: (...args: ExtractArgs<Contract['mutations']['setExpiration']>) => Promise<Address>
  setActionTimeLockAfterSetup: (
    ...args: ExtractArgs<Contract['mutations']['setActionTimeLockAfterSetup']>
  ) => Promise<Address>
  setCanDeposit: (...args: ExtractArgs<Contract['mutations']['setCanDeposit']>) => Promise<Address>
  setCanWithdraw: (...args: ExtractArgs<Contract['mutations']['setCanWithdraw']>) => Promise<Address>
  setVaultOpsFrozen: (...args: ExtractArgs<Contract['mutations']['setVaultOpsFrozen']>) => Promise<Address>
  setShouldAutoDeposit: (...args: ExtractArgs<Contract['mutations']['setShouldAutoDeposit']>) => Promise<Address>
  setRedemptionBuffer: (...args: ExtractArgs<Contract['mutations']['setRedemptionBuffer']>) => Promise<Address>
  setMinYieldWithdrawAmount: (
    ...args: ExtractArgs<Contract['mutations']['setMinYieldWithdrawAmount']>
  ) => Promise<Address>
  setSnapShotPriceConfig: (...args: ExtractArgs<Contract['mutations']['setSnapShotPriceConfig']>) => Promise<Address>
  setApprovedVaultToken: (...args: ExtractArgs<Contract['mutations']['setApprovedVaultToken']>) => Promise<Address>
  setPerformanceFee: (...args: ExtractArgs<Contract['mutations']['setPerformanceFee']>) => Promise<Address>
  setDefaultTargetVaultToken: (
    ...args: ExtractArgs<Contract['mutations']['setDefaultTargetVaultToken']>
  ) => Promise<Address>
  setMaxDepositAmount: (...args: ExtractArgs<Contract['mutations']['setMaxDepositAmount']>) => Promise<Address>
  executePendingAction: (...args: ExtractArgs<Contract['mutations']['executePendingAction']>) => Promise<Address>
  cancelPendingAction: (...args: ExtractArgs<Contract['mutations']['cancelPendingAction']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) =>
      singleQuery(publicClient!, call.getAddys(...args)) as Promise<CallReturn<'getAddys'>>,
    getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) =>
      singleQuery(publicClient!, call.getUndyHq(...args)) as Promise<CallReturn<'getUndyHq'>>,
    getUndyHqFromGov: (...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>) =>
      singleQuery(publicClient!, call.getUndyHqFromGov(...args)) as Promise<CallReturn<'getUndyHqFromGov'>>,
    canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) =>
      singleQuery(publicClient!, call.canGovern(...args)) as Promise<CallReturn<'canGovern'>>,
    getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) =>
      singleQuery(publicClient!, call.getGovernors(...args)) as Promise<CallReturn<'getGovernors'>>,
    hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
      singleQuery(publicClient!, call.hasPendingGovChange(...args)) as Promise<CallReturn<'hasPendingGovChange'>>,
    isValidGovTimeLock: (...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>) =>
      singleQuery(publicClient!, call.isValidGovTimeLock(...args)) as Promise<CallReturn<'isValidGovTimeLock'>>,
    minGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>) =>
      singleQuery(publicClient!, call.minGovChangeTimeLock(...args)) as Promise<CallReturn<'minGovChangeTimeLock'>>,
    maxGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>) =>
      singleQuery(publicClient!, call.maxGovChangeTimeLock(...args)) as Promise<CallReturn<'maxGovChangeTimeLock'>>,
    governance: (...args: ExtractArgs<Contract['calls']['governance']>) =>
      singleQuery(publicClient!, call.governance(...args)) as Promise<CallReturn<'governance'>>,
    pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) =>
      singleQuery(publicClient!, call.pendingGov(...args)) as Promise<CallReturn<'pendingGov'>>,
    numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) =>
      singleQuery(publicClient!, call.numGovChanges(...args)) as Promise<CallReturn<'numGovChanges'>>,
    govChangeTimeLock: (...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>) =>
      singleQuery(publicClient!, call.govChangeTimeLock(...args)) as Promise<CallReturn<'govChangeTimeLock'>>,
    canConfirmAction: (...args: ExtractArgs<Contract['calls']['canConfirmAction']>) =>
      singleQuery(publicClient!, call.canConfirmAction(...args)) as Promise<CallReturn<'canConfirmAction'>>,
    isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) =>
      singleQuery(publicClient!, call.isExpired(...args)) as Promise<CallReturn<'isExpired'>>,
    hasPendingAction: (...args: ExtractArgs<Contract['calls']['hasPendingAction']>) =>
      singleQuery(publicClient!, call.hasPendingAction(...args)) as Promise<CallReturn<'hasPendingAction'>>,
    getActionConfirmationBlock: (...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>) =>
      singleQuery(publicClient!, call.getActionConfirmationBlock(...args)) as Promise<
        CallReturn<'getActionConfirmationBlock'>
      >,
    isValidActionTimeLock: (...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>) =>
      singleQuery(publicClient!, call.isValidActionTimeLock(...args)) as Promise<CallReturn<'isValidActionTimeLock'>>,
    minActionTimeLock: (...args: ExtractArgs<Contract['calls']['minActionTimeLock']>) =>
      singleQuery(publicClient!, call.minActionTimeLock(...args)) as Promise<CallReturn<'minActionTimeLock'>>,
    maxActionTimeLock: (...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>) =>
      singleQuery(publicClient!, call.maxActionTimeLock(...args)) as Promise<CallReturn<'maxActionTimeLock'>>,
    pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) =>
      singleQuery(publicClient!, call.pendingActions(...args)) as Promise<CallReturn<'pendingActions'>>,
    actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) =>
      singleQuery(publicClient!, call.actionId(...args)) as Promise<CallReturn<'actionId'>>,
    actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) =>
      singleQuery(publicClient!, call.actionTimeLock(...args)) as Promise<CallReturn<'actionTimeLock'>>,
    expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) =>
      singleQuery(publicClient!, call.expiration(...args)) as Promise<CallReturn<'expiration'>>,
    actionType: (...args: ExtractArgs<Contract['calls']['actionType']>) =>
      singleQuery(publicClient!, call.actionType(...args)) as Promise<CallReturn<'actionType'>>,
    pendingRedemptionBuffer: (...args: ExtractArgs<Contract['calls']['pendingRedemptionBuffer']>) =>
      singleQuery(publicClient!, call.pendingRedemptionBuffer(...args)) as Promise<
        CallReturn<'pendingRedemptionBuffer'>
      >,
    pendingMinYieldWithdrawAmount: (...args: ExtractArgs<Contract['calls']['pendingMinYieldWithdrawAmount']>) =>
      singleQuery(publicClient!, call.pendingMinYieldWithdrawAmount(...args)) as Promise<
        CallReturn<'pendingMinYieldWithdrawAmount'>
      >,
    pendingSnapShotPriceConfig: (...args: ExtractArgs<Contract['calls']['pendingSnapShotPriceConfig']>) =>
      singleQuery(publicClient!, call.pendingSnapShotPriceConfig(...args)) as Promise<
        CallReturn<'pendingSnapShotPriceConfig'>
      >,
    pendingApprovedVaultToken: (...args: ExtractArgs<Contract['calls']['pendingApprovedVaultToken']>) =>
      singleQuery(publicClient!, call.pendingApprovedVaultToken(...args)) as Promise<
        CallReturn<'pendingApprovedVaultToken'>
      >,
    pendingPerformanceFee: (...args: ExtractArgs<Contract['calls']['pendingPerformanceFee']>) =>
      singleQuery(publicClient!, call.pendingPerformanceFee(...args)) as Promise<CallReturn<'pendingPerformanceFee'>>,
    pendingDefaultTargetVaultToken: (...args: ExtractArgs<Contract['calls']['pendingDefaultTargetVaultToken']>) =>
      singleQuery(publicClient!, call.pendingDefaultTargetVaultToken(...args)) as Promise<
        CallReturn<'pendingDefaultTargetVaultToken'>
      >,
    pendingMaxDepositAmount: (...args: ExtractArgs<Contract['calls']['pendingMaxDepositAmount']>) =>
      singleQuery(publicClient!, call.pendingMaxDepositAmount(...args)) as Promise<
        CallReturn<'pendingMaxDepositAmount'>
      >,

    // Mutations
    startGovernanceChange: (...args: ExtractArgs<Contract['mutations']['startGovernanceChange']>) =>
      mutate(walletClient!, mutation.startGovernanceChange)(...args),
    confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) =>
      mutate(walletClient!, mutation.confirmGovernanceChange)(...args),
    cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) =>
      mutate(walletClient!, mutation.cancelGovernanceChange)(...args),
    relinquishGov: (...args: ExtractArgs<Contract['mutations']['relinquishGov']>) =>
      mutate(walletClient!, mutation.relinquishGov)(...args),
    setGovTimeLock: (...args: ExtractArgs<Contract['mutations']['setGovTimeLock']>) =>
      mutate(walletClient!, mutation.setGovTimeLock)(...args),
    finishUndyHqSetup: (...args: ExtractArgs<Contract['mutations']['finishUndyHqSetup']>) =>
      mutate(walletClient!, mutation.finishUndyHqSetup)(...args),
    setActionTimeLock: (...args: ExtractArgs<Contract['mutations']['setActionTimeLock']>) =>
      mutate(walletClient!, mutation.setActionTimeLock)(...args),
    setExpiration: (...args: ExtractArgs<Contract['mutations']['setExpiration']>) =>
      mutate(walletClient!, mutation.setExpiration)(...args),
    setActionTimeLockAfterSetup: (...args: ExtractArgs<Contract['mutations']['setActionTimeLockAfterSetup']>) =>
      mutate(walletClient!, mutation.setActionTimeLockAfterSetup)(...args),
    setCanDeposit: (...args: ExtractArgs<Contract['mutations']['setCanDeposit']>) =>
      mutate(walletClient!, mutation.setCanDeposit)(...args),
    setCanWithdraw: (...args: ExtractArgs<Contract['mutations']['setCanWithdraw']>) =>
      mutate(walletClient!, mutation.setCanWithdraw)(...args),
    setVaultOpsFrozen: (...args: ExtractArgs<Contract['mutations']['setVaultOpsFrozen']>) =>
      mutate(walletClient!, mutation.setVaultOpsFrozen)(...args),
    setShouldAutoDeposit: (...args: ExtractArgs<Contract['mutations']['setShouldAutoDeposit']>) =>
      mutate(walletClient!, mutation.setShouldAutoDeposit)(...args),
    setRedemptionBuffer: (...args: ExtractArgs<Contract['mutations']['setRedemptionBuffer']>) =>
      mutate(walletClient!, mutation.setRedemptionBuffer)(...args),
    setMinYieldWithdrawAmount: (...args: ExtractArgs<Contract['mutations']['setMinYieldWithdrawAmount']>) =>
      mutate(walletClient!, mutation.setMinYieldWithdrawAmount)(...args),
    setSnapShotPriceConfig: (...args: ExtractArgs<Contract['mutations']['setSnapShotPriceConfig']>) =>
      mutate(walletClient!, mutation.setSnapShotPriceConfig)(...args),
    setApprovedVaultToken: (...args: ExtractArgs<Contract['mutations']['setApprovedVaultToken']>) =>
      mutate(walletClient!, mutation.setApprovedVaultToken)(...args),
    setPerformanceFee: (...args: ExtractArgs<Contract['mutations']['setPerformanceFee']>) =>
      mutate(walletClient!, mutation.setPerformanceFee)(...args),
    setDefaultTargetVaultToken: (...args: ExtractArgs<Contract['mutations']['setDefaultTargetVaultToken']>) =>
      mutate(walletClient!, mutation.setDefaultTargetVaultToken)(...args),
    setMaxDepositAmount: (...args: ExtractArgs<Contract['mutations']['setMaxDepositAmount']>) =>
      mutate(walletClient!, mutation.setMaxDepositAmount)(...args),
    executePendingAction: (...args: ExtractArgs<Contract['mutations']['executePendingAction']>) =>
      mutate(walletClient!, mutation.executePendingAction)(...args),
    cancelPendingAction: (...args: ExtractArgs<Contract['mutations']['cancelPendingAction']>) =>
      mutate(walletClient!, mutation.cancelPendingAction)(...args),
  }
}
