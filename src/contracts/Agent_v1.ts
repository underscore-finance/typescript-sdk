/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevOwner',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newOwner',
        type: 'address',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'AgentOwnershipChangeInitiated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevOwner',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newOwner',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'AgentOwnershipChangeConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'cancelledOwner',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'AgentOwnershipChangeCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'delayBlocks',
        type: 'uint256',
      },
    ],
    name: 'AgentOwnershipChangeDelaySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: true,
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: false,
        name: 'balance',
        type: 'uint256',
      },
    ],
    name: 'AgentFundsRecovered',
    type: 'event',
  },
  {
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'apiVersion',
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vault',
        type: 'address',
      },
    ],
    name: 'depositTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vault',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'depositTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vault',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'depositTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    name: 'withdrawTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_vaultTokenAmount',
        type: 'uint256',
      },
    ],
    name: 'withdrawTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_vaultTokenAmount',
        type: 'uint256',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'withdrawTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromAsset',
        type: 'address',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVault',
        type: 'address',
      },
    ],
    name: 'rebalance',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromAsset',
        type: 'address',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVault',
        type: 'address',
      },
      {
        name: '_fromVaultTokenAmount',
        type: 'uint256',
      },
    ],
    name: 'rebalance',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromAsset',
        type: 'address',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVault',
        type: 'address',
      },
      {
        name: '_fromVaultTokenAmount',
        type: 'uint256',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'rebalance',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
        name: '_swapInstructions',
        type: 'tuple[]',
      },
    ],
    name: 'swapTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
        name: '_swapInstructions',
        type: 'tuple[]',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'swapTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
        name: '_swapInstructions',
        type: 'tuple[]',
      },
      {
        name: '_expiration',
        type: 'uint256',
      },
    ],
    name: 'getSwapActionHash',
    outputs: [
      {
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'borrow',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
    ],
    name: 'borrow',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'borrow',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'borrow',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
    ],
    name: 'repayDebt',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
      {
        name: '_paymentAmount',
        type: 'uint256',
      },
    ],
    name: 'repayDebt',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
      {
        name: '_paymentAmount',
        type: 'uint256',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'repayDebt',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'claimRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_market',
        type: 'address',
      },
    ],
    name: 'claimRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_market',
        type: 'address',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
    ],
    name: 'claimRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_market',
        type: 'address',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
    ],
    name: 'claimRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_market',
        type: 'address',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
      {
        name: '_proof',
        type: 'bytes32',
      },
    ],
    name: 'claimRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_market',
        type: 'address',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
      {
        name: '_proof',
        type: 'bytes32',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'claimRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    name: 'transferFunds',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'transferFunds',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    name: 'transferFunds',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'transferFunds',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
    ],
    name: 'convertEthToWeth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'convertEthToWeth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_depositLegoId',
        type: 'uint256',
      },
    ],
    name: 'convertEthToWeth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_depositLegoId',
        type: 'uint256',
      },
      {
        name: '_depositVault',
        type: 'address',
      },
    ],
    name: 'convertEthToWeth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_depositLegoId',
        type: 'uint256',
      },
      {
        name: '_depositVault',
        type: 'address',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'convertEthToWeth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
    ],
    name: 'convertWethToEth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'convertWethToEth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    name: 'convertWethToEth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_withdrawLegoId',
        type: 'uint256',
      },
    ],
    name: 'convertWethToEth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_withdrawLegoId',
        type: 'uint256',
      },
      {
        name: '_withdrawVaultToken',
        type: 'address',
      },
    ],
    name: 'convertWethToEth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_withdrawLegoId',
        type: 'uint256',
      },
      {
        name: '_withdrawVaultToken',
        type: 'address',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'convertWethToEth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        components: [
          {
            name: 'usePrevAmountOut',
            type: 'bool',
          },
          {
            name: 'action',
            type: 'uint256',
          },
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'vault',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'altLegoId',
            type: 'uint256',
          },
          {
            name: 'altAsset',
            type: 'address',
          },
          {
            name: 'altVault',
            type: 'address',
          },
          {
            name: 'altAmount',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'proof',
            type: 'bytes32',
          },
          {
            name: 'nftAddr',
            type: 'address',
          },
          {
            name: 'nftTokenId',
            type: 'uint256',
          },
          {
            name: 'tickLower',
            type: 'int24',
          },
          {
            name: 'tickUpper',
            type: 'int24',
          },
          {
            name: 'minAmountA',
            type: 'uint256',
          },
          {
            name: 'minAmountB',
            type: 'uint256',
          },
          {
            name: 'minLpAmount',
            type: 'uint256',
          },
          {
            name: 'liqToRemove',
            type: 'uint256',
          },
          {
            name: 'recipient',
            type: 'address',
          },
          {
            name: 'isWethToEthConversion',
            type: 'bool',
          },
        ],
        name: '_instructions',
        type: 'tuple[]',
      },
    ],
    name: 'performBatchActions',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        components: [
          {
            name: 'usePrevAmountOut',
            type: 'bool',
          },
          {
            name: 'action',
            type: 'uint256',
          },
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'vault',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'altLegoId',
            type: 'uint256',
          },
          {
            name: 'altAsset',
            type: 'address',
          },
          {
            name: 'altVault',
            type: 'address',
          },
          {
            name: 'altAmount',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'proof',
            type: 'bytes32',
          },
          {
            name: 'nftAddr',
            type: 'address',
          },
          {
            name: 'nftTokenId',
            type: 'uint256',
          },
          {
            name: 'tickLower',
            type: 'int24',
          },
          {
            name: 'tickUpper',
            type: 'int24',
          },
          {
            name: 'minAmountA',
            type: 'uint256',
          },
          {
            name: 'minAmountB',
            type: 'uint256',
          },
          {
            name: 'minLpAmount',
            type: 'uint256',
          },
          {
            name: 'liqToRemove',
            type: 'uint256',
          },
          {
            name: 'recipient',
            type: 'address',
          },
          {
            name: 'isWethToEthConversion',
            type: 'bool',
          },
        ],
        name: '_instructions',
        type: 'tuple[]',
      },
      {
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'signer',
            type: 'address',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
        name: '_sig',
        type: 'tuple',
      },
    ],
    name: 'performBatchActions',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        components: [
          {
            name: 'usePrevAmountOut',
            type: 'bool',
          },
          {
            name: 'action',
            type: 'uint256',
          },
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'vault',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'altLegoId',
            type: 'uint256',
          },
          {
            name: 'altAsset',
            type: 'address',
          },
          {
            name: 'altVault',
            type: 'address',
          },
          {
            name: 'altAmount',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'proof',
            type: 'bytes32',
          },
          {
            name: 'nftAddr',
            type: 'address',
          },
          {
            name: 'nftTokenId',
            type: 'uint256',
          },
          {
            name: 'tickLower',
            type: 'int24',
          },
          {
            name: 'tickUpper',
            type: 'int24',
          },
          {
            name: 'minAmountA',
            type: 'uint256',
          },
          {
            name: 'minAmountB',
            type: 'uint256',
          },
          {
            name: 'minLpAmount',
            type: 'uint256',
          },
          {
            name: 'liqToRemove',
            type: 'uint256',
          },
          {
            name: 'recipient',
            type: 'address',
          },
          {
            name: 'isWethToEthConversion',
            type: 'bool',
          },
        ],
        name: '_instructions',
        type: 'tuple[]',
      },
      {
        name: '_expiration',
        type: 'uint256',
      },
    ],
    name: 'getBatchActionHash',
    outputs: [
      {
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [
      {
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newOwner',
        type: 'address',
      },
    ],
    name: 'changeOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmOwnershipChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelOwnershipChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    name: 'setOwnershipChangeDelay',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    name: 'recoverFunds',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'initialized',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'bytes',
      },
    ],
    name: 'usedSignatures',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [
      {
        components: [
          {
            name: 'newOwner',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ownershipChangeDelay',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MIN_OWNER_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_OWNER_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_minOwnerChangeDelay',
        type: 'uint256',
      },
      {
        name: '_maxOwnerChangeDelay',
        type: 'uint256',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
] as const

export const deployAddress: Address | undefined = '0x70418b3AAa1044eC8bFF6a461B4E43460bb5699E'

export type Contract = {
  calls: {
    apiVersion: () => Promise<string>
    getSwapActionHash: (
      userWallet: `0x${string}`,
      swapInstructions: {
        legoId: bigint
        amountIn: bigint
        minAmountOut: bigint
        tokenPath: `0x${string}`[]
        poolPath: `0x${string}`[]
      }[],
      expiration: bigint,
    ) => Promise<`0x${string}`>
    getBatchActionHash: (
      userWallet: `0x${string}`,
      instructions: {
        usePrevAmountOut: boolean
        action: bigint
        legoId: bigint
        asset: `0x${string}`
        vault: `0x${string}`
        amount: bigint
        altLegoId: bigint
        altAsset: `0x${string}`
        altVault: `0x${string}`
        altAmount: bigint
        minAmountOut: bigint
        pool: `0x${string}`
        proof: `0x${string}`
        nftAddr: `0x${string}`
        nftTokenId: bigint
        tickLower: unknown
        tickUpper: unknown
        minAmountA: bigint
        minAmountB: bigint
        minLpAmount: bigint
        liqToRemove: bigint
        recipient: `0x${string}`
        isWethToEthConversion: boolean
      }[],
      expiration: bigint,
    ) => Promise<`0x${string}`>
    DOMAIN_SEPARATOR: () => Promise<`0x${string}`>
    initialized: () => Promise<boolean>
    usedSignatures: (arg0: `0x${string}`) => Promise<boolean>
    owner: () => Promise<`0x${string}`>
    pendingOwner: () => Promise<{ newOwner: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    ownershipChangeDelay: () => Promise<bigint>
    MIN_OWNER_CHANGE_DELAY: () => Promise<bigint>
    MAX_OWNER_CHANGE_DELAY: () => Promise<bigint>
  }
  mutations: {
    initialize: (owner: `0x${string}`) => Promise<boolean>
    depositTokens: (
      userWallet: `0x${string}`,
      legoId: bigint,
      asset: `0x${string}`,
      vault: `0x${string}`,
      amount?: bigint,
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    withdrawTokens: (
      userWallet: `0x${string}`,
      legoId: bigint,
      asset: `0x${string}`,
      vaultToken: `0x${string}`,
      vaultTokenAmount?: bigint,
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<[bigint, bigint, bigint]>
    rebalance: (
      userWallet: `0x${string}`,
      fromLegoId: bigint,
      fromAsset: `0x${string}`,
      fromVaultToken: `0x${string}`,
      toLegoId: bigint,
      toVault: `0x${string}`,
      fromVaultTokenAmount?: bigint,
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    swapTokens: (
      userWallet: `0x${string}`,
      swapInstructions: {
        legoId: bigint
        amountIn: bigint
        minAmountOut: bigint
        tokenPath: `0x${string}`[]
        poolPath: `0x${string}`[]
      }[],
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<[bigint, bigint, bigint]>
    borrow: (
      userWallet: `0x${string}`,
      legoId: bigint,
      borrowAsset?: `0x${string}`,
      amount?: bigint,
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<[`0x${string}`, bigint, bigint]>
    repayDebt: (
      userWallet: `0x${string}`,
      legoId: bigint,
      paymentAsset: `0x${string}`,
      paymentAmount?: bigint,
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<[`0x${string}`, bigint, bigint, bigint]>
    claimRewards: (
      userWallet: `0x${string}`,
      legoId: bigint,
      market?: `0x${string}`,
      rewardToken?: `0x${string}`,
      rewardAmount?: bigint,
      proof?: `0x${string}`,
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<void>
    addLiquidity: (
      userWallet: `0x${string}`,
      legoId: bigint,
      nftAddr: `0x${string}`,
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      amountA?: bigint,
      amountB?: bigint,
      tickLower?: unknown,
      tickUpper?: unknown,
      minAmountA?: bigint,
      minAmountB?: bigint,
      minLpAmount?: bigint,
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<[bigint, bigint, bigint, bigint, bigint]>
    removeLiquidity: (
      userWallet: `0x${string}`,
      legoId: bigint,
      nftAddr: `0x${string}`,
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      liqToRemove?: bigint,
      minAmountA?: bigint,
      minAmountB?: bigint,
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<[bigint, bigint, bigint, boolean]>
    transferFunds: (
      userWallet: `0x${string}`,
      recipient: `0x${string}`,
      amount?: bigint,
      asset?: `0x${string}`,
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<[bigint, bigint]>
    convertEthToWeth: (
      userWallet: `0x${string}`,
      amount?: bigint,
      depositLegoId?: bigint,
      depositVault?: `0x${string}`,
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<[bigint, `0x${string}`, bigint]>
    convertWethToEth: (
      userWallet: `0x${string}`,
      amount?: bigint,
      recipient?: `0x${string}`,
      withdrawLegoId?: bigint,
      withdrawVaultToken?: `0x${string}`,
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<bigint>
    performBatchActions: (
      userWallet: `0x${string}`,
      instructions: {
        usePrevAmountOut: boolean
        action: bigint
        legoId: bigint
        asset: `0x${string}`
        vault: `0x${string}`
        amount: bigint
        altLegoId: bigint
        altAsset: `0x${string}`
        altVault: `0x${string}`
        altAmount: bigint
        minAmountOut: bigint
        pool: `0x${string}`
        proof: `0x${string}`
        nftAddr: `0x${string}`
        nftTokenId: bigint
        tickLower: unknown
        tickUpper: unknown
        minAmountA: bigint
        minAmountB: bigint
        minLpAmount: bigint
        liqToRemove: bigint
        recipient: `0x${string}`
        isWethToEthConversion: boolean
      }[],
      sig?: { signature: `0x${string}`; signer: `0x${string}`; expiration: bigint },
    ) => Promise<boolean>
    changeOwnership: (newOwner: `0x${string}`) => Promise<void>
    confirmOwnershipChange: () => Promise<void>
    cancelOwnershipChange: () => Promise<void>
    setOwnershipChangeDelay: (numBlocks: bigint) => Promise<void>
    recoverFunds: (asset: `0x${string}`) => Promise<boolean>
  }
  events: {
    AgentOwnershipChangeInitiated: (
      prevOwner: `0x${string}`,
      newOwner: `0x${string}`,
      confirmBlock: bigint,
    ) => Promise<void>
    AgentOwnershipChangeConfirmed: (
      prevOwner: `0x${string}`,
      newOwner: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    AgentOwnershipChangeCancelled: (
      cancelledOwner: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    AgentOwnershipChangeDelaySet: (delayBlocks: bigint) => Promise<void>
    AgentFundsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, balance: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'Agent_v1'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'Agent_v1' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) => getRequest('apiVersion', args),
  getSwapActionHash: (...args: ExtractArgs<Contract['calls']['getSwapActionHash']>) =>
    getRequest('getSwapActionHash', args),
  getBatchActionHash: (...args: ExtractArgs<Contract['calls']['getBatchActionHash']>) =>
    getRequest('getBatchActionHash', args),
  DOMAIN_SEPARATOR: (...args: ExtractArgs<Contract['calls']['DOMAIN_SEPARATOR']>) =>
    getRequest('DOMAIN_SEPARATOR', args),
  initialized: (...args: ExtractArgs<Contract['calls']['initialized']>) => getRequest('initialized', args),
  usedSignatures: (...args: ExtractArgs<Contract['calls']['usedSignatures']>) => getRequest('usedSignatures', args),
  owner: (...args: ExtractArgs<Contract['calls']['owner']>) => getRequest('owner', args),
  pendingOwner: (...args: ExtractArgs<Contract['calls']['pendingOwner']>) => getRequest('pendingOwner', args),
  ownershipChangeDelay: (...args: ExtractArgs<Contract['calls']['ownershipChangeDelay']>) =>
    getRequest('ownershipChangeDelay', args),
  MIN_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>) =>
    getRequest('MIN_OWNER_CHANGE_DELAY', args),
  MAX_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>) =>
    getRequest('MAX_OWNER_CHANGE_DELAY', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'Agent_v1' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'Agent_v1'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  initialize: getMutation('initialize'),
  depositTokens: getMutation('depositTokens'),
  withdrawTokens: getMutation('withdrawTokens'),
  rebalance: getMutation('rebalance'),
  swapTokens: getMutation('swapTokens'),
  borrow: getMutation('borrow'),
  repayDebt: getMutation('repayDebt'),
  claimRewards: getMutation('claimRewards'),
  addLiquidity: getMutation('addLiquidity'),
  removeLiquidity: getMutation('removeLiquidity'),
  transferFunds: getMutation('transferFunds'),
  convertEthToWeth: getMutation('convertEthToWeth'),
  convertWethToEth: getMutation('convertWethToEth'),
  performBatchActions: getMutation('performBatchActions'),
  changeOwnership: getMutation('changeOwnership'),
  confirmOwnershipChange: getMutation('confirmOwnershipChange'),
  cancelOwnershipChange: getMutation('cancelOwnershipChange'),
  setOwnershipChangeDelay: getMutation('setOwnershipChangeDelay'),
  recoverFunds: getMutation('recoverFunds'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) => Promise<CallReturn<'apiVersion'>>
  getSwapActionHash: (
    ...args: ExtractArgs<Contract['calls']['getSwapActionHash']>
  ) => Promise<CallReturn<'getSwapActionHash'>>
  getBatchActionHash: (
    ...args: ExtractArgs<Contract['calls']['getBatchActionHash']>
  ) => Promise<CallReturn<'getBatchActionHash'>>
  DOMAIN_SEPARATOR: (
    ...args: ExtractArgs<Contract['calls']['DOMAIN_SEPARATOR']>
  ) => Promise<CallReturn<'DOMAIN_SEPARATOR'>>
  initialized: (...args: ExtractArgs<Contract['calls']['initialized']>) => Promise<CallReturn<'initialized'>>
  usedSignatures: (...args: ExtractArgs<Contract['calls']['usedSignatures']>) => Promise<CallReturn<'usedSignatures'>>
  owner: (...args: ExtractArgs<Contract['calls']['owner']>) => Promise<CallReturn<'owner'>>
  pendingOwner: (...args: ExtractArgs<Contract['calls']['pendingOwner']>) => Promise<CallReturn<'pendingOwner'>>
  ownershipChangeDelay: (
    ...args: ExtractArgs<Contract['calls']['ownershipChangeDelay']>
  ) => Promise<CallReturn<'ownershipChangeDelay'>>
  MIN_OWNER_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MIN_OWNER_CHANGE_DELAY'>>
  MAX_OWNER_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MAX_OWNER_CHANGE_DELAY'>>
  initialize: (...args: ExtractArgs<Contract['mutations']['initialize']>) => Promise<Address>
  depositTokens: (...args: ExtractArgs<Contract['mutations']['depositTokens']>) => Promise<Address>
  withdrawTokens: (...args: ExtractArgs<Contract['mutations']['withdrawTokens']>) => Promise<Address>
  rebalance: (...args: ExtractArgs<Contract['mutations']['rebalance']>) => Promise<Address>
  swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) => Promise<Address>
  borrow: (...args: ExtractArgs<Contract['mutations']['borrow']>) => Promise<Address>
  repayDebt: (...args: ExtractArgs<Contract['mutations']['repayDebt']>) => Promise<Address>
  claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) => Promise<Address>
  addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) => Promise<Address>
  removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) => Promise<Address>
  transferFunds: (...args: ExtractArgs<Contract['mutations']['transferFunds']>) => Promise<Address>
  convertEthToWeth: (...args: ExtractArgs<Contract['mutations']['convertEthToWeth']>) => Promise<Address>
  convertWethToEth: (...args: ExtractArgs<Contract['mutations']['convertWethToEth']>) => Promise<Address>
  performBatchActions: (...args: ExtractArgs<Contract['mutations']['performBatchActions']>) => Promise<Address>
  changeOwnership: (...args: ExtractArgs<Contract['mutations']['changeOwnership']>) => Promise<Address>
  confirmOwnershipChange: (...args: ExtractArgs<Contract['mutations']['confirmOwnershipChange']>) => Promise<Address>
  cancelOwnershipChange: (...args: ExtractArgs<Contract['mutations']['cancelOwnershipChange']>) => Promise<Address>
  setOwnershipChangeDelay: (...args: ExtractArgs<Contract['mutations']['setOwnershipChangeDelay']>) => Promise<Address>
  recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) => Promise<Address>
}

export function toSdk(deployAddress: Address, publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) =>
      singleQuery(publicClient!, call.apiVersion(...args).at(deployAddress)) as Promise<CallReturn<'apiVersion'>>,
    getSwapActionHash: (...args: ExtractArgs<Contract['calls']['getSwapActionHash']>) =>
      singleQuery(publicClient!, call.getSwapActionHash(...args).at(deployAddress)) as Promise<
        CallReturn<'getSwapActionHash'>
      >,
    getBatchActionHash: (...args: ExtractArgs<Contract['calls']['getBatchActionHash']>) =>
      singleQuery(publicClient!, call.getBatchActionHash(...args).at(deployAddress)) as Promise<
        CallReturn<'getBatchActionHash'>
      >,
    DOMAIN_SEPARATOR: (...args: ExtractArgs<Contract['calls']['DOMAIN_SEPARATOR']>) =>
      singleQuery(publicClient!, call.DOMAIN_SEPARATOR(...args).at(deployAddress)) as Promise<
        CallReturn<'DOMAIN_SEPARATOR'>
      >,
    initialized: (...args: ExtractArgs<Contract['calls']['initialized']>) =>
      singleQuery(publicClient!, call.initialized(...args).at(deployAddress)) as Promise<CallReturn<'initialized'>>,
    usedSignatures: (...args: ExtractArgs<Contract['calls']['usedSignatures']>) =>
      singleQuery(publicClient!, call.usedSignatures(...args).at(deployAddress)) as Promise<
        CallReturn<'usedSignatures'>
      >,
    owner: (...args: ExtractArgs<Contract['calls']['owner']>) =>
      singleQuery(publicClient!, call.owner(...args).at(deployAddress)) as Promise<CallReturn<'owner'>>,
    pendingOwner: (...args: ExtractArgs<Contract['calls']['pendingOwner']>) =>
      singleQuery(publicClient!, call.pendingOwner(...args).at(deployAddress)) as Promise<CallReturn<'pendingOwner'>>,
    ownershipChangeDelay: (...args: ExtractArgs<Contract['calls']['ownershipChangeDelay']>) =>
      singleQuery(publicClient!, call.ownershipChangeDelay(...args).at(deployAddress)) as Promise<
        CallReturn<'ownershipChangeDelay'>
      >,
    MIN_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MIN_OWNER_CHANGE_DELAY(...args).at(deployAddress)) as Promise<
        CallReturn<'MIN_OWNER_CHANGE_DELAY'>
      >,
    MAX_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MAX_OWNER_CHANGE_DELAY(...args).at(deployAddress)) as Promise<
        CallReturn<'MAX_OWNER_CHANGE_DELAY'>
      >,

    // Mutations
    initialize: (...args: ExtractArgs<Contract['mutations']['initialize']>) =>
      mutate(walletClient!, mutation.initialize, { address: deployAddress })(...args),
    depositTokens: (...args: ExtractArgs<Contract['mutations']['depositTokens']>) =>
      mutate(walletClient!, mutation.depositTokens, { address: deployAddress })(...args),
    withdrawTokens: (...args: ExtractArgs<Contract['mutations']['withdrawTokens']>) =>
      mutate(walletClient!, mutation.withdrawTokens, { address: deployAddress })(...args),
    rebalance: (...args: ExtractArgs<Contract['mutations']['rebalance']>) =>
      mutate(walletClient!, mutation.rebalance, { address: deployAddress })(...args),
    swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) =>
      mutate(walletClient!, mutation.swapTokens, { address: deployAddress })(...args),
    borrow: (...args: ExtractArgs<Contract['mutations']['borrow']>) =>
      mutate(walletClient!, mutation.borrow, { address: deployAddress })(...args),
    repayDebt: (...args: ExtractArgs<Contract['mutations']['repayDebt']>) =>
      mutate(walletClient!, mutation.repayDebt, { address: deployAddress })(...args),
    claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) =>
      mutate(walletClient!, mutation.claimRewards, { address: deployAddress })(...args),
    addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) =>
      mutate(walletClient!, mutation.addLiquidity, { address: deployAddress })(...args),
    removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) =>
      mutate(walletClient!, mutation.removeLiquidity, { address: deployAddress })(...args),
    transferFunds: (...args: ExtractArgs<Contract['mutations']['transferFunds']>) =>
      mutate(walletClient!, mutation.transferFunds, { address: deployAddress })(...args),
    convertEthToWeth: (...args: ExtractArgs<Contract['mutations']['convertEthToWeth']>) =>
      mutate(walletClient!, mutation.convertEthToWeth, { address: deployAddress })(...args),
    convertWethToEth: (...args: ExtractArgs<Contract['mutations']['convertWethToEth']>) =>
      mutate(walletClient!, mutation.convertWethToEth, { address: deployAddress })(...args),
    performBatchActions: (...args: ExtractArgs<Contract['mutations']['performBatchActions']>) =>
      mutate(walletClient!, mutation.performBatchActions, { address: deployAddress })(...args),
    changeOwnership: (...args: ExtractArgs<Contract['mutations']['changeOwnership']>) =>
      mutate(walletClient!, mutation.changeOwnership, { address: deployAddress })(...args),
    confirmOwnershipChange: (...args: ExtractArgs<Contract['mutations']['confirmOwnershipChange']>) =>
      mutate(walletClient!, mutation.confirmOwnershipChange, { address: deployAddress })(...args),
    cancelOwnershipChange: (...args: ExtractArgs<Contract['mutations']['cancelOwnershipChange']>) =>
      mutate(walletClient!, mutation.cancelOwnershipChange, { address: deployAddress })(...args),
    setOwnershipChangeDelay: (...args: ExtractArgs<Contract['mutations']['setOwnershipChangeDelay']>) =>
      mutate(walletClient!, mutation.setOwnershipChangeDelay, { address: deployAddress })(...args),
    recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) =>
      mutate(walletClient!, mutation.recoverFunds, { address: deployAddress })(...args),
  }
}
