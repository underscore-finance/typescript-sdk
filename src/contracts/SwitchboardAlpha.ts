/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'PendingUserWalletTemplatesChange',
    inputs: [
      {
        name: 'walletTemplate',
        type: 'address',
        indexed: false,
      },
      {
        name: 'configTemplate',
        type: 'address',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'UserWalletTemplatesSet',
    inputs: [
      {
        name: 'walletTemplate',
        type: 'address',
        indexed: false,
      },
      {
        name: 'configTemplate',
        type: 'address',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingTrialFundsChange',
    inputs: [
      {
        name: 'trialAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'trialAmount',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'TrialFundsSet',
    inputs: [
      {
        name: 'trialAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'trialAmount',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingWalletCreationLimitsChange',
    inputs: [
      {
        name: 'numUserWalletsAllowed',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'enforceCreatorWhitelist',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'WalletCreationLimitsSet',
    inputs: [
      {
        name: 'numUserWalletsAllowed',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'enforceCreatorWhitelist',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingKeyActionTimelockBoundsChange',
    inputs: [
      {
        name: 'minKeyActionTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxKeyActionTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'KeyActionTimelockBoundsSet',
    inputs: [
      {
        name: 'minKeyActionTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxKeyActionTimeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingDefaultStaleBlocksChange',
    inputs: [
      {
        name: 'defaultStaleBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DefaultStaleBlocksSet',
    inputs: [
      {
        name: 'defaultStaleBlocks',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingTxFeesChange',
    inputs: [
      {
        name: 'swapFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'stableSwapFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'rewardsFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'TxFeesSet',
    inputs: [
      {
        name: 'swapFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'stableSwapFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'rewardsFee',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingAmbassadorRevShareChange',
    inputs: [
      {
        name: 'swapRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'rewardsRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'yieldRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AmbassadorRevShareSet',
    inputs: [
      {
        name: 'swapRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'rewardsRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'yieldRatio',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingDefaultYieldParamsChange',
    inputs: [
      {
        name: 'defaultYieldMaxIncrease',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultYieldPerformanceFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultYieldAmbassadorBonusRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultYieldBonusRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultYieldAltBonusAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DefaultYieldParamsSet',
    inputs: [
      {
        name: 'defaultYieldMaxIncrease',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultYieldPerformanceFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultYieldAmbassadorBonusRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultYieldBonusRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultYieldAltBonusAsset',
        type: 'address',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingLootParamsChange',
    inputs: [
      {
        name: 'depositRewardsAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'lootClaimCoolOffPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'LootParamsSet',
    inputs: [
      {
        name: 'depositRewardsAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'lootClaimCoolOffPeriod',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingAssetConfigChange',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'legoId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'staleBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txFeesSwapFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txFeesStableSwapFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txFeesRewardsFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'ambassadorRevShareSwapRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'ambassadorRevShareRewardsRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'ambassadorRevShareYieldRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'isYieldAsset',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'isRebasing',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'underlyingAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'maxYieldIncrease',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'performanceFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'ambassadorBonusRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bonusRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'altBonusAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingIsStablecoinChange',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'isStablecoin',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'IsStablecoinSet',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'isStablecoin',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AssetConfigSet',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'legoId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'staleBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txFeesSwapFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txFeesStableSwapFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txFeesRewardsFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'ambassadorRevShareSwapRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'ambassadorRevShareRewardsRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'ambassadorRevShareYieldRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'isYieldAsset',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'isRebasing',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'underlyingAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'maxYieldIncrease',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'performanceFee',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'ambassadorBonusRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bonusRatio',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'altBonusAsset',
        type: 'address',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingAgentTemplateChange',
    inputs: [
      {
        name: 'agentTemplate',
        type: 'address',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AgentTemplateSet',
    inputs: [
      {
        name: 'agentTemplate',
        type: 'address',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingAgentCreationLimitsChange',
    inputs: [
      {
        name: 'numAgentsAllowed',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'enforceCreatorWhitelist',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AgentCreationLimitsSet',
    inputs: [
      {
        name: 'numAgentsAllowed',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'enforceCreatorWhitelist',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingStarterAgentParamsChange',
    inputs: [
      {
        name: 'startingAgent',
        type: 'address',
        indexed: false,
      },
      {
        name: 'startingAgentActivationLength',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'StarterAgentParamsSet',
    inputs: [
      {
        name: 'startingAgent',
        type: 'address',
        indexed: false,
      },
      {
        name: 'startingAgentActivationLength',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingManagerConfigChange',
    inputs: [
      {
        name: 'managerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'managerActivationLength',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingPayeeConfigChange',
    inputs: [
      {
        name: 'payeePeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'payeeActivationLength',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingCanPerformSecurityAction',
    inputs: [
      {
        name: 'signer',
        type: 'address',
        indexed: false,
      },
      {
        name: 'canPerform',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'CreatorWhitelistSet',
    inputs: [
      {
        name: 'creator',
        type: 'address',
        indexed: false,
      },
      {
        name: 'isWhitelisted',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'caller',
        type: 'address',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ManagerConfigSet',
    inputs: [
      {
        name: 'managerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'managerActivationLength',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PayeeConfigSet',
    inputs: [
      {
        name: 'payeePeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'payeeActivationLength',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'CanPerformSecurityAction',
    inputs: [
      {
        name: 'signer',
        type: 'address',
        indexed: false,
      },
      {
        name: 'canPerform',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'LockedSignerSet',
    inputs: [
      {
        name: 'signer',
        type: 'address',
        indexed: false,
      },
      {
        name: 'isLocked',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'caller',
        type: 'address',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'RipeLockDurationSetFromSwitchboard',
    inputs: [
      {
        name: 'ripeLockDuration',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeTimeLockModified',
    inputs: [
      {
        name: 'prevTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newTimeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ExpirationSet',
    inputs: [
      {
        name: 'expiration',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ActionTimeLockSet',
    inputs: [
      {
        name: 'newTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'prevTimeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeStarted',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeConfirmed',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeCancelled',
    inputs: [
      {
        name: 'cancelledGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovRelinquished',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'UndyHqSetupFinished',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'timeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddys',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'hq',
            type: 'address',
          },
          {
            name: 'undyToken',
            type: 'address',
          },
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'switchboard',
            type: 'address',
          },
          {
            name: 'hatchery',
            type: 'address',
          },
          {
            name: 'lootDistributor',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
          {
            name: 'walletBackpack',
            type: 'address',
          },
          {
            name: 'billing',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHq',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHqFromGov',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canGovern',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getGovernors',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasPendingGovChange',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'startGovernanceChange',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmGovernanceChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelGovernanceChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'relinquishGov',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setGovTimeLock',
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidGovTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'minGovChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxGovChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'finishUndyHqSetup',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'finishUndyHqSetup',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
      {
        name: '_timeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'governance',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingGov',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'newGov',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'numGovChanges',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'govChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canConfirmAction',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isExpired',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasPendingAction',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getActionConfirmationBlock',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidActionTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'minActionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxActionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setExpiration',
    inputs: [
      {
        name: '_expiration',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLockAfterSetup',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLockAfterSetup',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingActions',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'actionId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'actionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'expiration',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setUserWalletTemplates',
    inputs: [
      {
        name: '_walletTemplate',
        type: 'address',
      },
      {
        name: '_configTemplate',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setTrialFunds',
    inputs: [
      {
        name: '_trialAsset',
        type: 'address',
      },
      {
        name: '_trialAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setWalletCreationLimits',
    inputs: [
      {
        name: '_numUserWalletsAllowed',
        type: 'uint256',
      },
      {
        name: '_enforceCreatorWhitelist',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setKeyActionTimelockBounds',
    inputs: [
      {
        name: '_minKeyActionTimeLock',
        type: 'uint256',
      },
      {
        name: '_maxKeyActionTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setDefaultStaleBlocks',
    inputs: [
      {
        name: '_defaultStaleBlocks',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setTxFees',
    inputs: [
      {
        name: '_swapFee',
        type: 'uint256',
      },
      {
        name: '_stableSwapFee',
        type: 'uint256',
      },
      {
        name: '_rewardsFee',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setAmbassadorRevShare',
    inputs: [
      {
        name: '_swapRatio',
        type: 'uint256',
      },
      {
        name: '_rewardsRatio',
        type: 'uint256',
      },
      {
        name: '_yieldRatio',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setDefaultYieldParams',
    inputs: [
      {
        name: '_defaultYieldMaxIncrease',
        type: 'uint256',
      },
      {
        name: '_defaultYieldPerformanceFee',
        type: 'uint256',
      },
      {
        name: '_defaultYieldAmbassadorBonusRatio',
        type: 'uint256',
      },
      {
        name: '_defaultYieldBonusRatio',
        type: 'uint256',
      },
      {
        name: '_defaultYieldAltBonusAsset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setLootParams',
    inputs: [
      {
        name: '_depositRewardsAsset',
        type: 'address',
      },
      {
        name: '_lootClaimCoolOffPeriod',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setAssetConfig',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_staleBlocks',
        type: 'uint256',
      },
      {
        name: '_txFeesSwapFee',
        type: 'uint256',
      },
      {
        name: '_txFeesStableSwapFee',
        type: 'uint256',
      },
      {
        name: '_txFeesRewardsFee',
        type: 'uint256',
      },
      {
        name: '_ambassadorRevShareSwapRatio',
        type: 'uint256',
      },
      {
        name: '_ambassadorRevShareRewardsRatio',
        type: 'uint256',
      },
      {
        name: '_ambassadorRevShareYieldRatio',
        type: 'uint256',
      },
      {
        name: '_isYieldAsset',
        type: 'bool',
      },
      {
        name: '_isRebasing',
        type: 'bool',
      },
      {
        name: '_underlyingAsset',
        type: 'address',
      },
      {
        name: '_maxYieldIncrease',
        type: 'uint256',
      },
      {
        name: '_performanceFee',
        type: 'uint256',
      },
      {
        name: '_ambassadorBonusRatio',
        type: 'uint256',
      },
      {
        name: '_bonusRatio',
        type: 'uint256',
      },
      {
        name: '_altBonusAsset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setIsStablecoin',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_isStablecoin',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setAgentTemplate',
    inputs: [
      {
        name: '_agentTemplate',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setAgentCreationLimits',
    inputs: [
      {
        name: '_numAgentsAllowed',
        type: 'uint256',
      },
      {
        name: '_enforceCreatorWhitelist',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setStarterAgentParams',
    inputs: [
      {
        name: '_startingAgent',
        type: 'address',
      },
      {
        name: '_startingAgentActivationLength',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setManagerConfig',
    inputs: [
      {
        name: '_managerPeriod',
        type: 'uint256',
      },
      {
        name: '_managerActivationLength',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setPayeeConfig',
    inputs: [
      {
        name: '_payeePeriod',
        type: 'uint256',
      },
      {
        name: '_payeeActivationLength',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setCanPerformSecurityAction',
    inputs: [
      {
        name: '_signer',
        type: 'address',
      },
      {
        name: '_canPerform',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setCreatorWhitelist',
    inputs: [
      {
        name: '_creator',
        type: 'address',
      },
      {
        name: '_isWhitelisted',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setLockedSigner',
    inputs: [
      {
        name: '_signer',
        type: 'address',
      },
      {
        name: '_isLocked',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setRipeLockDuration',
    inputs: [
      {
        name: '_ripeLockDuration',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'executePendingAction',
    inputs: [
      {
        name: '_aid',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelPendingAction',
    inputs: [
      {
        name: '_aid',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'actionType',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingUserWalletConfig',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'walletTemplate',
            type: 'address',
          },
          {
            name: 'configTemplate',
            type: 'address',
          },
          {
            name: 'trialAsset',
            type: 'address',
          },
          {
            name: 'trialAmount',
            type: 'uint256',
          },
          {
            name: 'numUserWalletsAllowed',
            type: 'uint256',
          },
          {
            name: 'enforceCreatorWhitelist',
            type: 'bool',
          },
          {
            name: 'minKeyActionTimeLock',
            type: 'uint256',
          },
          {
            name: 'maxKeyActionTimeLock',
            type: 'uint256',
          },
          {
            name: 'defaultStaleBlocks',
            type: 'uint256',
          },
          {
            name: 'depositRewardsAsset',
            type: 'address',
          },
          {
            name: 'txFees',
            type: 'tuple',
            components: [
              {
                name: 'swapFee',
                type: 'uint256',
              },
              {
                name: 'stableSwapFee',
                type: 'uint256',
              },
              {
                name: 'rewardsFee',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'ambassadorRevShare',
            type: 'tuple',
            components: [
              {
                name: 'swapRatio',
                type: 'uint256',
              },
              {
                name: 'rewardsRatio',
                type: 'uint256',
              },
              {
                name: 'yieldRatio',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'defaultYieldMaxIncrease',
            type: 'uint256',
          },
          {
            name: 'defaultYieldPerformanceFee',
            type: 'uint256',
          },
          {
            name: 'defaultYieldAmbassadorBonusRatio',
            type: 'uint256',
          },
          {
            name: 'defaultYieldBonusRatio',
            type: 'uint256',
          },
          {
            name: 'defaultYieldAltBonusAsset',
            type: 'address',
          },
          {
            name: 'lootClaimCoolOffPeriod',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingAssetConfig',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'config',
            type: 'tuple',
            components: [
              {
                name: 'legoId',
                type: 'uint256',
              },
              {
                name: 'decimals',
                type: 'uint256',
              },
              {
                name: 'staleBlocks',
                type: 'uint256',
              },
              {
                name: 'txFees',
                type: 'tuple',
                components: [
                  {
                    name: 'swapFee',
                    type: 'uint256',
                  },
                  {
                    name: 'stableSwapFee',
                    type: 'uint256',
                  },
                  {
                    name: 'rewardsFee',
                    type: 'uint256',
                  },
                ],
              },
              {
                name: 'ambassadorRevShare',
                type: 'tuple',
                components: [
                  {
                    name: 'swapRatio',
                    type: 'uint256',
                  },
                  {
                    name: 'rewardsRatio',
                    type: 'uint256',
                  },
                  {
                    name: 'yieldRatio',
                    type: 'uint256',
                  },
                ],
              },
              {
                name: 'yieldConfig',
                type: 'tuple',
                components: [
                  {
                    name: 'isYieldAsset',
                    type: 'bool',
                  },
                  {
                    name: 'isRebasing',
                    type: 'bool',
                  },
                  {
                    name: 'underlyingAsset',
                    type: 'address',
                  },
                  {
                    name: 'maxYieldIncrease',
                    type: 'uint256',
                  },
                  {
                    name: 'performanceFee',
                    type: 'uint256',
                  },
                  {
                    name: 'ambassadorBonusRatio',
                    type: 'uint256',
                  },
                  {
                    name: 'bonusRatio',
                    type: 'uint256',
                  },
                  {
                    name: 'altBonusAsset',
                    type: 'address',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingAgentConfig',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'agentTemplate',
            type: 'address',
          },
          {
            name: 'numAgentsAllowed',
            type: 'uint256',
          },
          {
            name: 'enforceCreatorWhitelist',
            type: 'bool',
          },
          {
            name: 'startingAgent',
            type: 'address',
          },
          {
            name: 'startingAgentActivationLength',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingManagerConfig',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'managerPeriod',
            type: 'uint256',
          },
          {
            name: 'managerActivationLength',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingPayeeConfig',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'payeePeriod',
            type: 'uint256',
          },
          {
            name: 'payeeActivationLength',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingAddrToBool',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'isAllowed',
            type: 'bool',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_tempGov',
        type: 'address',
      },
      {
        name: '_minConfigTimeLock',
        type: 'uint256',
      },
      {
        name: '_maxConfigTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0x90B138306ab1fb8d23372d104594e8A6BD7848D4'

export type Contract = {
  calls: {
    getAddys: () => Promise<{
      hq: `0x${string}`
      undyToken: `0x${string}`
      ledger: `0x${string}`
      missionControl: `0x${string}`
      legoBook: `0x${string}`
      switchboard: `0x${string}`
      hatchery: `0x${string}`
      lootDistributor: `0x${string}`
      appraiser: `0x${string}`
      walletBackpack: `0x${string}`
      billing: `0x${string}`
    }>
    getUndyHq: () => Promise<`0x${string}`>
    getUndyHqFromGov: () => Promise<`0x${string}`>
    canGovern: (addr: `0x${string}`) => Promise<boolean>
    getGovernors: () => Promise<`0x${string}`[]>
    hasPendingGovChange: () => Promise<boolean>
    isValidGovTimeLock: (newTimeLock: bigint) => Promise<boolean>
    minGovChangeTimeLock: () => Promise<bigint>
    maxGovChangeTimeLock: () => Promise<bigint>
    governance: () => Promise<`0x${string}`>
    pendingGov: () => Promise<{ newGov: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    numGovChanges: () => Promise<bigint>
    govChangeTimeLock: () => Promise<bigint>
    canConfirmAction: (actionId: bigint) => Promise<boolean>
    isExpired: (actionId: bigint) => Promise<boolean>
    hasPendingAction: (actionId: bigint) => Promise<boolean>
    getActionConfirmationBlock: (actionId: bigint) => Promise<bigint>
    isValidActionTimeLock: (newTimeLock: bigint) => Promise<boolean>
    minActionTimeLock: () => Promise<bigint>
    maxActionTimeLock: () => Promise<bigint>
    pendingActions: (arg0: bigint) => Promise<{ initiatedBlock: bigint; confirmBlock: bigint; expiration: bigint }>
    actionId: () => Promise<bigint>
    actionTimeLock: () => Promise<bigint>
    expiration: () => Promise<bigint>
    actionType: (arg0: bigint) => Promise<bigint>
    pendingUserWalletConfig: (
      arg0: bigint,
    ) => Promise<{
      walletTemplate: `0x${string}`
      configTemplate: `0x${string}`
      trialAsset: `0x${string}`
      trialAmount: bigint
      numUserWalletsAllowed: bigint
      enforceCreatorWhitelist: boolean
      minKeyActionTimeLock: bigint
      maxKeyActionTimeLock: bigint
      defaultStaleBlocks: bigint
      depositRewardsAsset: `0x${string}`
      txFees: { swapFee: bigint; stableSwapFee: bigint; rewardsFee: bigint }
      ambassadorRevShare: { swapRatio: bigint; rewardsRatio: bigint; yieldRatio: bigint }
      defaultYieldMaxIncrease: bigint
      defaultYieldPerformanceFee: bigint
      defaultYieldAmbassadorBonusRatio: bigint
      defaultYieldBonusRatio: bigint
      defaultYieldAltBonusAsset: `0x${string}`
      lootClaimCoolOffPeriod: bigint
    }>
    pendingAssetConfig: (
      arg0: bigint,
    ) => Promise<{
      asset: `0x${string}`
      config: {
        legoId: bigint
        decimals: bigint
        staleBlocks: bigint
        txFees: { swapFee: bigint; stableSwapFee: bigint; rewardsFee: bigint }
        ambassadorRevShare: { swapRatio: bigint; rewardsRatio: bigint; yieldRatio: bigint }
        yieldConfig: {
          isYieldAsset: boolean
          isRebasing: boolean
          underlyingAsset: `0x${string}`
          maxYieldIncrease: bigint
          performanceFee: bigint
          ambassadorBonusRatio: bigint
          bonusRatio: bigint
          altBonusAsset: `0x${string}`
        }
      }
    }>
    pendingAgentConfig: (
      arg0: bigint,
    ) => Promise<{
      agentTemplate: `0x${string}`
      numAgentsAllowed: bigint
      enforceCreatorWhitelist: boolean
      startingAgent: `0x${string}`
      startingAgentActivationLength: bigint
    }>
    pendingManagerConfig: (arg0: bigint) => Promise<{ managerPeriod: bigint; managerActivationLength: bigint }>
    pendingPayeeConfig: (arg0: bigint) => Promise<{ payeePeriod: bigint; payeeActivationLength: bigint }>
    pendingAddrToBool: (arg0: bigint) => Promise<{ addr: `0x${string}`; isAllowed: boolean }>
  }
  mutations: {
    startGovernanceChange: (newGov: `0x${string}`) => Promise<void>
    confirmGovernanceChange: () => Promise<void>
    cancelGovernanceChange: () => Promise<void>
    relinquishGov: () => Promise<void>
    setGovTimeLock: (numBlocks: bigint) => Promise<boolean>
    finishUndyHqSetup: (newGov: `0x${string}`, timeLock?: bigint) => Promise<boolean>
    setActionTimeLock: (newTimeLock: bigint) => Promise<boolean>
    setExpiration: (expiration: bigint) => Promise<boolean>
    setActionTimeLockAfterSetup: (newTimeLock?: bigint) => Promise<boolean>
    setUserWalletTemplates: (walletTemplate: `0x${string}`, configTemplate: `0x${string}`) => Promise<bigint>
    setTrialFunds: (trialAsset: `0x${string}`, trialAmount: bigint) => Promise<bigint>
    setWalletCreationLimits: (numUserWalletsAllowed: bigint, enforceCreatorWhitelist: boolean) => Promise<bigint>
    setKeyActionTimelockBounds: (minKeyActionTimeLock: bigint, maxKeyActionTimeLock: bigint) => Promise<bigint>
    setDefaultStaleBlocks: (defaultStaleBlocks: bigint) => Promise<bigint>
    setTxFees: (swapFee: bigint, stableSwapFee: bigint, rewardsFee: bigint) => Promise<bigint>
    setAmbassadorRevShare: (swapRatio: bigint, rewardsRatio: bigint, yieldRatio: bigint) => Promise<bigint>
    setDefaultYieldParams: (
      defaultYieldMaxIncrease: bigint,
      defaultYieldPerformanceFee: bigint,
      defaultYieldAmbassadorBonusRatio: bigint,
      defaultYieldBonusRatio: bigint,
      defaultYieldAltBonusAsset: `0x${string}`,
    ) => Promise<bigint>
    setLootParams: (depositRewardsAsset: `0x${string}`, lootClaimCoolOffPeriod: bigint) => Promise<bigint>
    setAssetConfig: (
      asset: `0x${string}`,
      legoId: bigint,
      staleBlocks: bigint,
      txFeesSwapFee: bigint,
      txFeesStableSwapFee: bigint,
      txFeesRewardsFee: bigint,
      ambassadorRevShareSwapRatio: bigint,
      ambassadorRevShareRewardsRatio: bigint,
      ambassadorRevShareYieldRatio: bigint,
      isYieldAsset: boolean,
      isRebasing: boolean,
      underlyingAsset: `0x${string}`,
      maxYieldIncrease: bigint,
      performanceFee: bigint,
      ambassadorBonusRatio: bigint,
      bonusRatio: bigint,
      altBonusAsset: `0x${string}`,
    ) => Promise<bigint>
    setIsStablecoin: (asset: `0x${string}`, isStablecoin: boolean) => Promise<bigint>
    setAgentTemplate: (agentTemplate: `0x${string}`) => Promise<bigint>
    setAgentCreationLimits: (numAgentsAllowed: bigint, enforceCreatorWhitelist: boolean) => Promise<bigint>
    setStarterAgentParams: (startingAgent: `0x${string}`, startingAgentActivationLength: bigint) => Promise<bigint>
    setManagerConfig: (managerPeriod: bigint, managerActivationLength: bigint) => Promise<bigint>
    setPayeeConfig: (payeePeriod: bigint, payeeActivationLength: bigint) => Promise<bigint>
    setCanPerformSecurityAction: (signer: `0x${string}`, canPerform: boolean) => Promise<bigint>
    setCreatorWhitelist: (creator: `0x${string}`, isWhitelisted: boolean) => Promise<void>
    setLockedSigner: (signer: `0x${string}`, isLocked: boolean) => Promise<void>
    setRipeLockDuration: (ripeLockDuration: bigint) => Promise<void>
    executePendingAction: (aid: bigint) => Promise<boolean>
    cancelPendingAction: (aid: bigint) => Promise<boolean>
  }
  events: {
    PendingUserWalletTemplatesChange: (
      walletTemplate: `0x${string}`,
      configTemplate: `0x${string}`,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    UserWalletTemplatesSet: (walletTemplate: `0x${string}`, configTemplate: `0x${string}`) => Promise<void>
    PendingTrialFundsChange: (
      trialAsset: `0x${string}`,
      trialAmount: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    TrialFundsSet: (trialAsset: `0x${string}`, trialAmount: bigint) => Promise<void>
    PendingWalletCreationLimitsChange: (
      numUserWalletsAllowed: bigint,
      enforceCreatorWhitelist: boolean,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    WalletCreationLimitsSet: (numUserWalletsAllowed: bigint, enforceCreatorWhitelist: boolean) => Promise<void>
    PendingKeyActionTimelockBoundsChange: (
      minKeyActionTimeLock: bigint,
      maxKeyActionTimeLock: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    KeyActionTimelockBoundsSet: (minKeyActionTimeLock: bigint, maxKeyActionTimeLock: bigint) => Promise<void>
    PendingDefaultStaleBlocksChange: (
      defaultStaleBlocks: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    DefaultStaleBlocksSet: (defaultStaleBlocks: bigint) => Promise<void>
    PendingTxFeesChange: (
      swapFee: bigint,
      stableSwapFee: bigint,
      rewardsFee: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    TxFeesSet: (swapFee: bigint, stableSwapFee: bigint, rewardsFee: bigint) => Promise<void>
    PendingAmbassadorRevShareChange: (
      swapRatio: bigint,
      rewardsRatio: bigint,
      yieldRatio: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    AmbassadorRevShareSet: (swapRatio: bigint, rewardsRatio: bigint, yieldRatio: bigint) => Promise<void>
    PendingDefaultYieldParamsChange: (
      defaultYieldMaxIncrease: bigint,
      defaultYieldPerformanceFee: bigint,
      defaultYieldAmbassadorBonusRatio: bigint,
      defaultYieldBonusRatio: bigint,
      defaultYieldAltBonusAsset: `0x${string}`,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    DefaultYieldParamsSet: (
      defaultYieldMaxIncrease: bigint,
      defaultYieldPerformanceFee: bigint,
      defaultYieldAmbassadorBonusRatio: bigint,
      defaultYieldBonusRatio: bigint,
      defaultYieldAltBonusAsset: `0x${string}`,
    ) => Promise<void>
    PendingLootParamsChange: (
      depositRewardsAsset: `0x${string}`,
      lootClaimCoolOffPeriod: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    LootParamsSet: (depositRewardsAsset: `0x${string}`, lootClaimCoolOffPeriod: bigint) => Promise<void>
    PendingAssetConfigChange: (
      asset: `0x${string}`,
      legoId: bigint,
      staleBlocks: bigint,
      txFeesSwapFee: bigint,
      txFeesStableSwapFee: bigint,
      txFeesRewardsFee: bigint,
      ambassadorRevShareSwapRatio: bigint,
      ambassadorRevShareRewardsRatio: bigint,
      ambassadorRevShareYieldRatio: bigint,
      isYieldAsset: boolean,
      isRebasing: boolean,
      underlyingAsset: `0x${string}`,
      maxYieldIncrease: bigint,
      performanceFee: bigint,
      ambassadorBonusRatio: bigint,
      bonusRatio: bigint,
      altBonusAsset: `0x${string}`,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    PendingIsStablecoinChange: (
      asset: `0x${string}`,
      isStablecoin: boolean,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    IsStablecoinSet: (asset: `0x${string}`, isStablecoin: boolean) => Promise<void>
    AssetConfigSet: (
      asset: `0x${string}`,
      legoId: bigint,
      staleBlocks: bigint,
      txFeesSwapFee: bigint,
      txFeesStableSwapFee: bigint,
      txFeesRewardsFee: bigint,
      ambassadorRevShareSwapRatio: bigint,
      ambassadorRevShareRewardsRatio: bigint,
      ambassadorRevShareYieldRatio: bigint,
      isYieldAsset: boolean,
      isRebasing: boolean,
      underlyingAsset: `0x${string}`,
      maxYieldIncrease: bigint,
      performanceFee: bigint,
      ambassadorBonusRatio: bigint,
      bonusRatio: bigint,
      altBonusAsset: `0x${string}`,
    ) => Promise<void>
    PendingAgentTemplateChange: (
      agentTemplate: `0x${string}`,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    AgentTemplateSet: (agentTemplate: `0x${string}`) => Promise<void>
    PendingAgentCreationLimitsChange: (
      numAgentsAllowed: bigint,
      enforceCreatorWhitelist: boolean,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    AgentCreationLimitsSet: (numAgentsAllowed: bigint, enforceCreatorWhitelist: boolean) => Promise<void>
    PendingStarterAgentParamsChange: (
      startingAgent: `0x${string}`,
      startingAgentActivationLength: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    StarterAgentParamsSet: (startingAgent: `0x${string}`, startingAgentActivationLength: bigint) => Promise<void>
    PendingManagerConfigChange: (
      managerPeriod: bigint,
      managerActivationLength: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    PendingPayeeConfigChange: (
      payeePeriod: bigint,
      payeeActivationLength: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    PendingCanPerformSecurityAction: (
      signer: `0x${string}`,
      canPerform: boolean,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    CreatorWhitelistSet: (creator: `0x${string}`, isWhitelisted: boolean, caller: `0x${string}`) => Promise<void>
    ManagerConfigSet: (managerPeriod: bigint, managerActivationLength: bigint) => Promise<void>
    PayeeConfigSet: (payeePeriod: bigint, payeeActivationLength: bigint) => Promise<void>
    CanPerformSecurityAction: (signer: `0x${string}`, canPerform: boolean) => Promise<void>
    LockedSignerSet: (signer: `0x${string}`, isLocked: boolean, caller: `0x${string}`) => Promise<void>
    RipeLockDurationSetFromSwitchboard: (ripeLockDuration: bigint) => Promise<void>
    GovChangeTimeLockModified: (prevTimeLock: bigint, newTimeLock: bigint) => Promise<void>
    ExpirationSet: (expiration: bigint) => Promise<void>
    ActionTimeLockSet: (newTimeLock: bigint, prevTimeLock: bigint) => Promise<void>
    GovChangeStarted: (prevGov: `0x${string}`, newGov: `0x${string}`, confirmBlock: bigint) => Promise<void>
    GovChangeConfirmed: (
      prevGov: `0x${string}`,
      newGov: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    GovChangeCancelled: (cancelledGov: `0x${string}`, initiatedBlock: bigint, confirmBlock: bigint) => Promise<void>
    GovRelinquished: (prevGov: `0x${string}`) => Promise<void>
    UndyHqSetupFinished: (prevGov: `0x${string}`, newGov: `0x${string}`, timeLock: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'SwitchboardAlpha'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'SwitchboardAlpha' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => getRequest('getAddys', args),
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => getRequest('getUndyHq', args),
  getUndyHqFromGov: (...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>) =>
    getRequest('getUndyHqFromGov', args),
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => getRequest('canGovern', args),
  getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) => getRequest('getGovernors', args),
  hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
    getRequest('hasPendingGovChange', args),
  isValidGovTimeLock: (...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>) =>
    getRequest('isValidGovTimeLock', args),
  minGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>) =>
    getRequest('minGovChangeTimeLock', args),
  maxGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>) =>
    getRequest('maxGovChangeTimeLock', args),
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => getRequest('governance', args),
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => getRequest('pendingGov', args),
  numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) => getRequest('numGovChanges', args),
  govChangeTimeLock: (...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>) =>
    getRequest('govChangeTimeLock', args),
  canConfirmAction: (...args: ExtractArgs<Contract['calls']['canConfirmAction']>) =>
    getRequest('canConfirmAction', args),
  isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) => getRequest('isExpired', args),
  hasPendingAction: (...args: ExtractArgs<Contract['calls']['hasPendingAction']>) =>
    getRequest('hasPendingAction', args),
  getActionConfirmationBlock: (...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>) =>
    getRequest('getActionConfirmationBlock', args),
  isValidActionTimeLock: (...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>) =>
    getRequest('isValidActionTimeLock', args),
  minActionTimeLock: (...args: ExtractArgs<Contract['calls']['minActionTimeLock']>) =>
    getRequest('minActionTimeLock', args),
  maxActionTimeLock: (...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>) =>
    getRequest('maxActionTimeLock', args),
  pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) => getRequest('pendingActions', args),
  actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) => getRequest('actionId', args),
  actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) => getRequest('actionTimeLock', args),
  expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) => getRequest('expiration', args),
  actionType: (...args: ExtractArgs<Contract['calls']['actionType']>) => getRequest('actionType', args),
  pendingUserWalletConfig: (...args: ExtractArgs<Contract['calls']['pendingUserWalletConfig']>) =>
    getRequest('pendingUserWalletConfig', args),
  pendingAssetConfig: (...args: ExtractArgs<Contract['calls']['pendingAssetConfig']>) =>
    getRequest('pendingAssetConfig', args),
  pendingAgentConfig: (...args: ExtractArgs<Contract['calls']['pendingAgentConfig']>) =>
    getRequest('pendingAgentConfig', args),
  pendingManagerConfig: (...args: ExtractArgs<Contract['calls']['pendingManagerConfig']>) =>
    getRequest('pendingManagerConfig', args),
  pendingPayeeConfig: (...args: ExtractArgs<Contract['calls']['pendingPayeeConfig']>) =>
    getRequest('pendingPayeeConfig', args),
  pendingAddrToBool: (...args: ExtractArgs<Contract['calls']['pendingAddrToBool']>) =>
    getRequest('pendingAddrToBool', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'SwitchboardAlpha' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'SwitchboardAlpha'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  startGovernanceChange: getMutation('startGovernanceChange'),
  confirmGovernanceChange: getMutation('confirmGovernanceChange'),
  cancelGovernanceChange: getMutation('cancelGovernanceChange'),
  relinquishGov: getMutation('relinquishGov'),
  setGovTimeLock: getMutation('setGovTimeLock'),
  finishUndyHqSetup: getMutation('finishUndyHqSetup'),
  setActionTimeLock: getMutation('setActionTimeLock'),
  setExpiration: getMutation('setExpiration'),
  setActionTimeLockAfterSetup: getMutation('setActionTimeLockAfterSetup'),
  setUserWalletTemplates: getMutation('setUserWalletTemplates'),
  setTrialFunds: getMutation('setTrialFunds'),
  setWalletCreationLimits: getMutation('setWalletCreationLimits'),
  setKeyActionTimelockBounds: getMutation('setKeyActionTimelockBounds'),
  setDefaultStaleBlocks: getMutation('setDefaultStaleBlocks'),
  setTxFees: getMutation('setTxFees'),
  setAmbassadorRevShare: getMutation('setAmbassadorRevShare'),
  setDefaultYieldParams: getMutation('setDefaultYieldParams'),
  setLootParams: getMutation('setLootParams'),
  setAssetConfig: getMutation('setAssetConfig'),
  setIsStablecoin: getMutation('setIsStablecoin'),
  setAgentTemplate: getMutation('setAgentTemplate'),
  setAgentCreationLimits: getMutation('setAgentCreationLimits'),
  setStarterAgentParams: getMutation('setStarterAgentParams'),
  setManagerConfig: getMutation('setManagerConfig'),
  setPayeeConfig: getMutation('setPayeeConfig'),
  setCanPerformSecurityAction: getMutation('setCanPerformSecurityAction'),
  setCreatorWhitelist: getMutation('setCreatorWhitelist'),
  setLockedSigner: getMutation('setLockedSigner'),
  setRipeLockDuration: getMutation('setRipeLockDuration'),
  executePendingAction: getMutation('executePendingAction'),
  cancelPendingAction: getMutation('cancelPendingAction'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => Promise<CallReturn<'getAddys'>>
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => Promise<CallReturn<'getUndyHq'>>
  getUndyHqFromGov: (
    ...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>
  ) => Promise<CallReturn<'getUndyHqFromGov'>>
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => Promise<CallReturn<'canGovern'>>
  getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) => Promise<CallReturn<'getGovernors'>>
  hasPendingGovChange: (
    ...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>
  ) => Promise<CallReturn<'hasPendingGovChange'>>
  isValidGovTimeLock: (
    ...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>
  ) => Promise<CallReturn<'isValidGovTimeLock'>>
  minGovChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>
  ) => Promise<CallReturn<'minGovChangeTimeLock'>>
  maxGovChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>
  ) => Promise<CallReturn<'maxGovChangeTimeLock'>>
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => Promise<CallReturn<'governance'>>
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => Promise<CallReturn<'pendingGov'>>
  numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) => Promise<CallReturn<'numGovChanges'>>
  govChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>
  ) => Promise<CallReturn<'govChangeTimeLock'>>
  canConfirmAction: (
    ...args: ExtractArgs<Contract['calls']['canConfirmAction']>
  ) => Promise<CallReturn<'canConfirmAction'>>
  isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) => Promise<CallReturn<'isExpired'>>
  hasPendingAction: (
    ...args: ExtractArgs<Contract['calls']['hasPendingAction']>
  ) => Promise<CallReturn<'hasPendingAction'>>
  getActionConfirmationBlock: (
    ...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>
  ) => Promise<CallReturn<'getActionConfirmationBlock'>>
  isValidActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>
  ) => Promise<CallReturn<'isValidActionTimeLock'>>
  minActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['minActionTimeLock']>
  ) => Promise<CallReturn<'minActionTimeLock'>>
  maxActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>
  ) => Promise<CallReturn<'maxActionTimeLock'>>
  pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) => Promise<CallReturn<'pendingActions'>>
  actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) => Promise<CallReturn<'actionId'>>
  actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) => Promise<CallReturn<'actionTimeLock'>>
  expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) => Promise<CallReturn<'expiration'>>
  actionType: (...args: ExtractArgs<Contract['calls']['actionType']>) => Promise<CallReturn<'actionType'>>
  pendingUserWalletConfig: (
    ...args: ExtractArgs<Contract['calls']['pendingUserWalletConfig']>
  ) => Promise<CallReturn<'pendingUserWalletConfig'>>
  pendingAssetConfig: (
    ...args: ExtractArgs<Contract['calls']['pendingAssetConfig']>
  ) => Promise<CallReturn<'pendingAssetConfig'>>
  pendingAgentConfig: (
    ...args: ExtractArgs<Contract['calls']['pendingAgentConfig']>
  ) => Promise<CallReturn<'pendingAgentConfig'>>
  pendingManagerConfig: (
    ...args: ExtractArgs<Contract['calls']['pendingManagerConfig']>
  ) => Promise<CallReturn<'pendingManagerConfig'>>
  pendingPayeeConfig: (
    ...args: ExtractArgs<Contract['calls']['pendingPayeeConfig']>
  ) => Promise<CallReturn<'pendingPayeeConfig'>>
  pendingAddrToBool: (
    ...args: ExtractArgs<Contract['calls']['pendingAddrToBool']>
  ) => Promise<CallReturn<'pendingAddrToBool'>>
  startGovernanceChange: (...args: ExtractArgs<Contract['mutations']['startGovernanceChange']>) => Promise<Address>
  confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) => Promise<Address>
  cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) => Promise<Address>
  relinquishGov: (...args: ExtractArgs<Contract['mutations']['relinquishGov']>) => Promise<Address>
  setGovTimeLock: (...args: ExtractArgs<Contract['mutations']['setGovTimeLock']>) => Promise<Address>
  finishUndyHqSetup: (...args: ExtractArgs<Contract['mutations']['finishUndyHqSetup']>) => Promise<Address>
  setActionTimeLock: (...args: ExtractArgs<Contract['mutations']['setActionTimeLock']>) => Promise<Address>
  setExpiration: (...args: ExtractArgs<Contract['mutations']['setExpiration']>) => Promise<Address>
  setActionTimeLockAfterSetup: (
    ...args: ExtractArgs<Contract['mutations']['setActionTimeLockAfterSetup']>
  ) => Promise<Address>
  setUserWalletTemplates: (...args: ExtractArgs<Contract['mutations']['setUserWalletTemplates']>) => Promise<Address>
  setTrialFunds: (...args: ExtractArgs<Contract['mutations']['setTrialFunds']>) => Promise<Address>
  setWalletCreationLimits: (...args: ExtractArgs<Contract['mutations']['setWalletCreationLimits']>) => Promise<Address>
  setKeyActionTimelockBounds: (
    ...args: ExtractArgs<Contract['mutations']['setKeyActionTimelockBounds']>
  ) => Promise<Address>
  setDefaultStaleBlocks: (...args: ExtractArgs<Contract['mutations']['setDefaultStaleBlocks']>) => Promise<Address>
  setTxFees: (...args: ExtractArgs<Contract['mutations']['setTxFees']>) => Promise<Address>
  setAmbassadorRevShare: (...args: ExtractArgs<Contract['mutations']['setAmbassadorRevShare']>) => Promise<Address>
  setDefaultYieldParams: (...args: ExtractArgs<Contract['mutations']['setDefaultYieldParams']>) => Promise<Address>
  setLootParams: (...args: ExtractArgs<Contract['mutations']['setLootParams']>) => Promise<Address>
  setAssetConfig: (...args: ExtractArgs<Contract['mutations']['setAssetConfig']>) => Promise<Address>
  setIsStablecoin: (...args: ExtractArgs<Contract['mutations']['setIsStablecoin']>) => Promise<Address>
  setAgentTemplate: (...args: ExtractArgs<Contract['mutations']['setAgentTemplate']>) => Promise<Address>
  setAgentCreationLimits: (...args: ExtractArgs<Contract['mutations']['setAgentCreationLimits']>) => Promise<Address>
  setStarterAgentParams: (...args: ExtractArgs<Contract['mutations']['setStarterAgentParams']>) => Promise<Address>
  setManagerConfig: (...args: ExtractArgs<Contract['mutations']['setManagerConfig']>) => Promise<Address>
  setPayeeConfig: (...args: ExtractArgs<Contract['mutations']['setPayeeConfig']>) => Promise<Address>
  setCanPerformSecurityAction: (
    ...args: ExtractArgs<Contract['mutations']['setCanPerformSecurityAction']>
  ) => Promise<Address>
  setCreatorWhitelist: (...args: ExtractArgs<Contract['mutations']['setCreatorWhitelist']>) => Promise<Address>
  setLockedSigner: (...args: ExtractArgs<Contract['mutations']['setLockedSigner']>) => Promise<Address>
  setRipeLockDuration: (...args: ExtractArgs<Contract['mutations']['setRipeLockDuration']>) => Promise<Address>
  executePendingAction: (...args: ExtractArgs<Contract['mutations']['executePendingAction']>) => Promise<Address>
  cancelPendingAction: (...args: ExtractArgs<Contract['mutations']['cancelPendingAction']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) =>
      singleQuery(publicClient!, call.getAddys(...args)) as Promise<CallReturn<'getAddys'>>,
    getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) =>
      singleQuery(publicClient!, call.getUndyHq(...args)) as Promise<CallReturn<'getUndyHq'>>,
    getUndyHqFromGov: (...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>) =>
      singleQuery(publicClient!, call.getUndyHqFromGov(...args)) as Promise<CallReturn<'getUndyHqFromGov'>>,
    canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) =>
      singleQuery(publicClient!, call.canGovern(...args)) as Promise<CallReturn<'canGovern'>>,
    getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) =>
      singleQuery(publicClient!, call.getGovernors(...args)) as Promise<CallReturn<'getGovernors'>>,
    hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
      singleQuery(publicClient!, call.hasPendingGovChange(...args)) as Promise<CallReturn<'hasPendingGovChange'>>,
    isValidGovTimeLock: (...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>) =>
      singleQuery(publicClient!, call.isValidGovTimeLock(...args)) as Promise<CallReturn<'isValidGovTimeLock'>>,
    minGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>) =>
      singleQuery(publicClient!, call.minGovChangeTimeLock(...args)) as Promise<CallReturn<'minGovChangeTimeLock'>>,
    maxGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>) =>
      singleQuery(publicClient!, call.maxGovChangeTimeLock(...args)) as Promise<CallReturn<'maxGovChangeTimeLock'>>,
    governance: (...args: ExtractArgs<Contract['calls']['governance']>) =>
      singleQuery(publicClient!, call.governance(...args)) as Promise<CallReturn<'governance'>>,
    pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) =>
      singleQuery(publicClient!, call.pendingGov(...args)) as Promise<CallReturn<'pendingGov'>>,
    numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) =>
      singleQuery(publicClient!, call.numGovChanges(...args)) as Promise<CallReturn<'numGovChanges'>>,
    govChangeTimeLock: (...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>) =>
      singleQuery(publicClient!, call.govChangeTimeLock(...args)) as Promise<CallReturn<'govChangeTimeLock'>>,
    canConfirmAction: (...args: ExtractArgs<Contract['calls']['canConfirmAction']>) =>
      singleQuery(publicClient!, call.canConfirmAction(...args)) as Promise<CallReturn<'canConfirmAction'>>,
    isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) =>
      singleQuery(publicClient!, call.isExpired(...args)) as Promise<CallReturn<'isExpired'>>,
    hasPendingAction: (...args: ExtractArgs<Contract['calls']['hasPendingAction']>) =>
      singleQuery(publicClient!, call.hasPendingAction(...args)) as Promise<CallReturn<'hasPendingAction'>>,
    getActionConfirmationBlock: (...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>) =>
      singleQuery(publicClient!, call.getActionConfirmationBlock(...args)) as Promise<
        CallReturn<'getActionConfirmationBlock'>
      >,
    isValidActionTimeLock: (...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>) =>
      singleQuery(publicClient!, call.isValidActionTimeLock(...args)) as Promise<CallReturn<'isValidActionTimeLock'>>,
    minActionTimeLock: (...args: ExtractArgs<Contract['calls']['minActionTimeLock']>) =>
      singleQuery(publicClient!, call.minActionTimeLock(...args)) as Promise<CallReturn<'minActionTimeLock'>>,
    maxActionTimeLock: (...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>) =>
      singleQuery(publicClient!, call.maxActionTimeLock(...args)) as Promise<CallReturn<'maxActionTimeLock'>>,
    pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) =>
      singleQuery(publicClient!, call.pendingActions(...args)) as Promise<CallReturn<'pendingActions'>>,
    actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) =>
      singleQuery(publicClient!, call.actionId(...args)) as Promise<CallReturn<'actionId'>>,
    actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) =>
      singleQuery(publicClient!, call.actionTimeLock(...args)) as Promise<CallReturn<'actionTimeLock'>>,
    expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) =>
      singleQuery(publicClient!, call.expiration(...args)) as Promise<CallReturn<'expiration'>>,
    actionType: (...args: ExtractArgs<Contract['calls']['actionType']>) =>
      singleQuery(publicClient!, call.actionType(...args)) as Promise<CallReturn<'actionType'>>,
    pendingUserWalletConfig: (...args: ExtractArgs<Contract['calls']['pendingUserWalletConfig']>) =>
      singleQuery(publicClient!, call.pendingUserWalletConfig(...args)) as Promise<
        CallReturn<'pendingUserWalletConfig'>
      >,
    pendingAssetConfig: (...args: ExtractArgs<Contract['calls']['pendingAssetConfig']>) =>
      singleQuery(publicClient!, call.pendingAssetConfig(...args)) as Promise<CallReturn<'pendingAssetConfig'>>,
    pendingAgentConfig: (...args: ExtractArgs<Contract['calls']['pendingAgentConfig']>) =>
      singleQuery(publicClient!, call.pendingAgentConfig(...args)) as Promise<CallReturn<'pendingAgentConfig'>>,
    pendingManagerConfig: (...args: ExtractArgs<Contract['calls']['pendingManagerConfig']>) =>
      singleQuery(publicClient!, call.pendingManagerConfig(...args)) as Promise<CallReturn<'pendingManagerConfig'>>,
    pendingPayeeConfig: (...args: ExtractArgs<Contract['calls']['pendingPayeeConfig']>) =>
      singleQuery(publicClient!, call.pendingPayeeConfig(...args)) as Promise<CallReturn<'pendingPayeeConfig'>>,
    pendingAddrToBool: (...args: ExtractArgs<Contract['calls']['pendingAddrToBool']>) =>
      singleQuery(publicClient!, call.pendingAddrToBool(...args)) as Promise<CallReturn<'pendingAddrToBool'>>,

    // Mutations
    startGovernanceChange: (...args: ExtractArgs<Contract['mutations']['startGovernanceChange']>) =>
      mutate(walletClient!, mutation.startGovernanceChange)(...args),
    confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) =>
      mutate(walletClient!, mutation.confirmGovernanceChange)(...args),
    cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) =>
      mutate(walletClient!, mutation.cancelGovernanceChange)(...args),
    relinquishGov: (...args: ExtractArgs<Contract['mutations']['relinquishGov']>) =>
      mutate(walletClient!, mutation.relinquishGov)(...args),
    setGovTimeLock: (...args: ExtractArgs<Contract['mutations']['setGovTimeLock']>) =>
      mutate(walletClient!, mutation.setGovTimeLock)(...args),
    finishUndyHqSetup: (...args: ExtractArgs<Contract['mutations']['finishUndyHqSetup']>) =>
      mutate(walletClient!, mutation.finishUndyHqSetup)(...args),
    setActionTimeLock: (...args: ExtractArgs<Contract['mutations']['setActionTimeLock']>) =>
      mutate(walletClient!, mutation.setActionTimeLock)(...args),
    setExpiration: (...args: ExtractArgs<Contract['mutations']['setExpiration']>) =>
      mutate(walletClient!, mutation.setExpiration)(...args),
    setActionTimeLockAfterSetup: (...args: ExtractArgs<Contract['mutations']['setActionTimeLockAfterSetup']>) =>
      mutate(walletClient!, mutation.setActionTimeLockAfterSetup)(...args),
    setUserWalletTemplates: (...args: ExtractArgs<Contract['mutations']['setUserWalletTemplates']>) =>
      mutate(walletClient!, mutation.setUserWalletTemplates)(...args),
    setTrialFunds: (...args: ExtractArgs<Contract['mutations']['setTrialFunds']>) =>
      mutate(walletClient!, mutation.setTrialFunds)(...args),
    setWalletCreationLimits: (...args: ExtractArgs<Contract['mutations']['setWalletCreationLimits']>) =>
      mutate(walletClient!, mutation.setWalletCreationLimits)(...args),
    setKeyActionTimelockBounds: (...args: ExtractArgs<Contract['mutations']['setKeyActionTimelockBounds']>) =>
      mutate(walletClient!, mutation.setKeyActionTimelockBounds)(...args),
    setDefaultStaleBlocks: (...args: ExtractArgs<Contract['mutations']['setDefaultStaleBlocks']>) =>
      mutate(walletClient!, mutation.setDefaultStaleBlocks)(...args),
    setTxFees: (...args: ExtractArgs<Contract['mutations']['setTxFees']>) =>
      mutate(walletClient!, mutation.setTxFees)(...args),
    setAmbassadorRevShare: (...args: ExtractArgs<Contract['mutations']['setAmbassadorRevShare']>) =>
      mutate(walletClient!, mutation.setAmbassadorRevShare)(...args),
    setDefaultYieldParams: (...args: ExtractArgs<Contract['mutations']['setDefaultYieldParams']>) =>
      mutate(walletClient!, mutation.setDefaultYieldParams)(...args),
    setLootParams: (...args: ExtractArgs<Contract['mutations']['setLootParams']>) =>
      mutate(walletClient!, mutation.setLootParams)(...args),
    setAssetConfig: (...args: ExtractArgs<Contract['mutations']['setAssetConfig']>) =>
      mutate(walletClient!, mutation.setAssetConfig)(...args),
    setIsStablecoin: (...args: ExtractArgs<Contract['mutations']['setIsStablecoin']>) =>
      mutate(walletClient!, mutation.setIsStablecoin)(...args),
    setAgentTemplate: (...args: ExtractArgs<Contract['mutations']['setAgentTemplate']>) =>
      mutate(walletClient!, mutation.setAgentTemplate)(...args),
    setAgentCreationLimits: (...args: ExtractArgs<Contract['mutations']['setAgentCreationLimits']>) =>
      mutate(walletClient!, mutation.setAgentCreationLimits)(...args),
    setStarterAgentParams: (...args: ExtractArgs<Contract['mutations']['setStarterAgentParams']>) =>
      mutate(walletClient!, mutation.setStarterAgentParams)(...args),
    setManagerConfig: (...args: ExtractArgs<Contract['mutations']['setManagerConfig']>) =>
      mutate(walletClient!, mutation.setManagerConfig)(...args),
    setPayeeConfig: (...args: ExtractArgs<Contract['mutations']['setPayeeConfig']>) =>
      mutate(walletClient!, mutation.setPayeeConfig)(...args),
    setCanPerformSecurityAction: (...args: ExtractArgs<Contract['mutations']['setCanPerformSecurityAction']>) =>
      mutate(walletClient!, mutation.setCanPerformSecurityAction)(...args),
    setCreatorWhitelist: (...args: ExtractArgs<Contract['mutations']['setCreatorWhitelist']>) =>
      mutate(walletClient!, mutation.setCreatorWhitelist)(...args),
    setLockedSigner: (...args: ExtractArgs<Contract['mutations']['setLockedSigner']>) =>
      mutate(walletClient!, mutation.setLockedSigner)(...args),
    setRipeLockDuration: (...args: ExtractArgs<Contract['mutations']['setRipeLockDuration']>) =>
      mutate(walletClient!, mutation.setRipeLockDuration)(...args),
    executePendingAction: (...args: ExtractArgs<Contract['mutations']['executePendingAction']>) =>
      mutate(walletClient!, mutation.executePendingAction)(...args),
    cancelPendingAction: (...args: ExtractArgs<Contract['mutations']['cancelPendingAction']>) =>
      mutate(walletClient!, mutation.cancelPendingAction)(...args),
  }
}
