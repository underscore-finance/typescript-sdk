/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'PendingBackpackItemAdded',
    inputs: [
      {
        name: 'backpackType',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addedBy',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'BackpackItemConfirmed',
    inputs: [
      {
        name: 'backpackType',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmedBy',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingBackpackItemCancelled',
    inputs: [
      {
        name: 'backpackType',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'cancelledBy',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeTimeLockModified',
    inputs: [
      {
        name: 'prevTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newTimeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ExpirationSet',
    inputs: [
      {
        name: 'expiration',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ActionTimeLockSet',
    inputs: [
      {
        name: 'newTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'prevTimeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeStarted',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeConfirmed',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeCancelled',
    inputs: [
      {
        name: 'cancelledGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovRelinquished',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'UndyHqSetupFinished',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'timeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepartmentPauseModified',
    inputs: [
      {
        name: 'isPaused',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepartmentFundsRecovered',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'balance',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHqFromGov',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canGovern',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getGovernors',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasPendingGovChange',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'startGovernanceChange',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmGovernanceChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelGovernanceChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'relinquishGov',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setGovTimeLock',
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidGovTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'minGovChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxGovChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'finishUndyHqSetup',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'finishUndyHqSetup',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
      {
        name: '_timeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'governance',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingGov',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'newGov',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'numGovChanges',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'govChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddys',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'hq',
            type: 'address',
          },
          {
            name: 'undyToken',
            type: 'address',
          },
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'switchboard',
            type: 'address',
          },
          {
            name: 'hatchery',
            type: 'address',
          },
          {
            name: 'lootDistributor',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
          {
            name: 'walletBackpack',
            type: 'address',
          },
          {
            name: 'billing',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHq',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canMintUndy',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'pause',
    inputs: [
      {
        name: '_shouldPause',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFundsMany',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isPaused',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canConfirmAction',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isExpired',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasPendingAction',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getActionConfirmationBlock',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidActionTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'minActionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxActionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setExpiration',
    inputs: [
      {
        name: '_expiration',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLockAfterSetup',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLockAfterSetup',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingActions',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'actionId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'actionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'expiration',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPendingKernel',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPendingSentinel',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPendingHighCommand',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPendingPaymaster',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPendingChequeBook',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPendingMigrator',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canAddBackpackItem',
    inputs: [
      {
        name: '_backpackType',
        type: 'uint256',
      },
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmPendingKernel',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmPendingSentinel',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmPendingHighCommand',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmPendingPaymaster',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmPendingChequeBook',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmPendingMigrator',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelPendingKernel',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelPendingSentinel',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelPendingHighCommand',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelPendingPaymaster',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelPendingChequeBook',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelPendingMigrator',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isRegisteredBackpackItem',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'kernel',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'sentinel',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'highCommand',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'paymaster',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'chequeBook',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'migrator',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingUpdates',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'actionId',
            type: 'uint256',
          },
          {
            name: 'addr',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_tempGov',
        type: 'address',
      },
      {
        name: '_minTimeLock',
        type: 'uint256',
      },
      {
        name: '_maxTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0x0E8D974Cdea08BcAa43421A15B7947Ec901f5CcD'

export type Contract = {
  calls: {
    getUndyHqFromGov: () => Promise<`0x${string}`>
    canGovern: (addr: `0x${string}`) => Promise<boolean>
    getGovernors: () => Promise<`0x${string}`[]>
    hasPendingGovChange: () => Promise<boolean>
    isValidGovTimeLock: (newTimeLock: bigint) => Promise<boolean>
    minGovChangeTimeLock: () => Promise<bigint>
    maxGovChangeTimeLock: () => Promise<bigint>
    governance: () => Promise<`0x${string}`>
    pendingGov: () => Promise<{ newGov: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    numGovChanges: () => Promise<bigint>
    govChangeTimeLock: () => Promise<bigint>
    getAddys: () => Promise<{
      hq: `0x${string}`
      undyToken: `0x${string}`
      ledger: `0x${string}`
      missionControl: `0x${string}`
      legoBook: `0x${string}`
      switchboard: `0x${string}`
      hatchery: `0x${string}`
      lootDistributor: `0x${string}`
      appraiser: `0x${string}`
      walletBackpack: `0x${string}`
      billing: `0x${string}`
    }>
    getUndyHq: () => Promise<`0x${string}`>
    canMintUndy: () => Promise<boolean>
    isPaused: () => Promise<boolean>
    canConfirmAction: (actionId: bigint) => Promise<boolean>
    isExpired: (actionId: bigint) => Promise<boolean>
    hasPendingAction: (actionId: bigint) => Promise<boolean>
    getActionConfirmationBlock: (actionId: bigint) => Promise<bigint>
    isValidActionTimeLock: (newTimeLock: bigint) => Promise<boolean>
    minActionTimeLock: () => Promise<bigint>
    maxActionTimeLock: () => Promise<bigint>
    pendingActions: (arg0: bigint) => Promise<{ initiatedBlock: bigint; confirmBlock: bigint; expiration: bigint }>
    actionId: () => Promise<bigint>
    actionTimeLock: () => Promise<bigint>
    expiration: () => Promise<bigint>
    canAddBackpackItem: (backpackType: bigint, addr: `0x${string}`) => Promise<boolean>
    isRegisteredBackpackItem: (addr: `0x${string}`) => Promise<boolean>
    kernel: () => Promise<`0x${string}`>
    sentinel: () => Promise<`0x${string}`>
    highCommand: () => Promise<`0x${string}`>
    paymaster: () => Promise<`0x${string}`>
    chequeBook: () => Promise<`0x${string}`>
    migrator: () => Promise<`0x${string}`>
    pendingUpdates: (arg0: bigint) => Promise<{ actionId: bigint; addr: `0x${string}` }>
  }
  mutations: {
    startGovernanceChange: (newGov: `0x${string}`) => Promise<void>
    confirmGovernanceChange: () => Promise<void>
    cancelGovernanceChange: () => Promise<void>
    relinquishGov: () => Promise<void>
    setGovTimeLock: (numBlocks: bigint) => Promise<boolean>
    finishUndyHqSetup: (newGov: `0x${string}`, timeLock?: bigint) => Promise<boolean>
    pause: (shouldPause: boolean) => Promise<void>
    recoverFunds: (recipient: `0x${string}`, asset: `0x${string}`) => Promise<void>
    recoverFundsMany: (recipient: `0x${string}`, assets: `0x${string}`[]) => Promise<void>
    setActionTimeLock: (newTimeLock: bigint) => Promise<boolean>
    setExpiration: (expiration: bigint) => Promise<boolean>
    setActionTimeLockAfterSetup: (newTimeLock?: bigint) => Promise<boolean>
    addPendingKernel: (addr: `0x${string}`) => Promise<boolean>
    addPendingSentinel: (addr: `0x${string}`) => Promise<boolean>
    addPendingHighCommand: (addr: `0x${string}`) => Promise<boolean>
    addPendingPaymaster: (addr: `0x${string}`) => Promise<boolean>
    addPendingChequeBook: (addr: `0x${string}`) => Promise<boolean>
    addPendingMigrator: (addr: `0x${string}`) => Promise<boolean>
    confirmPendingKernel: () => Promise<boolean>
    confirmPendingSentinel: () => Promise<boolean>
    confirmPendingHighCommand: () => Promise<boolean>
    confirmPendingPaymaster: () => Promise<boolean>
    confirmPendingChequeBook: () => Promise<boolean>
    confirmPendingMigrator: () => Promise<boolean>
    cancelPendingKernel: () => Promise<boolean>
    cancelPendingSentinel: () => Promise<boolean>
    cancelPendingHighCommand: () => Promise<boolean>
    cancelPendingPaymaster: () => Promise<boolean>
    cancelPendingChequeBook: () => Promise<boolean>
    cancelPendingMigrator: () => Promise<boolean>
  }
  events: {
    PendingBackpackItemAdded: (
      backpackType: bigint,
      addr: `0x${string}`,
      actionId: bigint,
      confirmationBlock: bigint,
      addedBy: `0x${string}`,
    ) => Promise<void>
    BackpackItemConfirmed: (
      backpackType: bigint,
      addr: `0x${string}`,
      actionId: bigint,
      confirmedBy: `0x${string}`,
    ) => Promise<void>
    PendingBackpackItemCancelled: (
      backpackType: bigint,
      addr: `0x${string}`,
      actionId: bigint,
      cancelledBy: `0x${string}`,
    ) => Promise<void>
    GovChangeTimeLockModified: (prevTimeLock: bigint, newTimeLock: bigint) => Promise<void>
    ExpirationSet: (expiration: bigint) => Promise<void>
    ActionTimeLockSet: (newTimeLock: bigint, prevTimeLock: bigint) => Promise<void>
    GovChangeStarted: (prevGov: `0x${string}`, newGov: `0x${string}`, confirmBlock: bigint) => Promise<void>
    GovChangeConfirmed: (
      prevGov: `0x${string}`,
      newGov: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    GovChangeCancelled: (cancelledGov: `0x${string}`, initiatedBlock: bigint, confirmBlock: bigint) => Promise<void>
    GovRelinquished: (prevGov: `0x${string}`) => Promise<void>
    UndyHqSetupFinished: (prevGov: `0x${string}`, newGov: `0x${string}`, timeLock: bigint) => Promise<void>
    DepartmentPauseModified: (isPaused: boolean) => Promise<void>
    DepartmentFundsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, balance: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'WalletBackpack'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'WalletBackpack' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getUndyHqFromGov: (...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>) =>
    getRequest('getUndyHqFromGov', args),
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => getRequest('canGovern', args),
  getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) => getRequest('getGovernors', args),
  hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
    getRequest('hasPendingGovChange', args),
  isValidGovTimeLock: (...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>) =>
    getRequest('isValidGovTimeLock', args),
  minGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>) =>
    getRequest('minGovChangeTimeLock', args),
  maxGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>) =>
    getRequest('maxGovChangeTimeLock', args),
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => getRequest('governance', args),
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => getRequest('pendingGov', args),
  numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) => getRequest('numGovChanges', args),
  govChangeTimeLock: (...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>) =>
    getRequest('govChangeTimeLock', args),
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => getRequest('getAddys', args),
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => getRequest('getUndyHq', args),
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => getRequest('canMintUndy', args),
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => getRequest('isPaused', args),
  canConfirmAction: (...args: ExtractArgs<Contract['calls']['canConfirmAction']>) =>
    getRequest('canConfirmAction', args),
  isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) => getRequest('isExpired', args),
  hasPendingAction: (...args: ExtractArgs<Contract['calls']['hasPendingAction']>) =>
    getRequest('hasPendingAction', args),
  getActionConfirmationBlock: (...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>) =>
    getRequest('getActionConfirmationBlock', args),
  isValidActionTimeLock: (...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>) =>
    getRequest('isValidActionTimeLock', args),
  minActionTimeLock: (...args: ExtractArgs<Contract['calls']['minActionTimeLock']>) =>
    getRequest('minActionTimeLock', args),
  maxActionTimeLock: (...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>) =>
    getRequest('maxActionTimeLock', args),
  pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) => getRequest('pendingActions', args),
  actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) => getRequest('actionId', args),
  actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) => getRequest('actionTimeLock', args),
  expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) => getRequest('expiration', args),
  canAddBackpackItem: (...args: ExtractArgs<Contract['calls']['canAddBackpackItem']>) =>
    getRequest('canAddBackpackItem', args),
  isRegisteredBackpackItem: (...args: ExtractArgs<Contract['calls']['isRegisteredBackpackItem']>) =>
    getRequest('isRegisteredBackpackItem', args),
  kernel: (...args: ExtractArgs<Contract['calls']['kernel']>) => getRequest('kernel', args),
  sentinel: (...args: ExtractArgs<Contract['calls']['sentinel']>) => getRequest('sentinel', args),
  highCommand: (...args: ExtractArgs<Contract['calls']['highCommand']>) => getRequest('highCommand', args),
  paymaster: (...args: ExtractArgs<Contract['calls']['paymaster']>) => getRequest('paymaster', args),
  chequeBook: (...args: ExtractArgs<Contract['calls']['chequeBook']>) => getRequest('chequeBook', args),
  migrator: (...args: ExtractArgs<Contract['calls']['migrator']>) => getRequest('migrator', args),
  pendingUpdates: (...args: ExtractArgs<Contract['calls']['pendingUpdates']>) => getRequest('pendingUpdates', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'WalletBackpack' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'WalletBackpack'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  startGovernanceChange: getMutation('startGovernanceChange'),
  confirmGovernanceChange: getMutation('confirmGovernanceChange'),
  cancelGovernanceChange: getMutation('cancelGovernanceChange'),
  relinquishGov: getMutation('relinquishGov'),
  setGovTimeLock: getMutation('setGovTimeLock'),
  finishUndyHqSetup: getMutation('finishUndyHqSetup'),
  pause: getMutation('pause'),
  recoverFunds: getMutation('recoverFunds'),
  recoverFundsMany: getMutation('recoverFundsMany'),
  setActionTimeLock: getMutation('setActionTimeLock'),
  setExpiration: getMutation('setExpiration'),
  setActionTimeLockAfterSetup: getMutation('setActionTimeLockAfterSetup'),
  addPendingKernel: getMutation('addPendingKernel'),
  addPendingSentinel: getMutation('addPendingSentinel'),
  addPendingHighCommand: getMutation('addPendingHighCommand'),
  addPendingPaymaster: getMutation('addPendingPaymaster'),
  addPendingChequeBook: getMutation('addPendingChequeBook'),
  addPendingMigrator: getMutation('addPendingMigrator'),
  confirmPendingKernel: getMutation('confirmPendingKernel'),
  confirmPendingSentinel: getMutation('confirmPendingSentinel'),
  confirmPendingHighCommand: getMutation('confirmPendingHighCommand'),
  confirmPendingPaymaster: getMutation('confirmPendingPaymaster'),
  confirmPendingChequeBook: getMutation('confirmPendingChequeBook'),
  confirmPendingMigrator: getMutation('confirmPendingMigrator'),
  cancelPendingKernel: getMutation('cancelPendingKernel'),
  cancelPendingSentinel: getMutation('cancelPendingSentinel'),
  cancelPendingHighCommand: getMutation('cancelPendingHighCommand'),
  cancelPendingPaymaster: getMutation('cancelPendingPaymaster'),
  cancelPendingChequeBook: getMutation('cancelPendingChequeBook'),
  cancelPendingMigrator: getMutation('cancelPendingMigrator'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getUndyHqFromGov: (
    ...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>
  ) => Promise<CallReturn<'getUndyHqFromGov'>>
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => Promise<CallReturn<'canGovern'>>
  getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) => Promise<CallReturn<'getGovernors'>>
  hasPendingGovChange: (
    ...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>
  ) => Promise<CallReturn<'hasPendingGovChange'>>
  isValidGovTimeLock: (
    ...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>
  ) => Promise<CallReturn<'isValidGovTimeLock'>>
  minGovChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>
  ) => Promise<CallReturn<'minGovChangeTimeLock'>>
  maxGovChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>
  ) => Promise<CallReturn<'maxGovChangeTimeLock'>>
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => Promise<CallReturn<'governance'>>
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => Promise<CallReturn<'pendingGov'>>
  numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) => Promise<CallReturn<'numGovChanges'>>
  govChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>
  ) => Promise<CallReturn<'govChangeTimeLock'>>
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => Promise<CallReturn<'getAddys'>>
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => Promise<CallReturn<'getUndyHq'>>
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => Promise<CallReturn<'canMintUndy'>>
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => Promise<CallReturn<'isPaused'>>
  canConfirmAction: (
    ...args: ExtractArgs<Contract['calls']['canConfirmAction']>
  ) => Promise<CallReturn<'canConfirmAction'>>
  isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) => Promise<CallReturn<'isExpired'>>
  hasPendingAction: (
    ...args: ExtractArgs<Contract['calls']['hasPendingAction']>
  ) => Promise<CallReturn<'hasPendingAction'>>
  getActionConfirmationBlock: (
    ...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>
  ) => Promise<CallReturn<'getActionConfirmationBlock'>>
  isValidActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>
  ) => Promise<CallReturn<'isValidActionTimeLock'>>
  minActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['minActionTimeLock']>
  ) => Promise<CallReturn<'minActionTimeLock'>>
  maxActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>
  ) => Promise<CallReturn<'maxActionTimeLock'>>
  pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) => Promise<CallReturn<'pendingActions'>>
  actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) => Promise<CallReturn<'actionId'>>
  actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) => Promise<CallReturn<'actionTimeLock'>>
  expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) => Promise<CallReturn<'expiration'>>
  canAddBackpackItem: (
    ...args: ExtractArgs<Contract['calls']['canAddBackpackItem']>
  ) => Promise<CallReturn<'canAddBackpackItem'>>
  isRegisteredBackpackItem: (
    ...args: ExtractArgs<Contract['calls']['isRegisteredBackpackItem']>
  ) => Promise<CallReturn<'isRegisteredBackpackItem'>>
  kernel: (...args: ExtractArgs<Contract['calls']['kernel']>) => Promise<CallReturn<'kernel'>>
  sentinel: (...args: ExtractArgs<Contract['calls']['sentinel']>) => Promise<CallReturn<'sentinel'>>
  highCommand: (...args: ExtractArgs<Contract['calls']['highCommand']>) => Promise<CallReturn<'highCommand'>>
  paymaster: (...args: ExtractArgs<Contract['calls']['paymaster']>) => Promise<CallReturn<'paymaster'>>
  chequeBook: (...args: ExtractArgs<Contract['calls']['chequeBook']>) => Promise<CallReturn<'chequeBook'>>
  migrator: (...args: ExtractArgs<Contract['calls']['migrator']>) => Promise<CallReturn<'migrator'>>
  pendingUpdates: (...args: ExtractArgs<Contract['calls']['pendingUpdates']>) => Promise<CallReturn<'pendingUpdates'>>
  startGovernanceChange: (...args: ExtractArgs<Contract['mutations']['startGovernanceChange']>) => Promise<Address>
  confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) => Promise<Address>
  cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) => Promise<Address>
  relinquishGov: (...args: ExtractArgs<Contract['mutations']['relinquishGov']>) => Promise<Address>
  setGovTimeLock: (...args: ExtractArgs<Contract['mutations']['setGovTimeLock']>) => Promise<Address>
  finishUndyHqSetup: (...args: ExtractArgs<Contract['mutations']['finishUndyHqSetup']>) => Promise<Address>
  pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => Promise<Address>
  recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) => Promise<Address>
  recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) => Promise<Address>
  setActionTimeLock: (...args: ExtractArgs<Contract['mutations']['setActionTimeLock']>) => Promise<Address>
  setExpiration: (...args: ExtractArgs<Contract['mutations']['setExpiration']>) => Promise<Address>
  setActionTimeLockAfterSetup: (
    ...args: ExtractArgs<Contract['mutations']['setActionTimeLockAfterSetup']>
  ) => Promise<Address>
  addPendingKernel: (...args: ExtractArgs<Contract['mutations']['addPendingKernel']>) => Promise<Address>
  addPendingSentinel: (...args: ExtractArgs<Contract['mutations']['addPendingSentinel']>) => Promise<Address>
  addPendingHighCommand: (...args: ExtractArgs<Contract['mutations']['addPendingHighCommand']>) => Promise<Address>
  addPendingPaymaster: (...args: ExtractArgs<Contract['mutations']['addPendingPaymaster']>) => Promise<Address>
  addPendingChequeBook: (...args: ExtractArgs<Contract['mutations']['addPendingChequeBook']>) => Promise<Address>
  addPendingMigrator: (...args: ExtractArgs<Contract['mutations']['addPendingMigrator']>) => Promise<Address>
  confirmPendingKernel: (...args: ExtractArgs<Contract['mutations']['confirmPendingKernel']>) => Promise<Address>
  confirmPendingSentinel: (...args: ExtractArgs<Contract['mutations']['confirmPendingSentinel']>) => Promise<Address>
  confirmPendingHighCommand: (
    ...args: ExtractArgs<Contract['mutations']['confirmPendingHighCommand']>
  ) => Promise<Address>
  confirmPendingPaymaster: (...args: ExtractArgs<Contract['mutations']['confirmPendingPaymaster']>) => Promise<Address>
  confirmPendingChequeBook: (
    ...args: ExtractArgs<Contract['mutations']['confirmPendingChequeBook']>
  ) => Promise<Address>
  confirmPendingMigrator: (...args: ExtractArgs<Contract['mutations']['confirmPendingMigrator']>) => Promise<Address>
  cancelPendingKernel: (...args: ExtractArgs<Contract['mutations']['cancelPendingKernel']>) => Promise<Address>
  cancelPendingSentinel: (...args: ExtractArgs<Contract['mutations']['cancelPendingSentinel']>) => Promise<Address>
  cancelPendingHighCommand: (
    ...args: ExtractArgs<Contract['mutations']['cancelPendingHighCommand']>
  ) => Promise<Address>
  cancelPendingPaymaster: (...args: ExtractArgs<Contract['mutations']['cancelPendingPaymaster']>) => Promise<Address>
  cancelPendingChequeBook: (...args: ExtractArgs<Contract['mutations']['cancelPendingChequeBook']>) => Promise<Address>
  cancelPendingMigrator: (...args: ExtractArgs<Contract['mutations']['cancelPendingMigrator']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getUndyHqFromGov: (...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>) =>
      singleQuery(publicClient!, call.getUndyHqFromGov(...args)) as Promise<CallReturn<'getUndyHqFromGov'>>,
    canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) =>
      singleQuery(publicClient!, call.canGovern(...args)) as Promise<CallReturn<'canGovern'>>,
    getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) =>
      singleQuery(publicClient!, call.getGovernors(...args)) as Promise<CallReturn<'getGovernors'>>,
    hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
      singleQuery(publicClient!, call.hasPendingGovChange(...args)) as Promise<CallReturn<'hasPendingGovChange'>>,
    isValidGovTimeLock: (...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>) =>
      singleQuery(publicClient!, call.isValidGovTimeLock(...args)) as Promise<CallReturn<'isValidGovTimeLock'>>,
    minGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>) =>
      singleQuery(publicClient!, call.minGovChangeTimeLock(...args)) as Promise<CallReturn<'minGovChangeTimeLock'>>,
    maxGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>) =>
      singleQuery(publicClient!, call.maxGovChangeTimeLock(...args)) as Promise<CallReturn<'maxGovChangeTimeLock'>>,
    governance: (...args: ExtractArgs<Contract['calls']['governance']>) =>
      singleQuery(publicClient!, call.governance(...args)) as Promise<CallReturn<'governance'>>,
    pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) =>
      singleQuery(publicClient!, call.pendingGov(...args)) as Promise<CallReturn<'pendingGov'>>,
    numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) =>
      singleQuery(publicClient!, call.numGovChanges(...args)) as Promise<CallReturn<'numGovChanges'>>,
    govChangeTimeLock: (...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>) =>
      singleQuery(publicClient!, call.govChangeTimeLock(...args)) as Promise<CallReturn<'govChangeTimeLock'>>,
    getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) =>
      singleQuery(publicClient!, call.getAddys(...args)) as Promise<CallReturn<'getAddys'>>,
    getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) =>
      singleQuery(publicClient!, call.getUndyHq(...args)) as Promise<CallReturn<'getUndyHq'>>,
    canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) =>
      singleQuery(publicClient!, call.canMintUndy(...args)) as Promise<CallReturn<'canMintUndy'>>,
    isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) =>
      singleQuery(publicClient!, call.isPaused(...args)) as Promise<CallReturn<'isPaused'>>,
    canConfirmAction: (...args: ExtractArgs<Contract['calls']['canConfirmAction']>) =>
      singleQuery(publicClient!, call.canConfirmAction(...args)) as Promise<CallReturn<'canConfirmAction'>>,
    isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) =>
      singleQuery(publicClient!, call.isExpired(...args)) as Promise<CallReturn<'isExpired'>>,
    hasPendingAction: (...args: ExtractArgs<Contract['calls']['hasPendingAction']>) =>
      singleQuery(publicClient!, call.hasPendingAction(...args)) as Promise<CallReturn<'hasPendingAction'>>,
    getActionConfirmationBlock: (...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>) =>
      singleQuery(publicClient!, call.getActionConfirmationBlock(...args)) as Promise<
        CallReturn<'getActionConfirmationBlock'>
      >,
    isValidActionTimeLock: (...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>) =>
      singleQuery(publicClient!, call.isValidActionTimeLock(...args)) as Promise<CallReturn<'isValidActionTimeLock'>>,
    minActionTimeLock: (...args: ExtractArgs<Contract['calls']['minActionTimeLock']>) =>
      singleQuery(publicClient!, call.minActionTimeLock(...args)) as Promise<CallReturn<'minActionTimeLock'>>,
    maxActionTimeLock: (...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>) =>
      singleQuery(publicClient!, call.maxActionTimeLock(...args)) as Promise<CallReturn<'maxActionTimeLock'>>,
    pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) =>
      singleQuery(publicClient!, call.pendingActions(...args)) as Promise<CallReturn<'pendingActions'>>,
    actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) =>
      singleQuery(publicClient!, call.actionId(...args)) as Promise<CallReturn<'actionId'>>,
    actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) =>
      singleQuery(publicClient!, call.actionTimeLock(...args)) as Promise<CallReturn<'actionTimeLock'>>,
    expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) =>
      singleQuery(publicClient!, call.expiration(...args)) as Promise<CallReturn<'expiration'>>,
    canAddBackpackItem: (...args: ExtractArgs<Contract['calls']['canAddBackpackItem']>) =>
      singleQuery(publicClient!, call.canAddBackpackItem(...args)) as Promise<CallReturn<'canAddBackpackItem'>>,
    isRegisteredBackpackItem: (...args: ExtractArgs<Contract['calls']['isRegisteredBackpackItem']>) =>
      singleQuery(publicClient!, call.isRegisteredBackpackItem(...args)) as Promise<
        CallReturn<'isRegisteredBackpackItem'>
      >,
    kernel: (...args: ExtractArgs<Contract['calls']['kernel']>) =>
      singleQuery(publicClient!, call.kernel(...args)) as Promise<CallReturn<'kernel'>>,
    sentinel: (...args: ExtractArgs<Contract['calls']['sentinel']>) =>
      singleQuery(publicClient!, call.sentinel(...args)) as Promise<CallReturn<'sentinel'>>,
    highCommand: (...args: ExtractArgs<Contract['calls']['highCommand']>) =>
      singleQuery(publicClient!, call.highCommand(...args)) as Promise<CallReturn<'highCommand'>>,
    paymaster: (...args: ExtractArgs<Contract['calls']['paymaster']>) =>
      singleQuery(publicClient!, call.paymaster(...args)) as Promise<CallReturn<'paymaster'>>,
    chequeBook: (...args: ExtractArgs<Contract['calls']['chequeBook']>) =>
      singleQuery(publicClient!, call.chequeBook(...args)) as Promise<CallReturn<'chequeBook'>>,
    migrator: (...args: ExtractArgs<Contract['calls']['migrator']>) =>
      singleQuery(publicClient!, call.migrator(...args)) as Promise<CallReturn<'migrator'>>,
    pendingUpdates: (...args: ExtractArgs<Contract['calls']['pendingUpdates']>) =>
      singleQuery(publicClient!, call.pendingUpdates(...args)) as Promise<CallReturn<'pendingUpdates'>>,

    // Mutations
    startGovernanceChange: (...args: ExtractArgs<Contract['mutations']['startGovernanceChange']>) =>
      mutate(walletClient!, mutation.startGovernanceChange)(...args),
    confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) =>
      mutate(walletClient!, mutation.confirmGovernanceChange)(...args),
    cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) =>
      mutate(walletClient!, mutation.cancelGovernanceChange)(...args),
    relinquishGov: (...args: ExtractArgs<Contract['mutations']['relinquishGov']>) =>
      mutate(walletClient!, mutation.relinquishGov)(...args),
    setGovTimeLock: (...args: ExtractArgs<Contract['mutations']['setGovTimeLock']>) =>
      mutate(walletClient!, mutation.setGovTimeLock)(...args),
    finishUndyHqSetup: (...args: ExtractArgs<Contract['mutations']['finishUndyHqSetup']>) =>
      mutate(walletClient!, mutation.finishUndyHqSetup)(...args),
    pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => mutate(walletClient!, mutation.pause)(...args),
    recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) =>
      mutate(walletClient!, mutation.recoverFunds)(...args),
    recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) =>
      mutate(walletClient!, mutation.recoverFundsMany)(...args),
    setActionTimeLock: (...args: ExtractArgs<Contract['mutations']['setActionTimeLock']>) =>
      mutate(walletClient!, mutation.setActionTimeLock)(...args),
    setExpiration: (...args: ExtractArgs<Contract['mutations']['setExpiration']>) =>
      mutate(walletClient!, mutation.setExpiration)(...args),
    setActionTimeLockAfterSetup: (...args: ExtractArgs<Contract['mutations']['setActionTimeLockAfterSetup']>) =>
      mutate(walletClient!, mutation.setActionTimeLockAfterSetup)(...args),
    addPendingKernel: (...args: ExtractArgs<Contract['mutations']['addPendingKernel']>) =>
      mutate(walletClient!, mutation.addPendingKernel)(...args),
    addPendingSentinel: (...args: ExtractArgs<Contract['mutations']['addPendingSentinel']>) =>
      mutate(walletClient!, mutation.addPendingSentinel)(...args),
    addPendingHighCommand: (...args: ExtractArgs<Contract['mutations']['addPendingHighCommand']>) =>
      mutate(walletClient!, mutation.addPendingHighCommand)(...args),
    addPendingPaymaster: (...args: ExtractArgs<Contract['mutations']['addPendingPaymaster']>) =>
      mutate(walletClient!, mutation.addPendingPaymaster)(...args),
    addPendingChequeBook: (...args: ExtractArgs<Contract['mutations']['addPendingChequeBook']>) =>
      mutate(walletClient!, mutation.addPendingChequeBook)(...args),
    addPendingMigrator: (...args: ExtractArgs<Contract['mutations']['addPendingMigrator']>) =>
      mutate(walletClient!, mutation.addPendingMigrator)(...args),
    confirmPendingKernel: (...args: ExtractArgs<Contract['mutations']['confirmPendingKernel']>) =>
      mutate(walletClient!, mutation.confirmPendingKernel)(...args),
    confirmPendingSentinel: (...args: ExtractArgs<Contract['mutations']['confirmPendingSentinel']>) =>
      mutate(walletClient!, mutation.confirmPendingSentinel)(...args),
    confirmPendingHighCommand: (...args: ExtractArgs<Contract['mutations']['confirmPendingHighCommand']>) =>
      mutate(walletClient!, mutation.confirmPendingHighCommand)(...args),
    confirmPendingPaymaster: (...args: ExtractArgs<Contract['mutations']['confirmPendingPaymaster']>) =>
      mutate(walletClient!, mutation.confirmPendingPaymaster)(...args),
    confirmPendingChequeBook: (...args: ExtractArgs<Contract['mutations']['confirmPendingChequeBook']>) =>
      mutate(walletClient!, mutation.confirmPendingChequeBook)(...args),
    confirmPendingMigrator: (...args: ExtractArgs<Contract['mutations']['confirmPendingMigrator']>) =>
      mutate(walletClient!, mutation.confirmPendingMigrator)(...args),
    cancelPendingKernel: (...args: ExtractArgs<Contract['mutations']['cancelPendingKernel']>) =>
      mutate(walletClient!, mutation.cancelPendingKernel)(...args),
    cancelPendingSentinel: (...args: ExtractArgs<Contract['mutations']['cancelPendingSentinel']>) =>
      mutate(walletClient!, mutation.cancelPendingSentinel)(...args),
    cancelPendingHighCommand: (...args: ExtractArgs<Contract['mutations']['cancelPendingHighCommand']>) =>
      mutate(walletClient!, mutation.cancelPendingHighCommand)(...args),
    cancelPendingPaymaster: (...args: ExtractArgs<Contract['mutations']['cancelPendingPaymaster']>) =>
      mutate(walletClient!, mutation.cancelPendingPaymaster)(...args),
    cancelPendingChequeBook: (...args: ExtractArgs<Contract['mutations']['cancelPendingChequeBook']>) =>
      mutate(walletClient!, mutation.cancelPendingChequeBook)(...args),
    cancelPendingMigrator: (...args: ExtractArgs<Contract['mutations']['cancelPendingMigrator']>) =>
      mutate(walletClient!, mutation.cancelPendingMigrator)(...args),
  }
}
