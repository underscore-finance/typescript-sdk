/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'AerodromeSwap',
    inputs: [
      {
        name: 'sender',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenIn',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdValue',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'numTokens',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AerodromeLiquidityAdded',
    inputs: [
      {
        name: 'sender',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenA',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenB',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountA',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountB',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lpAmountReceived',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdValue',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AerodromeLiquidityRemoved',
    inputs: [
      {
        name: 'sender',
        type: 'address',
        indexed: false,
      },
      {
        name: 'pool',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenA',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenB',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountA',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountB',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lpToken',
        type: 'address',
        indexed: false,
      },
      {
        name: 'lpAmountBurned',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdValue',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'LegoPauseModified',
    inputs: [
      {
        name: 'isPaused',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'LegoFundsRecovered',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'balance',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddys',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'hq',
            type: 'address',
          },
          {
            name: 'undyToken',
            type: 'address',
          },
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'switchboard',
            type: 'address',
          },
          {
            name: 'hatchery',
            type: 'address',
          },
          {
            name: 'lootDistributor',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
          {
            name: 'walletBackpack',
            type: 'address',
          },
          {
            name: 'billing',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHq',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'pause',
    inputs: [
      {
        name: '_shouldPause',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFundsMany',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'legoId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isPaused',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasCapability',
    inputs: [
      {
        name: '_action',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getRegistries',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isYieldLego',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isDexLego',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'swapTokens',
    inputs: [
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_minAmountOut',
        type: 'uint256',
      },
      {
        name: '_tokenPath',
        type: 'address[]',
      },
      {
        name: '_poolPath',
        type: 'address[]',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'swapTokens',
    inputs: [
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_minAmountOut',
        type: 'uint256',
      },
      {
        name: '_tokenPath',
        type: 'address[]',
      },
      {
        name: '_poolPath',
        type: 'address[]',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getLpToken',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPoolForLpToken',
    inputs: [
      {
        name: '_lpToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getCoreRouterPool',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getDeepestLiqPool',
    inputs: [
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'fee',
            type: 'uint256',
          },
          {
            name: 'liquidity',
            type: 'uint256',
          },
          {
            name: 'numCoins',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getBestSwapAmountOut',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getSwapAmountOut',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getBestSwapAmountIn',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getSwapAmountIn',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddLiqAmountsIn',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_availAmountA',
        type: 'uint256',
      },
      {
        name: '_availAmountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getRemoveLiqAmountsOut',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPrice',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_decimals',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPriceUnsafe',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_targetToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPriceUnsafe',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_targetToken',
        type: 'address',
      },
      {
        name: '_appraiser',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mintOrRedeemAsset',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_tokenInAmount',
        type: 'uint256',
      },
      {
        name: '_minAmountOut',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mintOrRedeemAsset',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_tokenInAmount',
        type: 'uint256',
      },
      {
        name: '_minAmountOut',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmMintOrRedeemAsset',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmMintOrRedeemAsset',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addCollateral',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addCollateral',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeCollateral',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeCollateral',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'borrow',
    inputs: [
      {
        name: '_borrowAsset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'borrow',
    inputs: [
      {
        name: '_borrowAsset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'repayDebt',
    inputs: [
      {
        name: '_paymentAsset',
        type: 'address',
      },
      {
        name: '_paymentAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'repayDebt',
    inputs: [
      {
        name: '_paymentAsset',
        type: 'address',
      },
      {
        name: '_paymentAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_miniAddys',
        type: 'tuple',
        components: [
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAccessForLego',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_action',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'string',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPricePerShare',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_decimals',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'AERODROME_FACTORY',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'AERODROME_ROUTER',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'coreRouterPool',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_aerodromeFactory',
        type: 'address',
      },
      {
        name: '_aerodromeRouter',
        type: 'address',
      },
      {
        name: '_coreRouterPool',
        type: 'address',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0x15099c548DDE962ca9Bf520A771fB523818261C3'

export type Contract = {
  calls: {
    getAddys: () => Promise<{
      hq: `0x${string}`
      undyToken: `0x${string}`
      ledger: `0x${string}`
      missionControl: `0x${string}`
      legoBook: `0x${string}`
      switchboard: `0x${string}`
      hatchery: `0x${string}`
      lootDistributor: `0x${string}`
      appraiser: `0x${string}`
      walletBackpack: `0x${string}`
      billing: `0x${string}`
    }>
    getUndyHq: () => Promise<`0x${string}`>
    legoId: () => Promise<bigint>
    isPaused: () => Promise<boolean>
    hasCapability: (action: bigint) => Promise<boolean>
    getRegistries: () => Promise<`0x${string}`[]>
    isYieldLego: () => Promise<boolean>
    isDexLego: () => Promise<boolean>
    getLpToken: (pool: `0x${string}`) => Promise<`0x${string}`>
    getPoolForLpToken: (lpToken: `0x${string}`) => Promise<`0x${string}`>
    getCoreRouterPool: () => Promise<`0x${string}`>
    getDeepestLiqPool: (
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
    ) => Promise<{ pool: `0x${string}`; fee: bigint; liquidity: bigint; numCoins: bigint }>
    getBestSwapAmountOut: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn: bigint,
    ) => Promise<[`0x${string}`, bigint]>
    getSwapAmountOut: (
      pool: `0x${string}`,
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn: bigint,
    ) => Promise<bigint>
    getBestSwapAmountIn: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountOut: bigint,
    ) => Promise<[`0x${string}`, bigint]>
    getSwapAmountIn: (
      pool: `0x${string}`,
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountOut: bigint,
    ) => Promise<bigint>
    getAddLiqAmountsIn: (
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      availAmountA: bigint,
      availAmountB: bigint,
    ) => Promise<[bigint, bigint, bigint]>
    getRemoveLiqAmountsOut: (
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      lpAmount: bigint,
    ) => Promise<[bigint, bigint]>
    getPrice: (asset: `0x${string}`, decimals: bigint) => Promise<bigint>
    getPriceUnsafe: (pool: `0x${string}`, targetToken: `0x${string}`, appraiser?: `0x${string}`) => Promise<bigint>
    getAccessForLego: (user: `0x${string}`, action: bigint) => Promise<[`0x${string}`, string, bigint]>
    getPricePerShare: (asset: `0x${string}`, decimals: bigint) => Promise<bigint>
    AERODROME_FACTORY: () => Promise<`0x${string}`>
    AERODROME_ROUTER: () => Promise<`0x${string}`>
    coreRouterPool: () => Promise<`0x${string}`>
  }
  mutations: {
    pause: (shouldPause: boolean) => Promise<void>
    recoverFunds: (recipient: `0x${string}`, asset: `0x${string}`) => Promise<void>
    recoverFundsMany: (recipient: `0x${string}`, assets: `0x${string}`[]) => Promise<void>
    swapTokens: (
      amountIn: bigint,
      minAmountOut: bigint,
      tokenPath: `0x${string}`[],
      poolPath: `0x${string}`[],
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, bigint, bigint]>
    addLiquidity: (
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      amountA: bigint,
      amountB: bigint,
      minAmountA: bigint,
      minAmountB: bigint,
      minLpAmount: bigint,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[`0x${string}`, bigint, bigint, bigint, bigint]>
    removeLiquidity: (
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      lpToken: `0x${string}`,
      lpAmount: bigint,
      minAmountA: bigint,
      minAmountB: bigint,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, bigint, bigint, bigint]>
    depositForYield: (
      asset: `0x${string}`,
      amount: bigint,
      vaultAddr: `0x${string}`,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    withdrawFromYield: (
      vaultToken: `0x${string}`,
      amount: bigint,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    mintOrRedeemAsset: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      tokenInAmount: bigint,
      minAmountOut: bigint,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, bigint, boolean, bigint]>
    confirmMintOrRedeemAsset: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, bigint]>
    addCollateral: (
      asset: `0x${string}`,
      amount: bigint,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, bigint]>
    removeCollateral: (
      asset: `0x${string}`,
      amount: bigint,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, bigint]>
    borrow: (
      borrowAsset: `0x${string}`,
      amount: bigint,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, bigint]>
    repayDebt: (
      paymentAsset: `0x${string}`,
      paymentAmount: bigint,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, bigint]>
    claimRewards: (
      user: `0x${string}`,
      rewardToken: `0x${string}`,
      rewardAmount: bigint,
      extraData: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, bigint]>
    addLiquidityConcentrated: (
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      tickLower: unknown,
      tickUpper: unknown,
      amountA: bigint,
      amountB: bigint,
      minAmountA: bigint,
      minAmountB: bigint,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, bigint, bigint, bigint, bigint]>
    removeLiquidityConcentrated: (
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      liqToRemove: bigint,
      minAmountA: bigint,
      minAmountB: bigint,
      extraData: `0x${string}`,
      recipient: `0x${string}`,
      miniAddys?: {
        ledger: `0x${string}`
        missionControl: `0x${string}`
        legoBook: `0x${string}`
        appraiser: `0x${string}`
      },
    ) => Promise<[bigint, bigint, bigint, boolean, bigint]>
  }
  events: {
    AerodromeSwap: (
      sender: `0x${string}`,
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn: bigint,
      amountOut: bigint,
      usdValue: bigint,
      numTokens: bigint,
      recipient: `0x${string}`,
    ) => Promise<void>
    AerodromeLiquidityAdded: (
      sender: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      amountA: bigint,
      amountB: bigint,
      lpAmountReceived: bigint,
      usdValue: bigint,
      recipient: `0x${string}`,
    ) => Promise<void>
    AerodromeLiquidityRemoved: (
      sender: `0x${string}`,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      amountA: bigint,
      amountB: bigint,
      lpToken: `0x${string}`,
      lpAmountBurned: bigint,
      usdValue: bigint,
      recipient: `0x${string}`,
    ) => Promise<void>
    LegoPauseModified: (isPaused: boolean) => Promise<void>
    LegoFundsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, balance: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'AeroClassic'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'AeroClassic' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => getRequest('getAddys', args),
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => getRequest('getUndyHq', args),
  legoId: (...args: ExtractArgs<Contract['calls']['legoId']>) => getRequest('legoId', args),
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => getRequest('isPaused', args),
  hasCapability: (...args: ExtractArgs<Contract['calls']['hasCapability']>) => getRequest('hasCapability', args),
  getRegistries: (...args: ExtractArgs<Contract['calls']['getRegistries']>) => getRequest('getRegistries', args),
  isYieldLego: (...args: ExtractArgs<Contract['calls']['isYieldLego']>) => getRequest('isYieldLego', args),
  isDexLego: (...args: ExtractArgs<Contract['calls']['isDexLego']>) => getRequest('isDexLego', args),
  getLpToken: (...args: ExtractArgs<Contract['calls']['getLpToken']>) => getRequest('getLpToken', args),
  getPoolForLpToken: (...args: ExtractArgs<Contract['calls']['getPoolForLpToken']>) =>
    getRequest('getPoolForLpToken', args),
  getCoreRouterPool: (...args: ExtractArgs<Contract['calls']['getCoreRouterPool']>) =>
    getRequest('getCoreRouterPool', args),
  getDeepestLiqPool: (...args: ExtractArgs<Contract['calls']['getDeepestLiqPool']>) =>
    getRequest('getDeepestLiqPool', args),
  getBestSwapAmountOut: (...args: ExtractArgs<Contract['calls']['getBestSwapAmountOut']>) =>
    getRequest('getBestSwapAmountOut', args),
  getSwapAmountOut: (...args: ExtractArgs<Contract['calls']['getSwapAmountOut']>) =>
    getRequest('getSwapAmountOut', args),
  getBestSwapAmountIn: (...args: ExtractArgs<Contract['calls']['getBestSwapAmountIn']>) =>
    getRequest('getBestSwapAmountIn', args),
  getSwapAmountIn: (...args: ExtractArgs<Contract['calls']['getSwapAmountIn']>) => getRequest('getSwapAmountIn', args),
  getAddLiqAmountsIn: (...args: ExtractArgs<Contract['calls']['getAddLiqAmountsIn']>) =>
    getRequest('getAddLiqAmountsIn', args),
  getRemoveLiqAmountsOut: (...args: ExtractArgs<Contract['calls']['getRemoveLiqAmountsOut']>) =>
    getRequest('getRemoveLiqAmountsOut', args),
  getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) => getRequest('getPrice', args),
  getPriceUnsafe: (...args: ExtractArgs<Contract['calls']['getPriceUnsafe']>) => getRequest('getPriceUnsafe', args),
  getAccessForLego: (...args: ExtractArgs<Contract['calls']['getAccessForLego']>) =>
    getRequest('getAccessForLego', args),
  getPricePerShare: (...args: ExtractArgs<Contract['calls']['getPricePerShare']>) =>
    getRequest('getPricePerShare', args),
  AERODROME_FACTORY: (...args: ExtractArgs<Contract['calls']['AERODROME_FACTORY']>) =>
    getRequest('AERODROME_FACTORY', args),
  AERODROME_ROUTER: (...args: ExtractArgs<Contract['calls']['AERODROME_ROUTER']>) =>
    getRequest('AERODROME_ROUTER', args),
  coreRouterPool: (...args: ExtractArgs<Contract['calls']['coreRouterPool']>) => getRequest('coreRouterPool', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'AeroClassic' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'AeroClassic'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  pause: getMutation('pause'),
  recoverFunds: getMutation('recoverFunds'),
  recoverFundsMany: getMutation('recoverFundsMany'),
  swapTokens: getMutation('swapTokens'),
  addLiquidity: getMutation('addLiquidity'),
  removeLiquidity: getMutation('removeLiquidity'),
  depositForYield: getMutation('depositForYield'),
  withdrawFromYield: getMutation('withdrawFromYield'),
  mintOrRedeemAsset: getMutation('mintOrRedeemAsset'),
  confirmMintOrRedeemAsset: getMutation('confirmMintOrRedeemAsset'),
  addCollateral: getMutation('addCollateral'),
  removeCollateral: getMutation('removeCollateral'),
  borrow: getMutation('borrow'),
  repayDebt: getMutation('repayDebt'),
  claimRewards: getMutation('claimRewards'),
  addLiquidityConcentrated: getMutation('addLiquidityConcentrated'),
  removeLiquidityConcentrated: getMutation('removeLiquidityConcentrated'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => Promise<CallReturn<'getAddys'>>
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => Promise<CallReturn<'getUndyHq'>>
  legoId: (...args: ExtractArgs<Contract['calls']['legoId']>) => Promise<CallReturn<'legoId'>>
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => Promise<CallReturn<'isPaused'>>
  hasCapability: (...args: ExtractArgs<Contract['calls']['hasCapability']>) => Promise<CallReturn<'hasCapability'>>
  getRegistries: (...args: ExtractArgs<Contract['calls']['getRegistries']>) => Promise<CallReturn<'getRegistries'>>
  isYieldLego: (...args: ExtractArgs<Contract['calls']['isYieldLego']>) => Promise<CallReturn<'isYieldLego'>>
  isDexLego: (...args: ExtractArgs<Contract['calls']['isDexLego']>) => Promise<CallReturn<'isDexLego'>>
  getLpToken: (...args: ExtractArgs<Contract['calls']['getLpToken']>) => Promise<CallReturn<'getLpToken'>>
  getPoolForLpToken: (
    ...args: ExtractArgs<Contract['calls']['getPoolForLpToken']>
  ) => Promise<CallReturn<'getPoolForLpToken'>>
  getCoreRouterPool: (
    ...args: ExtractArgs<Contract['calls']['getCoreRouterPool']>
  ) => Promise<CallReturn<'getCoreRouterPool'>>
  getDeepestLiqPool: (
    ...args: ExtractArgs<Contract['calls']['getDeepestLiqPool']>
  ) => Promise<CallReturn<'getDeepestLiqPool'>>
  getBestSwapAmountOut: (
    ...args: ExtractArgs<Contract['calls']['getBestSwapAmountOut']>
  ) => Promise<CallReturn<'getBestSwapAmountOut'>>
  getSwapAmountOut: (
    ...args: ExtractArgs<Contract['calls']['getSwapAmountOut']>
  ) => Promise<CallReturn<'getSwapAmountOut'>>
  getBestSwapAmountIn: (
    ...args: ExtractArgs<Contract['calls']['getBestSwapAmountIn']>
  ) => Promise<CallReturn<'getBestSwapAmountIn'>>
  getSwapAmountIn: (
    ...args: ExtractArgs<Contract['calls']['getSwapAmountIn']>
  ) => Promise<CallReturn<'getSwapAmountIn'>>
  getAddLiqAmountsIn: (
    ...args: ExtractArgs<Contract['calls']['getAddLiqAmountsIn']>
  ) => Promise<CallReturn<'getAddLiqAmountsIn'>>
  getRemoveLiqAmountsOut: (
    ...args: ExtractArgs<Contract['calls']['getRemoveLiqAmountsOut']>
  ) => Promise<CallReturn<'getRemoveLiqAmountsOut'>>
  getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) => Promise<CallReturn<'getPrice'>>
  getPriceUnsafe: (...args: ExtractArgs<Contract['calls']['getPriceUnsafe']>) => Promise<CallReturn<'getPriceUnsafe'>>
  getAccessForLego: (
    ...args: ExtractArgs<Contract['calls']['getAccessForLego']>
  ) => Promise<CallReturn<'getAccessForLego'>>
  getPricePerShare: (
    ...args: ExtractArgs<Contract['calls']['getPricePerShare']>
  ) => Promise<CallReturn<'getPricePerShare'>>
  AERODROME_FACTORY: (
    ...args: ExtractArgs<Contract['calls']['AERODROME_FACTORY']>
  ) => Promise<CallReturn<'AERODROME_FACTORY'>>
  AERODROME_ROUTER: (
    ...args: ExtractArgs<Contract['calls']['AERODROME_ROUTER']>
  ) => Promise<CallReturn<'AERODROME_ROUTER'>>
  coreRouterPool: (...args: ExtractArgs<Contract['calls']['coreRouterPool']>) => Promise<CallReturn<'coreRouterPool'>>
  pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => Promise<Address>
  recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) => Promise<Address>
  recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) => Promise<Address>
  swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) => Promise<Address>
  addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) => Promise<Address>
  removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) => Promise<Address>
  depositForYield: (...args: ExtractArgs<Contract['mutations']['depositForYield']>) => Promise<Address>
  withdrawFromYield: (...args: ExtractArgs<Contract['mutations']['withdrawFromYield']>) => Promise<Address>
  mintOrRedeemAsset: (...args: ExtractArgs<Contract['mutations']['mintOrRedeemAsset']>) => Promise<Address>
  confirmMintOrRedeemAsset: (
    ...args: ExtractArgs<Contract['mutations']['confirmMintOrRedeemAsset']>
  ) => Promise<Address>
  addCollateral: (...args: ExtractArgs<Contract['mutations']['addCollateral']>) => Promise<Address>
  removeCollateral: (...args: ExtractArgs<Contract['mutations']['removeCollateral']>) => Promise<Address>
  borrow: (...args: ExtractArgs<Contract['mutations']['borrow']>) => Promise<Address>
  repayDebt: (...args: ExtractArgs<Contract['mutations']['repayDebt']>) => Promise<Address>
  claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) => Promise<Address>
  addLiquidityConcentrated: (
    ...args: ExtractArgs<Contract['mutations']['addLiquidityConcentrated']>
  ) => Promise<Address>
  removeLiquidityConcentrated: (
    ...args: ExtractArgs<Contract['mutations']['removeLiquidityConcentrated']>
  ) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) =>
      singleQuery(publicClient!, call.getAddys(...args)) as Promise<CallReturn<'getAddys'>>,
    getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) =>
      singleQuery(publicClient!, call.getUndyHq(...args)) as Promise<CallReturn<'getUndyHq'>>,
    legoId: (...args: ExtractArgs<Contract['calls']['legoId']>) =>
      singleQuery(publicClient!, call.legoId(...args)) as Promise<CallReturn<'legoId'>>,
    isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) =>
      singleQuery(publicClient!, call.isPaused(...args)) as Promise<CallReturn<'isPaused'>>,
    hasCapability: (...args: ExtractArgs<Contract['calls']['hasCapability']>) =>
      singleQuery(publicClient!, call.hasCapability(...args)) as Promise<CallReturn<'hasCapability'>>,
    getRegistries: (...args: ExtractArgs<Contract['calls']['getRegistries']>) =>
      singleQuery(publicClient!, call.getRegistries(...args)) as Promise<CallReturn<'getRegistries'>>,
    isYieldLego: (...args: ExtractArgs<Contract['calls']['isYieldLego']>) =>
      singleQuery(publicClient!, call.isYieldLego(...args)) as Promise<CallReturn<'isYieldLego'>>,
    isDexLego: (...args: ExtractArgs<Contract['calls']['isDexLego']>) =>
      singleQuery(publicClient!, call.isDexLego(...args)) as Promise<CallReturn<'isDexLego'>>,
    getLpToken: (...args: ExtractArgs<Contract['calls']['getLpToken']>) =>
      singleQuery(publicClient!, call.getLpToken(...args)) as Promise<CallReturn<'getLpToken'>>,
    getPoolForLpToken: (...args: ExtractArgs<Contract['calls']['getPoolForLpToken']>) =>
      singleQuery(publicClient!, call.getPoolForLpToken(...args)) as Promise<CallReturn<'getPoolForLpToken'>>,
    getCoreRouterPool: (...args: ExtractArgs<Contract['calls']['getCoreRouterPool']>) =>
      singleQuery(publicClient!, call.getCoreRouterPool(...args)) as Promise<CallReturn<'getCoreRouterPool'>>,
    getDeepestLiqPool: (...args: ExtractArgs<Contract['calls']['getDeepestLiqPool']>) =>
      singleQuery(publicClient!, call.getDeepestLiqPool(...args)) as Promise<CallReturn<'getDeepestLiqPool'>>,
    getBestSwapAmountOut: (...args: ExtractArgs<Contract['calls']['getBestSwapAmountOut']>) =>
      singleQuery(publicClient!, call.getBestSwapAmountOut(...args)) as Promise<CallReturn<'getBestSwapAmountOut'>>,
    getSwapAmountOut: (...args: ExtractArgs<Contract['calls']['getSwapAmountOut']>) =>
      singleQuery(publicClient!, call.getSwapAmountOut(...args)) as Promise<CallReturn<'getSwapAmountOut'>>,
    getBestSwapAmountIn: (...args: ExtractArgs<Contract['calls']['getBestSwapAmountIn']>) =>
      singleQuery(publicClient!, call.getBestSwapAmountIn(...args)) as Promise<CallReturn<'getBestSwapAmountIn'>>,
    getSwapAmountIn: (...args: ExtractArgs<Contract['calls']['getSwapAmountIn']>) =>
      singleQuery(publicClient!, call.getSwapAmountIn(...args)) as Promise<CallReturn<'getSwapAmountIn'>>,
    getAddLiqAmountsIn: (...args: ExtractArgs<Contract['calls']['getAddLiqAmountsIn']>) =>
      singleQuery(publicClient!, call.getAddLiqAmountsIn(...args)) as Promise<CallReturn<'getAddLiqAmountsIn'>>,
    getRemoveLiqAmountsOut: (...args: ExtractArgs<Contract['calls']['getRemoveLiqAmountsOut']>) =>
      singleQuery(publicClient!, call.getRemoveLiqAmountsOut(...args)) as Promise<CallReturn<'getRemoveLiqAmountsOut'>>,
    getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) =>
      singleQuery(publicClient!, call.getPrice(...args)) as Promise<CallReturn<'getPrice'>>,
    getPriceUnsafe: (...args: ExtractArgs<Contract['calls']['getPriceUnsafe']>) =>
      singleQuery(publicClient!, call.getPriceUnsafe(...args)) as Promise<CallReturn<'getPriceUnsafe'>>,
    getAccessForLego: (...args: ExtractArgs<Contract['calls']['getAccessForLego']>) =>
      singleQuery(publicClient!, call.getAccessForLego(...args)) as Promise<CallReturn<'getAccessForLego'>>,
    getPricePerShare: (...args: ExtractArgs<Contract['calls']['getPricePerShare']>) =>
      singleQuery(publicClient!, call.getPricePerShare(...args)) as Promise<CallReturn<'getPricePerShare'>>,
    AERODROME_FACTORY: (...args: ExtractArgs<Contract['calls']['AERODROME_FACTORY']>) =>
      singleQuery(publicClient!, call.AERODROME_FACTORY(...args)) as Promise<CallReturn<'AERODROME_FACTORY'>>,
    AERODROME_ROUTER: (...args: ExtractArgs<Contract['calls']['AERODROME_ROUTER']>) =>
      singleQuery(publicClient!, call.AERODROME_ROUTER(...args)) as Promise<CallReturn<'AERODROME_ROUTER'>>,
    coreRouterPool: (...args: ExtractArgs<Contract['calls']['coreRouterPool']>) =>
      singleQuery(publicClient!, call.coreRouterPool(...args)) as Promise<CallReturn<'coreRouterPool'>>,

    // Mutations
    pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => mutate(walletClient!, mutation.pause)(...args),
    recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) =>
      mutate(walletClient!, mutation.recoverFunds)(...args),
    recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) =>
      mutate(walletClient!, mutation.recoverFundsMany)(...args),
    swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) =>
      mutate(walletClient!, mutation.swapTokens)(...args),
    addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) =>
      mutate(walletClient!, mutation.addLiquidity)(...args),
    removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) =>
      mutate(walletClient!, mutation.removeLiquidity)(...args),
    depositForYield: (...args: ExtractArgs<Contract['mutations']['depositForYield']>) =>
      mutate(walletClient!, mutation.depositForYield)(...args),
    withdrawFromYield: (...args: ExtractArgs<Contract['mutations']['withdrawFromYield']>) =>
      mutate(walletClient!, mutation.withdrawFromYield)(...args),
    mintOrRedeemAsset: (...args: ExtractArgs<Contract['mutations']['mintOrRedeemAsset']>) =>
      mutate(walletClient!, mutation.mintOrRedeemAsset)(...args),
    confirmMintOrRedeemAsset: (...args: ExtractArgs<Contract['mutations']['confirmMintOrRedeemAsset']>) =>
      mutate(walletClient!, mutation.confirmMintOrRedeemAsset)(...args),
    addCollateral: (...args: ExtractArgs<Contract['mutations']['addCollateral']>) =>
      mutate(walletClient!, mutation.addCollateral)(...args),
    removeCollateral: (...args: ExtractArgs<Contract['mutations']['removeCollateral']>) =>
      mutate(walletClient!, mutation.removeCollateral)(...args),
    borrow: (...args: ExtractArgs<Contract['mutations']['borrow']>) => mutate(walletClient!, mutation.borrow)(...args),
    repayDebt: (...args: ExtractArgs<Contract['mutations']['repayDebt']>) =>
      mutate(walletClient!, mutation.repayDebt)(...args),
    claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) =>
      mutate(walletClient!, mutation.claimRewards)(...args),
    addLiquidityConcentrated: (...args: ExtractArgs<Contract['mutations']['addLiquidityConcentrated']>) =>
      mutate(walletClient!, mutation.addLiquidityConcentrated)(...args),
    removeLiquidityConcentrated: (...args: ExtractArgs<Contract['mutations']['removeLiquidityConcentrated']>) =>
      mutate(walletClient!, mutation.removeLiquidityConcentrated)(...args),
  }
}
