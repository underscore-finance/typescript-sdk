/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'signer',
        type: 'address',
      },
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: true,
        name: 'vaultToken',
        type: 'address',
      },
      {
        indexed: false,
        name: 'assetAmountDeposited',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'vaultTokenAmountReceived',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'refundAssetAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'usdValue',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'isSignerAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletDeposit',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'signer',
        type: 'address',
      },
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: true,
        name: 'vaultToken',
        type: 'address',
      },
      {
        indexed: false,
        name: 'assetAmountReceived',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'vaultTokenAmountBurned',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'refundVaultTokenAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'usdValue',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'isSignerAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletWithdrawal',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'signer',
        type: 'address',
      },
      {
        indexed: true,
        name: 'tokenIn',
        type: 'address',
      },
      {
        indexed: true,
        name: 'tokenOut',
        type: 'address',
      },
      {
        indexed: false,
        name: 'swapAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'toAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'refundAssetAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'usdValue',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'numTokens',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'isSignerAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletSwap',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'signer',
        type: 'address',
      },
      {
        indexed: true,
        name: 'borrowAsset',
        type: 'address',
      },
      {
        indexed: false,
        name: 'borrowAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'usdValue',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'isSignerAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletBorrow',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'signer',
        type: 'address',
      },
      {
        indexed: true,
        name: 'paymentAsset',
        type: 'address',
      },
      {
        indexed: false,
        name: 'paymentAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'usdValue',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'remainingDebt',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoId',
        type: 'uint256',
      },
      {
        indexed: true,
        name: 'legoAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'isSignerAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletRepayDebt',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'signer',
        type: 'address',
      },
      {
        indexed: true,
        name: 'tokenA',
        type: 'address',
      },
      {
        indexed: true,
        name: 'tokenB',
        type: 'address',
      },
      {
        indexed: false,
        name: 'liqAmountA',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'liqAmountB',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'liquidityAdded',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'pool',
        type: 'address',
      },
      {
        indexed: false,
        name: 'usdValue',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'refundAssetAmountA',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'refundAssetAmountB',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'nftTokenId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'isSignerAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletLiquidityAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'signer',
        type: 'address',
      },
      {
        indexed: true,
        name: 'tokenA',
        type: 'address',
      },
      {
        indexed: false,
        name: 'tokenB',
        type: 'address',
      },
      {
        indexed: false,
        name: 'removedAmountA',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'removedAmountB',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'usdValue',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'isDepleted',
        type: 'bool',
      },
      {
        indexed: false,
        name: 'liquidityRemoved',
        type: 'uint256',
      },
      {
        indexed: true,
        name: 'lpToken',
        type: 'address',
      },
      {
        indexed: false,
        name: 'refundedLpAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'isSignerAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletLiquidityRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'signer',
        type: 'address',
      },
      {
        indexed: true,
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: false,
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'usdValue',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'isSignerAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletFundsTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'signer',
        type: 'address',
      },
      {
        indexed: false,
        name: 'market',
        type: 'address',
      },
      {
        indexed: false,
        name: 'rewardToken',
        type: 'address',
      },
      {
        indexed: false,
        name: 'rewardAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'usdValue',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'proof',
        type: 'bytes32',
      },
      {
        indexed: false,
        name: 'legoId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'legoAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'isSignerAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletRewardsClaimed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'signer',
        type: 'address',
      },
      {
        indexed: false,
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'paidEth',
        type: 'uint256',
      },
      {
        indexed: true,
        name: 'weth',
        type: 'address',
      },
      {
        indexed: false,
        name: 'isSignerAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletEthConvertedToWeth',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'signer',
        type: 'address',
      },
      {
        indexed: false,
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: true,
        name: 'weth',
        type: 'address',
      },
      {
        indexed: false,
        name: 'isSignerAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletWethConvertedToEth',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: false,
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'usdValue',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'paidThroughBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'isAgent',
        type: 'bool',
      },
    ],
    name: 'UserWalletSubscriptionPaid',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: false,
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'fee',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'action',
        type: 'uint256',
      },
    ],
    name: 'UserWalletTransactionFeePaid',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: false,
        name: 'amountRecovered',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'remainingAmount',
        type: 'uint256',
      },
    ],
    name: 'UserWalletTrialFundsRecovered',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'collection',
        type: 'address',
      },
      {
        indexed: false,
        name: 'nftTokenId',
        type: 'uint256',
      },
      {
        indexed: true,
        name: 'owner',
        type: 'address',
      },
    ],
    name: 'UserWalletNftRecovered',
    type: 'event',
  },
  {
    stateMutability: 'payable',
    type: 'fallback',
  },
  {
    inputs: [
      {
        name: '_operator',
        type: 'address',
      },
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_tokenId',
        type: 'uint256',
      },
      {
        name: '_data',
        type: 'bytes',
      },
    ],
    name: 'onERC721Received',
    outputs: [
      {
        name: '',
        type: 'bytes4',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_walletConfig',
        type: 'address',
      },
      {
        name: '_addyRegistry',
        type: 'address',
      },
      {
        name: '_wethAddr',
        type: 'address',
      },
      {
        name: '_trialFundsAsset',
        type: 'address',
      },
      {
        name: '_trialFundsInitialAmount',
        type: 'uint256',
      },
    ],
    name: 'initialize',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'apiVersion',
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vault',
        type: 'address',
      },
    ],
    name: 'depositTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vault',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'depositTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    name: 'withdrawTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_vaultTokenAmount',
        type: 'uint256',
      },
    ],
    name: 'withdrawTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromAsset',
        type: 'address',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVault',
        type: 'address',
      },
    ],
    name: 'rebalance',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromAsset',
        type: 'address',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVault',
        type: 'address',
      },
      {
        name: '_fromVaultTokenAmount',
        type: 'uint256',
      },
    ],
    name: 'rebalance',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
        name: '_swapInstructions',
        type: 'tuple[]',
      },
    ],
    name: 'swapTokens',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'borrow',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
    ],
    name: 'borrow',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'borrow',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
    ],
    name: 'repayDebt',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
      {
        name: '_paymentAmount',
        type: 'uint256',
      },
    ],
    name: 'repayDebt',
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'claimRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_market',
        type: 'address',
      },
    ],
    name: 'claimRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_market',
        type: 'address',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
    ],
    name: 'claimRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_market',
        type: 'address',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
    ],
    name: 'claimRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_market',
        type: 'address',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
      {
        name: '_proof',
        type: 'bytes32',
      },
    ],
    name: 'claimRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    name: 'transferFunds',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'transferFunds',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    name: 'transferFunds',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'convertEthToWeth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'convertEthToWeth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_depositLegoId',
        type: 'uint256',
      },
    ],
    name: 'convertEthToWeth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_depositLegoId',
        type: 'uint256',
      },
      {
        name: '_depositVault',
        type: 'address',
      },
    ],
    name: 'convertEthToWeth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'convertWethToEth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'convertWethToEth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    name: 'convertWethToEth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_withdrawLegoId',
        type: 'uint256',
      },
    ],
    name: 'convertWethToEth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_withdrawLegoId',
        type: 'uint256',
      },
      {
        name: '_withdrawVaultToken',
        type: 'address',
      },
    ],
    name: 'convertWethToEth',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'recoverTrialFunds',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'vaultToken',
            type: 'address',
          },
        ],
        name: '_opportunities',
        type: 'tuple[]',
      },
    ],
    name: 'recoverTrialFunds',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_collection',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
    ],
    name: 'recoverNft',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'walletConfig',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'trialFundsAsset',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'trialFundsInitialAmount',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'addyRegistry',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'wethAddr',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'initialized',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
] as const

export const deployAddress: Address | undefined = '0x6A5263B0645c7dFd2788eF46f95f210E947e0743'

export type Contract = {
  calls: {
    onERC721Received: (
      operator: `0x${string}`,
      owner: `0x${string}`,
      tokenId: bigint,
      data: `0x${string}`,
    ) => Promise<`0x${string}`>
    apiVersion: () => Promise<string>
    walletConfig: () => Promise<`0x${string}`>
    trialFundsAsset: () => Promise<`0x${string}`>
    trialFundsInitialAmount: () => Promise<bigint>
    addyRegistry: () => Promise<`0x${string}`>
    wethAddr: () => Promise<`0x${string}`>
    initialized: () => Promise<boolean>
  }
  mutations: {
    initialize: (
      walletConfig: `0x${string}`,
      addyRegistry: `0x${string}`,
      wethAddr: `0x${string}`,
      trialFundsAsset: `0x${string}`,
      trialFundsInitialAmount: bigint,
    ) => Promise<boolean>
    depositTokens: (
      legoId: bigint,
      asset: `0x${string}`,
      vault: `0x${string}`,
      amount?: bigint,
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    withdrawTokens: (
      legoId: bigint,
      asset: `0x${string}`,
      vaultToken: `0x${string}`,
      vaultTokenAmount?: bigint,
    ) => Promise<[bigint, bigint, bigint]>
    rebalance: (
      fromLegoId: bigint,
      fromAsset: `0x${string}`,
      fromVaultToken: `0x${string}`,
      toLegoId: bigint,
      toVault: `0x${string}`,
      fromVaultTokenAmount?: bigint,
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    swapTokens: (
      swapInstructions: {
        legoId: bigint
        amountIn: bigint
        minAmountOut: bigint
        tokenPath: `0x${string}`[]
        poolPath: `0x${string}`[]
      }[],
    ) => Promise<[bigint, bigint, bigint]>
    borrow: (legoId: bigint, borrowAsset?: `0x${string}`, amount?: bigint) => Promise<[`0x${string}`, bigint, bigint]>
    repayDebt: (
      legoId: bigint,
      paymentAsset: `0x${string}`,
      paymentAmount?: bigint,
    ) => Promise<[`0x${string}`, bigint, bigint, bigint]>
    claimRewards: (
      legoId: bigint,
      market?: `0x${string}`,
      rewardToken?: `0x${string}`,
      rewardAmount?: bigint,
      proof?: `0x${string}`,
    ) => Promise<void>
    addLiquidity: (
      legoId: bigint,
      nftAddr: `0x${string}`,
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      amountA?: bigint,
      amountB?: bigint,
      tickLower?: unknown,
      tickUpper?: unknown,
      minAmountA?: bigint,
      minAmountB?: bigint,
      minLpAmount?: bigint,
    ) => Promise<[bigint, bigint, bigint, bigint, bigint]>
    removeLiquidity: (
      legoId: bigint,
      nftAddr: `0x${string}`,
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      liqToRemove?: bigint,
      minAmountA?: bigint,
      minAmountB?: bigint,
    ) => Promise<[bigint, bigint, bigint, boolean]>
    transferFunds: (recipient: `0x${string}`, amount?: bigint, asset?: `0x${string}`) => Promise<[bigint, bigint]>
    convertEthToWeth: (
      amount?: bigint,
      depositLegoId?: bigint,
      depositVault?: `0x${string}`,
    ) => Promise<[bigint, `0x${string}`, bigint]>
    convertWethToEth: (
      amount?: bigint,
      recipient?: `0x${string}`,
      withdrawLegoId?: bigint,
      withdrawVaultToken?: `0x${string}`,
    ) => Promise<bigint>
    recoverTrialFunds: (opportunities?: { legoId: bigint; vaultToken: `0x${string}` }[]) => Promise<boolean>
    recoverNft: (collection: `0x${string}`, nftTokenId: bigint) => Promise<boolean>
  }
  events: {
    UserWalletDeposit: (
      signer: `0x${string}`,
      asset: `0x${string}`,
      vaultToken: `0x${string}`,
      assetAmountDeposited: bigint,
      vaultTokenAmountReceived: bigint,
      refundAssetAmount: bigint,
      usdValue: bigint,
      legoId: bigint,
      legoAddr: `0x${string}`,
      isSignerAgent: boolean,
    ) => Promise<void>
    UserWalletWithdrawal: (
      signer: `0x${string}`,
      asset: `0x${string}`,
      vaultToken: `0x${string}`,
      assetAmountReceived: bigint,
      vaultTokenAmountBurned: bigint,
      refundVaultTokenAmount: bigint,
      usdValue: bigint,
      legoId: bigint,
      legoAddr: `0x${string}`,
      isSignerAgent: boolean,
    ) => Promise<void>
    UserWalletSwap: (
      signer: `0x${string}`,
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      swapAmount: bigint,
      toAmount: bigint,
      refundAssetAmount: bigint,
      usdValue: bigint,
      numTokens: bigint,
      legoId: bigint,
      legoAddr: `0x${string}`,
      isSignerAgent: boolean,
    ) => Promise<void>
    UserWalletBorrow: (
      signer: `0x${string}`,
      borrowAsset: `0x${string}`,
      borrowAmount: bigint,
      usdValue: bigint,
      legoId: bigint,
      legoAddr: `0x${string}`,
      isSignerAgent: boolean,
    ) => Promise<void>
    UserWalletRepayDebt: (
      signer: `0x${string}`,
      paymentAsset: `0x${string}`,
      paymentAmount: bigint,
      usdValue: bigint,
      remainingDebt: bigint,
      legoId: bigint,
      legoAddr: `0x${string}`,
      isSignerAgent: boolean,
    ) => Promise<void>
    UserWalletLiquidityAdded: (
      signer: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      liqAmountA: bigint,
      liqAmountB: bigint,
      liquidityAdded: bigint,
      pool: `0x${string}`,
      usdValue: bigint,
      refundAssetAmountA: bigint,
      refundAssetAmountB: bigint,
      nftTokenId: bigint,
      legoId: bigint,
      legoAddr: `0x${string}`,
      isSignerAgent: boolean,
    ) => Promise<void>
    UserWalletLiquidityRemoved: (
      signer: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      removedAmountA: bigint,
      removedAmountB: bigint,
      usdValue: bigint,
      isDepleted: boolean,
      liquidityRemoved: bigint,
      lpToken: `0x${string}`,
      refundedLpAmount: bigint,
      legoId: bigint,
      legoAddr: `0x${string}`,
      isSignerAgent: boolean,
    ) => Promise<void>
    UserWalletFundsTransferred: (
      signer: `0x${string}`,
      recipient: `0x${string}`,
      asset: `0x${string}`,
      amount: bigint,
      usdValue: bigint,
      isSignerAgent: boolean,
    ) => Promise<void>
    UserWalletRewardsClaimed: (
      signer: `0x${string}`,
      market: `0x${string}`,
      rewardToken: `0x${string}`,
      rewardAmount: bigint,
      usdValue: bigint,
      proof: `0x${string}`,
      legoId: bigint,
      legoAddr: `0x${string}`,
      isSignerAgent: boolean,
    ) => Promise<void>
    UserWalletEthConvertedToWeth: (
      signer: `0x${string}`,
      amount: bigint,
      paidEth: bigint,
      weth: `0x${string}`,
      isSignerAgent: boolean,
    ) => Promise<void>
    UserWalletWethConvertedToEth: (
      signer: `0x${string}`,
      amount: bigint,
      weth: `0x${string}`,
      isSignerAgent: boolean,
    ) => Promise<void>
    UserWalletSubscriptionPaid: (
      recipient: `0x${string}`,
      asset: `0x${string}`,
      amount: bigint,
      usdValue: bigint,
      paidThroughBlock: bigint,
      isAgent: boolean,
    ) => Promise<void>
    UserWalletTransactionFeePaid: (
      recipient: `0x${string}`,
      asset: `0x${string}`,
      amount: bigint,
      fee: bigint,
      action: bigint,
    ) => Promise<void>
    UserWalletTrialFundsRecovered: (
      asset: `0x${string}`,
      amountRecovered: bigint,
      remainingAmount: bigint,
    ) => Promise<void>
    UserWalletNftRecovered: (collection: `0x${string}`, nftTokenId: bigint, owner: `0x${string}`) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'WalletFunds'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'WalletFunds' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  onERC721Received: (...args: ExtractArgs<Contract['calls']['onERC721Received']>) =>
    getRequest('onERC721Received', args),
  apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) => getRequest('apiVersion', args),
  walletConfig: (...args: ExtractArgs<Contract['calls']['walletConfig']>) => getRequest('walletConfig', args),
  trialFundsAsset: (...args: ExtractArgs<Contract['calls']['trialFundsAsset']>) => getRequest('trialFundsAsset', args),
  trialFundsInitialAmount: (...args: ExtractArgs<Contract['calls']['trialFundsInitialAmount']>) =>
    getRequest('trialFundsInitialAmount', args),
  addyRegistry: (...args: ExtractArgs<Contract['calls']['addyRegistry']>) => getRequest('addyRegistry', args),
  wethAddr: (...args: ExtractArgs<Contract['calls']['wethAddr']>) => getRequest('wethAddr', args),
  initialized: (...args: ExtractArgs<Contract['calls']['initialized']>) => getRequest('initialized', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'WalletFunds' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'WalletFunds'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  initialize: getMutation('initialize'),
  depositTokens: getMutation('depositTokens'),
  withdrawTokens: getMutation('withdrawTokens'),
  rebalance: getMutation('rebalance'),
  swapTokens: getMutation('swapTokens'),
  borrow: getMutation('borrow'),
  repayDebt: getMutation('repayDebt'),
  claimRewards: getMutation('claimRewards'),
  addLiquidity: getMutation('addLiquidity'),
  removeLiquidity: getMutation('removeLiquidity'),
  transferFunds: getMutation('transferFunds'),
  convertEthToWeth: getMutation('convertEthToWeth'),
  convertWethToEth: getMutation('convertWethToEth'),
  recoverTrialFunds: getMutation('recoverTrialFunds'),
  recoverNft: getMutation('recoverNft'),
}

export type SDK = {
  onERC721Received: (
    ...args: ExtractArgs<Contract['calls']['onERC721Received']>
  ) => Promise<CallReturn<'onERC721Received'>>
  apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) => Promise<CallReturn<'apiVersion'>>
  walletConfig: (...args: ExtractArgs<Contract['calls']['walletConfig']>) => Promise<CallReturn<'walletConfig'>>
  trialFundsAsset: (
    ...args: ExtractArgs<Contract['calls']['trialFundsAsset']>
  ) => Promise<CallReturn<'trialFundsAsset'>>
  trialFundsInitialAmount: (
    ...args: ExtractArgs<Contract['calls']['trialFundsInitialAmount']>
  ) => Promise<CallReturn<'trialFundsInitialAmount'>>
  addyRegistry: (...args: ExtractArgs<Contract['calls']['addyRegistry']>) => Promise<CallReturn<'addyRegistry'>>
  wethAddr: (...args: ExtractArgs<Contract['calls']['wethAddr']>) => Promise<CallReturn<'wethAddr'>>
  initialized: (...args: ExtractArgs<Contract['calls']['initialized']>) => Promise<CallReturn<'initialized'>>
  initialize: (...args: ExtractArgs<Contract['mutations']['initialize']>) => Promise<Address>
  depositTokens: (...args: ExtractArgs<Contract['mutations']['depositTokens']>) => Promise<Address>
  withdrawTokens: (...args: ExtractArgs<Contract['mutations']['withdrawTokens']>) => Promise<Address>
  rebalance: (...args: ExtractArgs<Contract['mutations']['rebalance']>) => Promise<Address>
  swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) => Promise<Address>
  borrow: (...args: ExtractArgs<Contract['mutations']['borrow']>) => Promise<Address>
  repayDebt: (...args: ExtractArgs<Contract['mutations']['repayDebt']>) => Promise<Address>
  claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) => Promise<Address>
  addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) => Promise<Address>
  removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) => Promise<Address>
  transferFunds: (...args: ExtractArgs<Contract['mutations']['transferFunds']>) => Promise<Address>
  convertEthToWeth: (...args: ExtractArgs<Contract['mutations']['convertEthToWeth']>) => Promise<Address>
  convertWethToEth: (...args: ExtractArgs<Contract['mutations']['convertWethToEth']>) => Promise<Address>
  recoverTrialFunds: (...args: ExtractArgs<Contract['mutations']['recoverTrialFunds']>) => Promise<Address>
  recoverNft: (...args: ExtractArgs<Contract['mutations']['recoverNft']>) => Promise<Address>
}

export function toSdk(address: Address, publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    // Queries
    onERC721Received: (...args: ExtractArgs<Contract['calls']['onERC721Received']>) =>
      singleQuery(publicClient!, call.onERC721Received(...args).at(address)) as Promise<CallReturn<'onERC721Received'>>,
    apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) =>
      singleQuery(publicClient!, call.apiVersion(...args).at(address)) as Promise<CallReturn<'apiVersion'>>,
    walletConfig: (...args: ExtractArgs<Contract['calls']['walletConfig']>) =>
      singleQuery(publicClient!, call.walletConfig(...args).at(address)) as Promise<CallReturn<'walletConfig'>>,
    trialFundsAsset: (...args: ExtractArgs<Contract['calls']['trialFundsAsset']>) =>
      singleQuery(publicClient!, call.trialFundsAsset(...args).at(address)) as Promise<CallReturn<'trialFundsAsset'>>,
    trialFundsInitialAmount: (...args: ExtractArgs<Contract['calls']['trialFundsInitialAmount']>) =>
      singleQuery(publicClient!, call.trialFundsInitialAmount(...args).at(address)) as Promise<
        CallReturn<'trialFundsInitialAmount'>
      >,
    addyRegistry: (...args: ExtractArgs<Contract['calls']['addyRegistry']>) =>
      singleQuery(publicClient!, call.addyRegistry(...args).at(address)) as Promise<CallReturn<'addyRegistry'>>,
    wethAddr: (...args: ExtractArgs<Contract['calls']['wethAddr']>) =>
      singleQuery(publicClient!, call.wethAddr(...args).at(address)) as Promise<CallReturn<'wethAddr'>>,
    initialized: (...args: ExtractArgs<Contract['calls']['initialized']>) =>
      singleQuery(publicClient!, call.initialized(...args).at(address)) as Promise<CallReturn<'initialized'>>,

    // Mutations
    initialize: (...args: ExtractArgs<Contract['mutations']['initialize']>) =>
      mutate(walletClient!, mutation.initialize, { address })(...args),
    depositTokens: (...args: ExtractArgs<Contract['mutations']['depositTokens']>) =>
      mutate(walletClient!, mutation.depositTokens, { address })(...args),
    withdrawTokens: (...args: ExtractArgs<Contract['mutations']['withdrawTokens']>) =>
      mutate(walletClient!, mutation.withdrawTokens, { address })(...args),
    rebalance: (...args: ExtractArgs<Contract['mutations']['rebalance']>) =>
      mutate(walletClient!, mutation.rebalance, { address })(...args),
    swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) =>
      mutate(walletClient!, mutation.swapTokens, { address })(...args),
    borrow: (...args: ExtractArgs<Contract['mutations']['borrow']>) =>
      mutate(walletClient!, mutation.borrow, { address })(...args),
    repayDebt: (...args: ExtractArgs<Contract['mutations']['repayDebt']>) =>
      mutate(walletClient!, mutation.repayDebt, { address })(...args),
    claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) =>
      mutate(walletClient!, mutation.claimRewards, { address })(...args),
    addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) =>
      mutate(walletClient!, mutation.addLiquidity, { address })(...args),
    removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) =>
      mutate(walletClient!, mutation.removeLiquidity, { address })(...args),
    transferFunds: (...args: ExtractArgs<Contract['mutations']['transferFunds']>) =>
      mutate(walletClient!, mutation.transferFunds, { address })(...args),
    convertEthToWeth: (...args: ExtractArgs<Contract['mutations']['convertEthToWeth']>) =>
      mutate(walletClient!, mutation.convertEthToWeth, { address })(...args),
    convertWethToEth: (...args: ExtractArgs<Contract['mutations']['convertWethToEth']>) =>
      mutate(walletClient!, mutation.convertWethToEth, { address })(...args),
    recoverTrialFunds: (...args: ExtractArgs<Contract['mutations']['recoverTrialFunds']>) =>
      mutate(walletClient!, mutation.recoverTrialFunds, { address })(...args),
    recoverNft: (...args: ExtractArgs<Contract['mutations']['recoverNft']>) =>
      mutate(walletClient!, mutation.recoverNft, { address })(...args),
  }
}
