/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'helperAddr',
        type: 'address',
      },
    ],
    name: 'LegoHelperSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevGov',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeInitiated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevGov',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'cancelledGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'delayBlocks',
        type: 'uint256',
      },
    ],
    name: 'GovChangeDelaySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'NewAddyPending',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'NewAddyConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'NewPendingAddyCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'newAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'prevAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'version',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyUpdatePending',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'newAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'prevAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'version',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyUpdateConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'newAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'prevAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyUpdateCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'version',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyDisablePending',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'version',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyDisableConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyDisableCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'delayBlocks',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyChangeDelaySet',
    type: 'event',
  },
  {
    inputs: [
      {
        name: '_address',
        type: 'address',
      },
    ],
    name: 'canGovern',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasPendingGovChange',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    name: 'changeGovernance',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmGovernanceChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelGovernanceChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    name: 'setGovernanceChangeDelay',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'governance',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingGov',
    outputs: [
      {
        components: [
          {
            name: 'newGov',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'govChangeDelay',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MIN_GOV_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_GOV_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'isYieldLego',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'isValidNewLegoAddr',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
      {
        name: '_description',
        type: 'string',
      },
      {
        name: '_legoType',
        type: 'uint256',
      },
    ],
    name: 'registerNewLego',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'confirmNewLegoRegistration',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'cancelPendingNewLego',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    name: 'isValidLegoUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    name: 'updateLegoAddr',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'confirmLegoUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'cancelPendingLegoUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'isValidLegoDisable',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'disableLegoAddr',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'confirmLegoDisable',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'cancelPendingLegoDisable',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    name: 'setLegoChangeDelay',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'legoChangeDelay',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'setLegoChangeDelayToMin',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'numLegosRaw',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'isValidLegoAddr',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'isValidLegoId',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'getLegoId',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'getLegoAddr',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'getLegoInfo',
    outputs: [
      {
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
          {
            name: 'description',
            type: 'string',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'getLegoDescription',
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNumLegos',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getLastLegoAddr',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getLastLegoId',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    name: 'getUnderlyingAsset',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    name: 'getUnderlyingForUser',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    name: 'getVaultTokensForUser',
    outputs: [
      {
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'vaultToken',
            type: 'address',
          },
        ],
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    name: 'getLegoFromVaultToken',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    name: 'isVaultToken',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_helperAddr',
        type: 'address',
      },
    ],
    name: 'isValidLegoHelper',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_helperAddr',
        type: 'address',
      },
    ],
    name: 'setLegoHelper',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'pendingLegoType',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    name: 'legoIdToType',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'legoHelper',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addyRegistry',
        type: 'address',
      },
      {
        name: '_minLegoChangeDelay',
        type: 'uint256',
      },
      {
        name: '_maxLegoChangeDelay',
        type: 'uint256',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
] as const

export const deployAddress: Address | undefined = '0x8D8593FE154d14976352FA2CE30322EcDF99C72a'

export type Contract = {
  calls: {
    canGovern: (address: `0x${string}`) => Promise<boolean>
    hasPendingGovChange: () => Promise<boolean>
    governance: () => Promise<`0x${string}`>
    pendingGov: () => Promise<{ newGov: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    govChangeDelay: () => Promise<bigint>
    MIN_GOV_CHANGE_DELAY: () => Promise<bigint>
    MAX_GOV_CHANGE_DELAY: () => Promise<bigint>
    isYieldLego: (legoId: bigint) => Promise<boolean>
    isValidNewLegoAddr: (addr: `0x${string}`) => Promise<boolean>
    isValidLegoUpdate: (legoId: bigint, newAddr: `0x${string}`) => Promise<boolean>
    isValidLegoDisable: (legoId: bigint) => Promise<boolean>
    legoChangeDelay: () => Promise<bigint>
    numLegosRaw: () => Promise<bigint>
    isValidLegoAddr: (addr: `0x${string}`) => Promise<boolean>
    isValidLegoId: (legoId: bigint) => Promise<boolean>
    getLegoId: (addr: `0x${string}`) => Promise<bigint>
    getLegoAddr: (legoId: bigint) => Promise<`0x${string}`>
    getLegoInfo: (
      legoId: bigint,
    ) => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint; description: string }>
    getLegoDescription: (legoId: bigint) => Promise<string>
    getNumLegos: () => Promise<bigint>
    getLastLegoAddr: () => Promise<`0x${string}`>
    getLastLegoId: () => Promise<bigint>
    getUnderlyingAsset: (vaultToken: `0x${string}`) => Promise<`0x${string}`>
    getUnderlyingForUser: (user: `0x${string}`, asset: `0x${string}`) => Promise<bigint>
    getVaultTokensForUser: (
      user: `0x${string}`,
      asset: `0x${string}`,
    ) => Promise<{ legoId: bigint; vaultToken: `0x${string}` }[]>
    getLegoFromVaultToken: (vaultToken: `0x${string}`) => Promise<[bigint, `0x${string}`]>
    isVaultToken: (vaultToken: `0x${string}`) => Promise<boolean>
    isValidLegoHelper: (helperAddr: `0x${string}`) => Promise<boolean>
    pendingLegoType: (arg0: `0x${string}`) => Promise<bigint>
    legoIdToType: (arg0: bigint) => Promise<bigint>
    legoHelper: () => Promise<`0x${string}`>
  }
  mutations: {
    changeGovernance: (newGov: `0x${string}`) => Promise<void>
    confirmGovernanceChange: () => Promise<void>
    cancelGovernanceChange: () => Promise<void>
    setGovernanceChangeDelay: (numBlocks: bigint) => Promise<void>
    registerNewLego: (addr: `0x${string}`, description: string, legoType: bigint) => Promise<boolean>
    confirmNewLegoRegistration: (addr: `0x${string}`) => Promise<bigint>
    cancelPendingNewLego: (addr: `0x${string}`) => Promise<boolean>
    updateLegoAddr: (legoId: bigint, newAddr: `0x${string}`) => Promise<boolean>
    confirmLegoUpdate: (legoId: bigint) => Promise<boolean>
    cancelPendingLegoUpdate: (legoId: bigint) => Promise<boolean>
    disableLegoAddr: (legoId: bigint) => Promise<boolean>
    confirmLegoDisable: (legoId: bigint) => Promise<boolean>
    cancelPendingLegoDisable: (legoId: bigint) => Promise<boolean>
    setLegoChangeDelay: (numBlocks: bigint) => Promise<boolean>
    setLegoChangeDelayToMin: () => Promise<boolean>
    setLegoHelper: (helperAddr: `0x${string}`) => Promise<boolean>
  }
  events: {
    LegoHelperSet: (helperAddr: `0x${string}`) => Promise<void>
    GovChangeInitiated: (prevGov: `0x${string}`, newGov: `0x${string}`, confirmBlock: bigint) => Promise<void>
    GovChangeConfirmed: (
      prevGov: `0x${string}`,
      newGov: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    GovChangeCancelled: (cancelledGov: `0x${string}`, initiatedBlock: bigint, confirmBlock: bigint) => Promise<void>
    GovChangeDelaySet: (delayBlocks: bigint) => Promise<void>
    NewAddyPending: (addr: `0x${string}`, description: string, confirmBlock: bigint, registry: string) => Promise<void>
    NewAddyConfirmed: (addr: `0x${string}`, addyId: bigint, description: string, registry: string) => Promise<void>
    NewPendingAddyCancelled: (
      description: string,
      addr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddyUpdatePending: (
      addyId: bigint,
      description: string,
      newAddr: `0x${string}`,
      prevAddr: `0x${string}`,
      version: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddyUpdateConfirmed: (
      addyId: bigint,
      description: string,
      newAddr: `0x${string}`,
      prevAddr: `0x${string}`,
      version: bigint,
      registry: string,
    ) => Promise<void>
    AddyUpdateCancelled: (
      addyId: bigint,
      description: string,
      newAddr: `0x${string}`,
      prevAddr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddyDisablePending: (
      addyId: bigint,
      description: string,
      addr: `0x${string}`,
      version: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddyDisableConfirmed: (
      addyId: bigint,
      description: string,
      addr: `0x${string}`,
      version: bigint,
      registry: string,
    ) => Promise<void>
    AddyDisableCancelled: (
      addyId: bigint,
      description: string,
      addr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddyChangeDelaySet: (delayBlocks: bigint, registry: string) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'LegoRegistry'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'LegoRegistry' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => getRequest('canGovern', args),
  hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
    getRequest('hasPendingGovChange', args),
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => getRequest('governance', args),
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => getRequest('pendingGov', args),
  govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) => getRequest('govChangeDelay', args),
  MIN_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>) =>
    getRequest('MIN_GOV_CHANGE_DELAY', args),
  MAX_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>) =>
    getRequest('MAX_GOV_CHANGE_DELAY', args),
  isYieldLego: (...args: ExtractArgs<Contract['calls']['isYieldLego']>) => getRequest('isYieldLego', args),
  isValidNewLegoAddr: (...args: ExtractArgs<Contract['calls']['isValidNewLegoAddr']>) =>
    getRequest('isValidNewLegoAddr', args),
  isValidLegoUpdate: (...args: ExtractArgs<Contract['calls']['isValidLegoUpdate']>) =>
    getRequest('isValidLegoUpdate', args),
  isValidLegoDisable: (...args: ExtractArgs<Contract['calls']['isValidLegoDisable']>) =>
    getRequest('isValidLegoDisable', args),
  legoChangeDelay: (...args: ExtractArgs<Contract['calls']['legoChangeDelay']>) => getRequest('legoChangeDelay', args),
  numLegosRaw: (...args: ExtractArgs<Contract['calls']['numLegosRaw']>) => getRequest('numLegosRaw', args),
  isValidLegoAddr: (...args: ExtractArgs<Contract['calls']['isValidLegoAddr']>) => getRequest('isValidLegoAddr', args),
  isValidLegoId: (...args: ExtractArgs<Contract['calls']['isValidLegoId']>) => getRequest('isValidLegoId', args),
  getLegoId: (...args: ExtractArgs<Contract['calls']['getLegoId']>) => getRequest('getLegoId', args),
  getLegoAddr: (...args: ExtractArgs<Contract['calls']['getLegoAddr']>) => getRequest('getLegoAddr', args),
  getLegoInfo: (...args: ExtractArgs<Contract['calls']['getLegoInfo']>) => getRequest('getLegoInfo', args),
  getLegoDescription: (...args: ExtractArgs<Contract['calls']['getLegoDescription']>) =>
    getRequest('getLegoDescription', args),
  getNumLegos: (...args: ExtractArgs<Contract['calls']['getNumLegos']>) => getRequest('getNumLegos', args),
  getLastLegoAddr: (...args: ExtractArgs<Contract['calls']['getLastLegoAddr']>) => getRequest('getLastLegoAddr', args),
  getLastLegoId: (...args: ExtractArgs<Contract['calls']['getLastLegoId']>) => getRequest('getLastLegoId', args),
  getUnderlyingAsset: (...args: ExtractArgs<Contract['calls']['getUnderlyingAsset']>) =>
    getRequest('getUnderlyingAsset', args),
  getUnderlyingForUser: (...args: ExtractArgs<Contract['calls']['getUnderlyingForUser']>) =>
    getRequest('getUnderlyingForUser', args),
  getVaultTokensForUser: (...args: ExtractArgs<Contract['calls']['getVaultTokensForUser']>) =>
    getRequest('getVaultTokensForUser', args),
  getLegoFromVaultToken: (...args: ExtractArgs<Contract['calls']['getLegoFromVaultToken']>) =>
    getRequest('getLegoFromVaultToken', args),
  isVaultToken: (...args: ExtractArgs<Contract['calls']['isVaultToken']>) => getRequest('isVaultToken', args),
  isValidLegoHelper: (...args: ExtractArgs<Contract['calls']['isValidLegoHelper']>) =>
    getRequest('isValidLegoHelper', args),
  pendingLegoType: (...args: ExtractArgs<Contract['calls']['pendingLegoType']>) => getRequest('pendingLegoType', args),
  legoIdToType: (...args: ExtractArgs<Contract['calls']['legoIdToType']>) => getRequest('legoIdToType', args),
  legoHelper: (...args: ExtractArgs<Contract['calls']['legoHelper']>) => getRequest('legoHelper', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'LegoRegistry' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'LegoRegistry'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  changeGovernance: getMutation('changeGovernance'),
  confirmGovernanceChange: getMutation('confirmGovernanceChange'),
  cancelGovernanceChange: getMutation('cancelGovernanceChange'),
  setGovernanceChangeDelay: getMutation('setGovernanceChangeDelay'),
  registerNewLego: getMutation('registerNewLego'),
  confirmNewLegoRegistration: getMutation('confirmNewLegoRegistration'),
  cancelPendingNewLego: getMutation('cancelPendingNewLego'),
  updateLegoAddr: getMutation('updateLegoAddr'),
  confirmLegoUpdate: getMutation('confirmLegoUpdate'),
  cancelPendingLegoUpdate: getMutation('cancelPendingLegoUpdate'),
  disableLegoAddr: getMutation('disableLegoAddr'),
  confirmLegoDisable: getMutation('confirmLegoDisable'),
  cancelPendingLegoDisable: getMutation('cancelPendingLegoDisable'),
  setLegoChangeDelay: getMutation('setLegoChangeDelay'),
  setLegoChangeDelayToMin: getMutation('setLegoChangeDelayToMin'),
  setLegoHelper: getMutation('setLegoHelper'),
}

export type SDK = {
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => Promise<CallReturn<'canGovern'>>
  hasPendingGovChange: (
    ...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>
  ) => Promise<CallReturn<'hasPendingGovChange'>>
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => Promise<CallReturn<'governance'>>
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => Promise<CallReturn<'pendingGov'>>
  govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) => Promise<CallReturn<'govChangeDelay'>>
  MIN_GOV_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MIN_GOV_CHANGE_DELAY'>>
  MAX_GOV_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MAX_GOV_CHANGE_DELAY'>>
  isYieldLego: (...args: ExtractArgs<Contract['calls']['isYieldLego']>) => Promise<CallReturn<'isYieldLego'>>
  isValidNewLegoAddr: (
    ...args: ExtractArgs<Contract['calls']['isValidNewLegoAddr']>
  ) => Promise<CallReturn<'isValidNewLegoAddr'>>
  isValidLegoUpdate: (
    ...args: ExtractArgs<Contract['calls']['isValidLegoUpdate']>
  ) => Promise<CallReturn<'isValidLegoUpdate'>>
  isValidLegoDisable: (
    ...args: ExtractArgs<Contract['calls']['isValidLegoDisable']>
  ) => Promise<CallReturn<'isValidLegoDisable'>>
  legoChangeDelay: (
    ...args: ExtractArgs<Contract['calls']['legoChangeDelay']>
  ) => Promise<CallReturn<'legoChangeDelay'>>
  numLegosRaw: (...args: ExtractArgs<Contract['calls']['numLegosRaw']>) => Promise<CallReturn<'numLegosRaw'>>
  isValidLegoAddr: (
    ...args: ExtractArgs<Contract['calls']['isValidLegoAddr']>
  ) => Promise<CallReturn<'isValidLegoAddr'>>
  isValidLegoId: (...args: ExtractArgs<Contract['calls']['isValidLegoId']>) => Promise<CallReturn<'isValidLegoId'>>
  getLegoId: (...args: ExtractArgs<Contract['calls']['getLegoId']>) => Promise<CallReturn<'getLegoId'>>
  getLegoAddr: (...args: ExtractArgs<Contract['calls']['getLegoAddr']>) => Promise<CallReturn<'getLegoAddr'>>
  getLegoInfo: (...args: ExtractArgs<Contract['calls']['getLegoInfo']>) => Promise<CallReturn<'getLegoInfo'>>
  getLegoDescription: (
    ...args: ExtractArgs<Contract['calls']['getLegoDescription']>
  ) => Promise<CallReturn<'getLegoDescription'>>
  getNumLegos: (...args: ExtractArgs<Contract['calls']['getNumLegos']>) => Promise<CallReturn<'getNumLegos'>>
  getLastLegoAddr: (
    ...args: ExtractArgs<Contract['calls']['getLastLegoAddr']>
  ) => Promise<CallReturn<'getLastLegoAddr'>>
  getLastLegoId: (...args: ExtractArgs<Contract['calls']['getLastLegoId']>) => Promise<CallReturn<'getLastLegoId'>>
  getUnderlyingAsset: (
    ...args: ExtractArgs<Contract['calls']['getUnderlyingAsset']>
  ) => Promise<CallReturn<'getUnderlyingAsset'>>
  getUnderlyingForUser: (
    ...args: ExtractArgs<Contract['calls']['getUnderlyingForUser']>
  ) => Promise<CallReturn<'getUnderlyingForUser'>>
  getVaultTokensForUser: (
    ...args: ExtractArgs<Contract['calls']['getVaultTokensForUser']>
  ) => Promise<CallReturn<'getVaultTokensForUser'>>
  getLegoFromVaultToken: (
    ...args: ExtractArgs<Contract['calls']['getLegoFromVaultToken']>
  ) => Promise<CallReturn<'getLegoFromVaultToken'>>
  isVaultToken: (...args: ExtractArgs<Contract['calls']['isVaultToken']>) => Promise<CallReturn<'isVaultToken'>>
  isValidLegoHelper: (
    ...args: ExtractArgs<Contract['calls']['isValidLegoHelper']>
  ) => Promise<CallReturn<'isValidLegoHelper'>>
  pendingLegoType: (
    ...args: ExtractArgs<Contract['calls']['pendingLegoType']>
  ) => Promise<CallReturn<'pendingLegoType'>>
  legoIdToType: (...args: ExtractArgs<Contract['calls']['legoIdToType']>) => Promise<CallReturn<'legoIdToType'>>
  legoHelper: (...args: ExtractArgs<Contract['calls']['legoHelper']>) => Promise<CallReturn<'legoHelper'>>
  changeGovernance: (...args: ExtractArgs<Contract['mutations']['changeGovernance']>) => Promise<Address>
  confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) => Promise<Address>
  cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) => Promise<Address>
  setGovernanceChangeDelay: (
    ...args: ExtractArgs<Contract['mutations']['setGovernanceChangeDelay']>
  ) => Promise<Address>
  registerNewLego: (...args: ExtractArgs<Contract['mutations']['registerNewLego']>) => Promise<Address>
  confirmNewLegoRegistration: (
    ...args: ExtractArgs<Contract['mutations']['confirmNewLegoRegistration']>
  ) => Promise<Address>
  cancelPendingNewLego: (...args: ExtractArgs<Contract['mutations']['cancelPendingNewLego']>) => Promise<Address>
  updateLegoAddr: (...args: ExtractArgs<Contract['mutations']['updateLegoAddr']>) => Promise<Address>
  confirmLegoUpdate: (...args: ExtractArgs<Contract['mutations']['confirmLegoUpdate']>) => Promise<Address>
  cancelPendingLegoUpdate: (...args: ExtractArgs<Contract['mutations']['cancelPendingLegoUpdate']>) => Promise<Address>
  disableLegoAddr: (...args: ExtractArgs<Contract['mutations']['disableLegoAddr']>) => Promise<Address>
  confirmLegoDisable: (...args: ExtractArgs<Contract['mutations']['confirmLegoDisable']>) => Promise<Address>
  cancelPendingLegoDisable: (
    ...args: ExtractArgs<Contract['mutations']['cancelPendingLegoDisable']>
  ) => Promise<Address>
  setLegoChangeDelay: (...args: ExtractArgs<Contract['mutations']['setLegoChangeDelay']>) => Promise<Address>
  setLegoChangeDelayToMin: (...args: ExtractArgs<Contract['mutations']['setLegoChangeDelayToMin']>) => Promise<Address>
  setLegoHelper: (...args: ExtractArgs<Contract['mutations']['setLegoHelper']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    // Queries
    canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) =>
      singleQuery(publicClient!, call.canGovern(...args)) as Promise<CallReturn<'canGovern'>>,
    hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
      singleQuery(publicClient!, call.hasPendingGovChange(...args)) as Promise<CallReturn<'hasPendingGovChange'>>,
    governance: (...args: ExtractArgs<Contract['calls']['governance']>) =>
      singleQuery(publicClient!, call.governance(...args)) as Promise<CallReturn<'governance'>>,
    pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) =>
      singleQuery(publicClient!, call.pendingGov(...args)) as Promise<CallReturn<'pendingGov'>>,
    govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) =>
      singleQuery(publicClient!, call.govChangeDelay(...args)) as Promise<CallReturn<'govChangeDelay'>>,
    MIN_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MIN_GOV_CHANGE_DELAY(...args)) as Promise<CallReturn<'MIN_GOV_CHANGE_DELAY'>>,
    MAX_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MAX_GOV_CHANGE_DELAY(...args)) as Promise<CallReturn<'MAX_GOV_CHANGE_DELAY'>>,
    isYieldLego: (...args: ExtractArgs<Contract['calls']['isYieldLego']>) =>
      singleQuery(publicClient!, call.isYieldLego(...args)) as Promise<CallReturn<'isYieldLego'>>,
    isValidNewLegoAddr: (...args: ExtractArgs<Contract['calls']['isValidNewLegoAddr']>) =>
      singleQuery(publicClient!, call.isValidNewLegoAddr(...args)) as Promise<CallReturn<'isValidNewLegoAddr'>>,
    isValidLegoUpdate: (...args: ExtractArgs<Contract['calls']['isValidLegoUpdate']>) =>
      singleQuery(publicClient!, call.isValidLegoUpdate(...args)) as Promise<CallReturn<'isValidLegoUpdate'>>,
    isValidLegoDisable: (...args: ExtractArgs<Contract['calls']['isValidLegoDisable']>) =>
      singleQuery(publicClient!, call.isValidLegoDisable(...args)) as Promise<CallReturn<'isValidLegoDisable'>>,
    legoChangeDelay: (...args: ExtractArgs<Contract['calls']['legoChangeDelay']>) =>
      singleQuery(publicClient!, call.legoChangeDelay(...args)) as Promise<CallReturn<'legoChangeDelay'>>,
    numLegosRaw: (...args: ExtractArgs<Contract['calls']['numLegosRaw']>) =>
      singleQuery(publicClient!, call.numLegosRaw(...args)) as Promise<CallReturn<'numLegosRaw'>>,
    isValidLegoAddr: (...args: ExtractArgs<Contract['calls']['isValidLegoAddr']>) =>
      singleQuery(publicClient!, call.isValidLegoAddr(...args)) as Promise<CallReturn<'isValidLegoAddr'>>,
    isValidLegoId: (...args: ExtractArgs<Contract['calls']['isValidLegoId']>) =>
      singleQuery(publicClient!, call.isValidLegoId(...args)) as Promise<CallReturn<'isValidLegoId'>>,
    getLegoId: (...args: ExtractArgs<Contract['calls']['getLegoId']>) =>
      singleQuery(publicClient!, call.getLegoId(...args)) as Promise<CallReturn<'getLegoId'>>,
    getLegoAddr: (...args: ExtractArgs<Contract['calls']['getLegoAddr']>) =>
      singleQuery(publicClient!, call.getLegoAddr(...args)) as Promise<CallReturn<'getLegoAddr'>>,
    getLegoInfo: (...args: ExtractArgs<Contract['calls']['getLegoInfo']>) =>
      singleQuery(publicClient!, call.getLegoInfo(...args)) as Promise<CallReturn<'getLegoInfo'>>,
    getLegoDescription: (...args: ExtractArgs<Contract['calls']['getLegoDescription']>) =>
      singleQuery(publicClient!, call.getLegoDescription(...args)) as Promise<CallReturn<'getLegoDescription'>>,
    getNumLegos: (...args: ExtractArgs<Contract['calls']['getNumLegos']>) =>
      singleQuery(publicClient!, call.getNumLegos(...args)) as Promise<CallReturn<'getNumLegos'>>,
    getLastLegoAddr: (...args: ExtractArgs<Contract['calls']['getLastLegoAddr']>) =>
      singleQuery(publicClient!, call.getLastLegoAddr(...args)) as Promise<CallReturn<'getLastLegoAddr'>>,
    getLastLegoId: (...args: ExtractArgs<Contract['calls']['getLastLegoId']>) =>
      singleQuery(publicClient!, call.getLastLegoId(...args)) as Promise<CallReturn<'getLastLegoId'>>,
    getUnderlyingAsset: (...args: ExtractArgs<Contract['calls']['getUnderlyingAsset']>) =>
      singleQuery(publicClient!, call.getUnderlyingAsset(...args)) as Promise<CallReturn<'getUnderlyingAsset'>>,
    getUnderlyingForUser: (...args: ExtractArgs<Contract['calls']['getUnderlyingForUser']>) =>
      singleQuery(publicClient!, call.getUnderlyingForUser(...args)) as Promise<CallReturn<'getUnderlyingForUser'>>,
    getVaultTokensForUser: (...args: ExtractArgs<Contract['calls']['getVaultTokensForUser']>) =>
      singleQuery(publicClient!, call.getVaultTokensForUser(...args)) as Promise<CallReturn<'getVaultTokensForUser'>>,
    getLegoFromVaultToken: (...args: ExtractArgs<Contract['calls']['getLegoFromVaultToken']>) =>
      singleQuery(publicClient!, call.getLegoFromVaultToken(...args)) as Promise<CallReturn<'getLegoFromVaultToken'>>,
    isVaultToken: (...args: ExtractArgs<Contract['calls']['isVaultToken']>) =>
      singleQuery(publicClient!, call.isVaultToken(...args)) as Promise<CallReturn<'isVaultToken'>>,
    isValidLegoHelper: (...args: ExtractArgs<Contract['calls']['isValidLegoHelper']>) =>
      singleQuery(publicClient!, call.isValidLegoHelper(...args)) as Promise<CallReturn<'isValidLegoHelper'>>,
    pendingLegoType: (...args: ExtractArgs<Contract['calls']['pendingLegoType']>) =>
      singleQuery(publicClient!, call.pendingLegoType(...args)) as Promise<CallReturn<'pendingLegoType'>>,
    legoIdToType: (...args: ExtractArgs<Contract['calls']['legoIdToType']>) =>
      singleQuery(publicClient!, call.legoIdToType(...args)) as Promise<CallReturn<'legoIdToType'>>,
    legoHelper: (...args: ExtractArgs<Contract['calls']['legoHelper']>) =>
      singleQuery(publicClient!, call.legoHelper(...args)) as Promise<CallReturn<'legoHelper'>>,

    // Mutations
    changeGovernance: (...args: ExtractArgs<Contract['mutations']['changeGovernance']>) =>
      mutate(walletClient!, mutation.changeGovernance)(...args),
    confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) =>
      mutate(walletClient!, mutation.confirmGovernanceChange)(...args),
    cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) =>
      mutate(walletClient!, mutation.cancelGovernanceChange)(...args),
    setGovernanceChangeDelay: (...args: ExtractArgs<Contract['mutations']['setGovernanceChangeDelay']>) =>
      mutate(walletClient!, mutation.setGovernanceChangeDelay)(...args),
    registerNewLego: (...args: ExtractArgs<Contract['mutations']['registerNewLego']>) =>
      mutate(walletClient!, mutation.registerNewLego)(...args),
    confirmNewLegoRegistration: (...args: ExtractArgs<Contract['mutations']['confirmNewLegoRegistration']>) =>
      mutate(walletClient!, mutation.confirmNewLegoRegistration)(...args),
    cancelPendingNewLego: (...args: ExtractArgs<Contract['mutations']['cancelPendingNewLego']>) =>
      mutate(walletClient!, mutation.cancelPendingNewLego)(...args),
    updateLegoAddr: (...args: ExtractArgs<Contract['mutations']['updateLegoAddr']>) =>
      mutate(walletClient!, mutation.updateLegoAddr)(...args),
    confirmLegoUpdate: (...args: ExtractArgs<Contract['mutations']['confirmLegoUpdate']>) =>
      mutate(walletClient!, mutation.confirmLegoUpdate)(...args),
    cancelPendingLegoUpdate: (...args: ExtractArgs<Contract['mutations']['cancelPendingLegoUpdate']>) =>
      mutate(walletClient!, mutation.cancelPendingLegoUpdate)(...args),
    disableLegoAddr: (...args: ExtractArgs<Contract['mutations']['disableLegoAddr']>) =>
      mutate(walletClient!, mutation.disableLegoAddr)(...args),
    confirmLegoDisable: (...args: ExtractArgs<Contract['mutations']['confirmLegoDisable']>) =>
      mutate(walletClient!, mutation.confirmLegoDisable)(...args),
    cancelPendingLegoDisable: (...args: ExtractArgs<Contract['mutations']['cancelPendingLegoDisable']>) =>
      mutate(walletClient!, mutation.cancelPendingLegoDisable)(...args),
    setLegoChangeDelay: (...args: ExtractArgs<Contract['mutations']['setLegoChangeDelay']>) =>
      mutate(walletClient!, mutation.setLegoChangeDelay)(...args),
    setLegoChangeDelayToMin: (...args: ExtractArgs<Contract['mutations']['setLegoChangeDelayToMin']>) =>
      mutate(walletClient!, mutation.setLegoChangeDelayToMin)(...args),
    setLegoHelper: (...args: ExtractArgs<Contract['mutations']['setLegoHelper']>) =>
      mutate(walletClient!, mutation.setLegoHelper)(...args),
  }
}
