/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'PayeeAdded',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'payee',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expiryBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'canPull',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'periodLength',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxNumTxsPerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txCooldownBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'failOnZeroPrice',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'primaryAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'onlyPrimaryAsset',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'unitPerTxCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unitPerPeriodCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unitLifetimeCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdPerTxCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdPerPeriodCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdLifetimeCap',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PayeeUpdated',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'payee',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expiryBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'canPull',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'periodLength',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxNumTxsPerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txCooldownBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'failOnZeroPrice',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'primaryAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'onlyPrimaryAsset',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'unitPerTxCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unitPerPeriodCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unitLifetimeCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdPerTxCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdPerPeriodCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdLifetimeCap',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PayeeRemoved',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'payee',
        type: 'address',
        indexed: true,
      },
      {
        name: 'removedBy',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GlobalPayeeSettingsModified',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'defaultPeriodLength',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'startDelay',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'activationLength',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxNumTxsPerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txCooldownBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'failOnZeroPrice',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canPayOwner',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canPull',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'usdPerTxCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdPerPeriodCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdLifetimeCap',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PayeePending',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'payee',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addedBy',
        type: 'address',
        indexed: true,
      },
      {
        name: 'canPull',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'periodLength',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxNumTxsPerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txCooldownBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'failOnZeroPrice',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'primaryAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'onlyPrimaryAsset',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'unitPerTxCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unitPerPeriodCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unitLifetimeCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdPerTxCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdPerPeriodCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdLifetimeCap',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PayeePendingConfirmed',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'payee',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmedBy',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PayeePendingCancelled',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'payee',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'cancelledBy',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setGlobalPayeeSettings',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_defaultPeriodLength',
        type: 'uint256',
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_canPayOwner',
        type: 'bool',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_primaryAsset',
        type: 'address',
      },
      {
        name: '_onlyPrimaryAsset',
        type: 'bool',
      },
      {
        name: '_unitLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_primaryAsset',
        type: 'address',
      },
      {
        name: '_onlyPrimaryAsset',
        type: 'bool',
      },
      {
        name: '_unitLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_primaryAsset',
        type: 'address',
      },
      {
        name: '_onlyPrimaryAsset',
        type: 'bool',
      },
      {
        name: '_unitLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'updatePayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_primaryAsset',
        type: 'address',
      },
      {
        name: '_onlyPrimaryAsset',
        type: 'bool',
      },
      {
        name: '_unitLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removePayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPendingPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_primaryAsset',
        type: 'address',
      },
      {
        name: '_onlyPrimaryAsset',
        type: 'bool',
      },
      {
        name: '_unitLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPendingPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_primaryAsset',
        type: 'address',
      },
      {
        name: '_onlyPrimaryAsset',
        type: 'bool',
      },
      {
        name: '_unitLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPendingPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_primaryAsset',
        type: 'address',
      },
      {
        name: '_onlyPrimaryAsset',
        type: 'bool',
      },
      {
        name: '_unitLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmPendingPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelPendingPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidNewPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_primaryAsset',
        type: 'address',
      },
      {
        name: '_onlyPrimaryAsset',
        type: 'bool',
      },
      {
        name: '_unitLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidNewPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_primaryAsset',
        type: 'address',
      },
      {
        name: '_onlyPrimaryAsset',
        type: 'bool',
      },
      {
        name: '_unitLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidNewPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_primaryAsset',
        type: 'address',
      },
      {
        name: '_onlyPrimaryAsset',
        type: 'bool',
      },
      {
        name: '_unitLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidPayeeUpdate',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_primaryAsset',
        type: 'address',
      },
      {
        name: '_onlyPrimaryAsset',
        type: 'bool',
      },
      {
        name: '_unitLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canAddPendingPayee',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
      {
        name: '_caller',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidGlobalPayeeSettings',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_defaultPeriodLength',
        type: 'uint256',
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
      {
        name: '_maxNumTxsPerPeriod',
        type: 'uint256',
      },
      {
        name: '_txCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_failOnZeroPrice',
        type: 'bool',
      },
      {
        name: '_usdLimits',
        type: 'tuple',
        components: [
          {
            name: 'perTxCap',
            type: 'uint256',
          },
          {
            name: 'perPeriodCap',
            type: 'uint256',
          },
          {
            name: 'lifetimeCap',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_canPayOwner',
        type: 'bool',
      },
      {
        name: '_canPull',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPayeeConfig',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_payee',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'owner',
            type: 'address',
          },
          {
            name: 'wallet',
            type: 'address',
          },
          {
            name: 'isRegisteredPayee',
            type: 'bool',
          },
          {
            name: 'isWhitelisted',
            type: 'bool',
          },
          {
            name: 'payeeSettings',
            type: 'tuple',
            components: [
              {
                name: 'startBlock',
                type: 'uint256',
              },
              {
                name: 'expiryBlock',
                type: 'uint256',
              },
              {
                name: 'canPull',
                type: 'bool',
              },
              {
                name: 'periodLength',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
              {
                name: 'primaryAsset',
                type: 'address',
              },
              {
                name: 'onlyPrimaryAsset',
                type: 'bool',
              },
              {
                name: 'unitLimits',
                type: 'tuple',
                components: [
                  {
                    name: 'perTxCap',
                    type: 'uint256',
                  },
                  {
                    name: 'perPeriodCap',
                    type: 'uint256',
                  },
                  {
                    name: 'lifetimeCap',
                    type: 'uint256',
                  },
                ],
              },
              {
                name: 'usdLimits',
                type: 'tuple',
                components: [
                  {
                    name: 'perTxCap',
                    type: 'uint256',
                  },
                  {
                    name: 'perPeriodCap',
                    type: 'uint256',
                  },
                  {
                    name: 'lifetimeCap',
                    type: 'uint256',
                  },
                ],
              },
            ],
          },
          {
            name: 'globalPayeeSettings',
            type: 'tuple',
            components: [
              {
                name: 'defaultPeriodLength',
                type: 'uint256',
              },
              {
                name: 'startDelay',
                type: 'uint256',
              },
              {
                name: 'activationLength',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
              {
                name: 'usdLimits',
                type: 'tuple',
                components: [
                  {
                    name: 'perTxCap',
                    type: 'uint256',
                  },
                  {
                    name: 'perPeriodCap',
                    type: 'uint256',
                  },
                  {
                    name: 'lifetimeCap',
                    type: 'uint256',
                  },
                ],
              },
              {
                name: 'canPayOwner',
                type: 'bool',
              },
              {
                name: 'canPull',
                type: 'bool',
              },
            ],
          },
          {
            name: 'timeLock',
            type: 'uint256',
          },
          {
            name: 'walletConfig',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'createDefaultGlobalPayeeSettings',
    inputs: [
      {
        name: '_defaultPeriodLength',
        type: 'uint256',
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'defaultPeriodLength',
            type: 'uint256',
          },
          {
            name: 'startDelay',
            type: 'uint256',
          },
          {
            name: 'activationLength',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
          {
            name: 'usdLimits',
            type: 'tuple',
            components: [
              {
                name: 'perTxCap',
                type: 'uint256',
              },
              {
                name: 'perPeriodCap',
                type: 'uint256',
              },
              {
                name: 'lifetimeCap',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'canPayOwner',
            type: 'bool',
          },
          {
            name: 'canPull',
            type: 'bool',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'UNDY_HQ',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MIN_PAYEE_PERIOD',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MAX_PAYEE_PERIOD',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MIN_ACTIVATION_LENGTH',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MAX_ACTIVATION_LENGTH',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MAX_START_DELAY',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_minPayeePeriod',
        type: 'uint256',
      },
      {
        name: '_maxPayeePeriod',
        type: 'uint256',
      },
      {
        name: '_minActivationLength',
        type: 'uint256',
      },
      {
        name: '_maxActivationLength',
        type: 'uint256',
      },
      {
        name: '_maxStartDelay',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0x5aDc5a2b5018426243C98Aa52E4696F614274946'

export type Contract = {
  calls: {
    isValidNewPayee: (
      userWallet: `0x${string}`,
      payee: `0x${string}`,
      canPull: boolean,
      periodLength: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      primaryAsset: `0x${string}`,
      onlyPrimaryAsset: boolean,
      unitLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
      usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
      startDelay?: bigint,
      activationLength?: bigint,
    ) => Promise<boolean>
    isValidPayeeUpdate: (
      userWallet: `0x${string}`,
      payee: `0x${string}`,
      canPull: boolean,
      periodLength: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      primaryAsset: `0x${string}`,
      onlyPrimaryAsset: boolean,
      unitLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
      usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
    ) => Promise<boolean>
    canAddPendingPayee: (userWallet: `0x${string}`, payee: `0x${string}`, caller: `0x${string}`) => Promise<boolean>
    isValidGlobalPayeeSettings: (
      userWallet: `0x${string}`,
      defaultPeriodLength: bigint,
      startDelay: bigint,
      activationLength: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
      canPayOwner: boolean,
      canPull: boolean,
    ) => Promise<boolean>
    getPayeeConfig: (
      userWallet: `0x${string}`,
      payee: `0x${string}`,
    ) => Promise<{
      owner: `0x${string}`
      wallet: `0x${string}`
      isRegisteredPayee: boolean
      isWhitelisted: boolean
      payeeSettings: {
        startBlock: bigint
        expiryBlock: bigint
        canPull: boolean
        periodLength: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
        primaryAsset: `0x${string}`
        onlyPrimaryAsset: boolean
        unitLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint }
        usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint }
      }
      globalPayeeSettings: {
        defaultPeriodLength: bigint
        startDelay: bigint
        activationLength: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
        usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint }
        canPayOwner: boolean
        canPull: boolean
      }
      timeLock: bigint
      walletConfig: `0x${string}`
    }>
    createDefaultGlobalPayeeSettings: (
      defaultPeriodLength: bigint,
      startDelay: bigint,
      activationLength: bigint,
    ) => Promise<{
      defaultPeriodLength: bigint
      startDelay: bigint
      activationLength: bigint
      maxNumTxsPerPeriod: bigint
      txCooldownBlocks: bigint
      failOnZeroPrice: boolean
      usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint }
      canPayOwner: boolean
      canPull: boolean
    }>
    UNDY_HQ: () => Promise<`0x${string}`>
    MIN_PAYEE_PERIOD: () => Promise<bigint>
    MAX_PAYEE_PERIOD: () => Promise<bigint>
    MIN_ACTIVATION_LENGTH: () => Promise<bigint>
    MAX_ACTIVATION_LENGTH: () => Promise<bigint>
    MAX_START_DELAY: () => Promise<bigint>
  }
  mutations: {
    setGlobalPayeeSettings: (
      userWallet: `0x${string}`,
      defaultPeriodLength: bigint,
      startDelay: bigint,
      activationLength: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
      canPayOwner: boolean,
      canPull: boolean,
    ) => Promise<boolean>
    addPayee: (
      userWallet: `0x${string}`,
      payee: `0x${string}`,
      canPull: boolean,
      periodLength: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      primaryAsset: `0x${string}`,
      onlyPrimaryAsset: boolean,
      unitLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
      usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
      startDelay?: bigint,
      activationLength?: bigint,
    ) => Promise<boolean>
    updatePayee: (
      userWallet: `0x${string}`,
      payee: `0x${string}`,
      canPull: boolean,
      periodLength: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      primaryAsset: `0x${string}`,
      onlyPrimaryAsset: boolean,
      unitLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
      usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
    ) => Promise<boolean>
    removePayee: (userWallet: `0x${string}`, payee: `0x${string}`) => Promise<boolean>
    addPendingPayee: (
      userWallet: `0x${string}`,
      payee: `0x${string}`,
      canPull: boolean,
      periodLength: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      primaryAsset: `0x${string}`,
      onlyPrimaryAsset: boolean,
      unitLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
      usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint },
      startDelay?: bigint,
      activationLength?: bigint,
    ) => Promise<boolean>
    confirmPendingPayee: (userWallet: `0x${string}`, payee: `0x${string}`) => Promise<boolean>
    cancelPendingPayee: (userWallet: `0x${string}`, payee: `0x${string}`) => Promise<boolean>
  }
  events: {
    PayeeAdded: (
      user: `0x${string}`,
      payee: `0x${string}`,
      startBlock: bigint,
      expiryBlock: bigint,
      canPull: boolean,
      periodLength: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      primaryAsset: `0x${string}`,
      onlyPrimaryAsset: boolean,
      unitPerTxCap: bigint,
      unitPerPeriodCap: bigint,
      unitLifetimeCap: bigint,
      usdPerTxCap: bigint,
      usdPerPeriodCap: bigint,
      usdLifetimeCap: bigint,
    ) => Promise<void>
    PayeeUpdated: (
      user: `0x${string}`,
      payee: `0x${string}`,
      startBlock: bigint,
      expiryBlock: bigint,
      canPull: boolean,
      periodLength: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      primaryAsset: `0x${string}`,
      onlyPrimaryAsset: boolean,
      unitPerTxCap: bigint,
      unitPerPeriodCap: bigint,
      unitLifetimeCap: bigint,
      usdPerTxCap: bigint,
      usdPerPeriodCap: bigint,
      usdLifetimeCap: bigint,
    ) => Promise<void>
    PayeeRemoved: (user: `0x${string}`, payee: `0x${string}`, removedBy: `0x${string}`) => Promise<void>
    GlobalPayeeSettingsModified: (
      user: `0x${string}`,
      defaultPeriodLength: bigint,
      startDelay: bigint,
      activationLength: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      canPayOwner: boolean,
      canPull: boolean,
      usdPerTxCap: bigint,
      usdPerPeriodCap: bigint,
      usdLifetimeCap: bigint,
    ) => Promise<void>
    PayeePending: (
      user: `0x${string}`,
      payee: `0x${string}`,
      confirmBlock: bigint,
      addedBy: `0x${string}`,
      canPull: boolean,
      periodLength: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      primaryAsset: `0x${string}`,
      onlyPrimaryAsset: boolean,
      unitPerTxCap: bigint,
      unitPerPeriodCap: bigint,
      unitLifetimeCap: bigint,
      usdPerTxCap: bigint,
      usdPerPeriodCap: bigint,
      usdLifetimeCap: bigint,
    ) => Promise<void>
    PayeePendingConfirmed: (
      user: `0x${string}`,
      payee: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      confirmedBy: `0x${string}`,
    ) => Promise<void>
    PayeePendingCancelled: (
      user: `0x${string}`,
      payee: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      cancelledBy: `0x${string}`,
    ) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'Paymaster'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'Paymaster' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  isValidNewPayee: (...args: ExtractArgs<Contract['calls']['isValidNewPayee']>) => getRequest('isValidNewPayee', args),
  isValidPayeeUpdate: (...args: ExtractArgs<Contract['calls']['isValidPayeeUpdate']>) =>
    getRequest('isValidPayeeUpdate', args),
  canAddPendingPayee: (...args: ExtractArgs<Contract['calls']['canAddPendingPayee']>) =>
    getRequest('canAddPendingPayee', args),
  isValidGlobalPayeeSettings: (...args: ExtractArgs<Contract['calls']['isValidGlobalPayeeSettings']>) =>
    getRequest('isValidGlobalPayeeSettings', args),
  getPayeeConfig: (...args: ExtractArgs<Contract['calls']['getPayeeConfig']>) => getRequest('getPayeeConfig', args),
  createDefaultGlobalPayeeSettings: (...args: ExtractArgs<Contract['calls']['createDefaultGlobalPayeeSettings']>) =>
    getRequest('createDefaultGlobalPayeeSettings', args),
  UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) => getRequest('UNDY_HQ', args),
  MIN_PAYEE_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_PAYEE_PERIOD']>) =>
    getRequest('MIN_PAYEE_PERIOD', args),
  MAX_PAYEE_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_PAYEE_PERIOD']>) =>
    getRequest('MAX_PAYEE_PERIOD', args),
  MIN_ACTIVATION_LENGTH: (...args: ExtractArgs<Contract['calls']['MIN_ACTIVATION_LENGTH']>) =>
    getRequest('MIN_ACTIVATION_LENGTH', args),
  MAX_ACTIVATION_LENGTH: (...args: ExtractArgs<Contract['calls']['MAX_ACTIVATION_LENGTH']>) =>
    getRequest('MAX_ACTIVATION_LENGTH', args),
  MAX_START_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_START_DELAY']>) => getRequest('MAX_START_DELAY', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'Paymaster' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'Paymaster'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  setGlobalPayeeSettings: getMutation('setGlobalPayeeSettings'),
  addPayee: getMutation('addPayee'),
  updatePayee: getMutation('updatePayee'),
  removePayee: getMutation('removePayee'),
  addPendingPayee: getMutation('addPendingPayee'),
  confirmPendingPayee: getMutation('confirmPendingPayee'),
  cancelPendingPayee: getMutation('cancelPendingPayee'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  isValidNewPayee: (
    ...args: ExtractArgs<Contract['calls']['isValidNewPayee']>
  ) => Promise<CallReturn<'isValidNewPayee'>>
  isValidPayeeUpdate: (
    ...args: ExtractArgs<Contract['calls']['isValidPayeeUpdate']>
  ) => Promise<CallReturn<'isValidPayeeUpdate'>>
  canAddPendingPayee: (
    ...args: ExtractArgs<Contract['calls']['canAddPendingPayee']>
  ) => Promise<CallReturn<'canAddPendingPayee'>>
  isValidGlobalPayeeSettings: (
    ...args: ExtractArgs<Contract['calls']['isValidGlobalPayeeSettings']>
  ) => Promise<CallReturn<'isValidGlobalPayeeSettings'>>
  getPayeeConfig: (...args: ExtractArgs<Contract['calls']['getPayeeConfig']>) => Promise<CallReturn<'getPayeeConfig'>>
  createDefaultGlobalPayeeSettings: (
    ...args: ExtractArgs<Contract['calls']['createDefaultGlobalPayeeSettings']>
  ) => Promise<CallReturn<'createDefaultGlobalPayeeSettings'>>
  UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) => Promise<CallReturn<'UNDY_HQ'>>
  MIN_PAYEE_PERIOD: (
    ...args: ExtractArgs<Contract['calls']['MIN_PAYEE_PERIOD']>
  ) => Promise<CallReturn<'MIN_PAYEE_PERIOD'>>
  MAX_PAYEE_PERIOD: (
    ...args: ExtractArgs<Contract['calls']['MAX_PAYEE_PERIOD']>
  ) => Promise<CallReturn<'MAX_PAYEE_PERIOD'>>
  MIN_ACTIVATION_LENGTH: (
    ...args: ExtractArgs<Contract['calls']['MIN_ACTIVATION_LENGTH']>
  ) => Promise<CallReturn<'MIN_ACTIVATION_LENGTH'>>
  MAX_ACTIVATION_LENGTH: (
    ...args: ExtractArgs<Contract['calls']['MAX_ACTIVATION_LENGTH']>
  ) => Promise<CallReturn<'MAX_ACTIVATION_LENGTH'>>
  MAX_START_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MAX_START_DELAY']>
  ) => Promise<CallReturn<'MAX_START_DELAY'>>
  setGlobalPayeeSettings: (...args: ExtractArgs<Contract['mutations']['setGlobalPayeeSettings']>) => Promise<Address>
  addPayee: (...args: ExtractArgs<Contract['mutations']['addPayee']>) => Promise<Address>
  updatePayee: (...args: ExtractArgs<Contract['mutations']['updatePayee']>) => Promise<Address>
  removePayee: (...args: ExtractArgs<Contract['mutations']['removePayee']>) => Promise<Address>
  addPendingPayee: (...args: ExtractArgs<Contract['mutations']['addPendingPayee']>) => Promise<Address>
  confirmPendingPayee: (...args: ExtractArgs<Contract['mutations']['confirmPendingPayee']>) => Promise<Address>
  cancelPendingPayee: (...args: ExtractArgs<Contract['mutations']['cancelPendingPayee']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    isValidNewPayee: (...args: ExtractArgs<Contract['calls']['isValidNewPayee']>) =>
      singleQuery(publicClient!, call.isValidNewPayee(...args)) as Promise<CallReturn<'isValidNewPayee'>>,
    isValidPayeeUpdate: (...args: ExtractArgs<Contract['calls']['isValidPayeeUpdate']>) =>
      singleQuery(publicClient!, call.isValidPayeeUpdate(...args)) as Promise<CallReturn<'isValidPayeeUpdate'>>,
    canAddPendingPayee: (...args: ExtractArgs<Contract['calls']['canAddPendingPayee']>) =>
      singleQuery(publicClient!, call.canAddPendingPayee(...args)) as Promise<CallReturn<'canAddPendingPayee'>>,
    isValidGlobalPayeeSettings: (...args: ExtractArgs<Contract['calls']['isValidGlobalPayeeSettings']>) =>
      singleQuery(publicClient!, call.isValidGlobalPayeeSettings(...args)) as Promise<
        CallReturn<'isValidGlobalPayeeSettings'>
      >,
    getPayeeConfig: (...args: ExtractArgs<Contract['calls']['getPayeeConfig']>) =>
      singleQuery(publicClient!, call.getPayeeConfig(...args)) as Promise<CallReturn<'getPayeeConfig'>>,
    createDefaultGlobalPayeeSettings: (...args: ExtractArgs<Contract['calls']['createDefaultGlobalPayeeSettings']>) =>
      singleQuery(publicClient!, call.createDefaultGlobalPayeeSettings(...args)) as Promise<
        CallReturn<'createDefaultGlobalPayeeSettings'>
      >,
    UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) =>
      singleQuery(publicClient!, call.UNDY_HQ(...args)) as Promise<CallReturn<'UNDY_HQ'>>,
    MIN_PAYEE_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_PAYEE_PERIOD']>) =>
      singleQuery(publicClient!, call.MIN_PAYEE_PERIOD(...args)) as Promise<CallReturn<'MIN_PAYEE_PERIOD'>>,
    MAX_PAYEE_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_PAYEE_PERIOD']>) =>
      singleQuery(publicClient!, call.MAX_PAYEE_PERIOD(...args)) as Promise<CallReturn<'MAX_PAYEE_PERIOD'>>,
    MIN_ACTIVATION_LENGTH: (...args: ExtractArgs<Contract['calls']['MIN_ACTIVATION_LENGTH']>) =>
      singleQuery(publicClient!, call.MIN_ACTIVATION_LENGTH(...args)) as Promise<CallReturn<'MIN_ACTIVATION_LENGTH'>>,
    MAX_ACTIVATION_LENGTH: (...args: ExtractArgs<Contract['calls']['MAX_ACTIVATION_LENGTH']>) =>
      singleQuery(publicClient!, call.MAX_ACTIVATION_LENGTH(...args)) as Promise<CallReturn<'MAX_ACTIVATION_LENGTH'>>,
    MAX_START_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_START_DELAY']>) =>
      singleQuery(publicClient!, call.MAX_START_DELAY(...args)) as Promise<CallReturn<'MAX_START_DELAY'>>,

    // Mutations
    setGlobalPayeeSettings: (...args: ExtractArgs<Contract['mutations']['setGlobalPayeeSettings']>) =>
      mutate(walletClient!, mutation.setGlobalPayeeSettings)(...args),
    addPayee: (...args: ExtractArgs<Contract['mutations']['addPayee']>) =>
      mutate(walletClient!, mutation.addPayee)(...args),
    updatePayee: (...args: ExtractArgs<Contract['mutations']['updatePayee']>) =>
      mutate(walletClient!, mutation.updatePayee)(...args),
    removePayee: (...args: ExtractArgs<Contract['mutations']['removePayee']>) =>
      mutate(walletClient!, mutation.removePayee)(...args),
    addPendingPayee: (...args: ExtractArgs<Contract['mutations']['addPendingPayee']>) =>
      mutate(walletClient!, mutation.addPendingPayee)(...args),
    confirmPendingPayee: (...args: ExtractArgs<Contract['mutations']['confirmPendingPayee']>) =>
      mutate(walletClient!, mutation.confirmPendingPayee)(...args),
    cancelPendingPayee: (...args: ExtractArgs<Contract['mutations']['cancelPendingPayee']>) =>
      mutate(walletClient!, mutation.cancelPendingPayee)(...args),
  }
}
