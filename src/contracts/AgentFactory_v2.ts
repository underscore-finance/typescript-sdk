/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'mainAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'configAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'owner',
        type: 'address',
      },
      {
        indexed: false,
        name: 'agent',
        type: 'address',
      },
      {
        indexed: false,
        name: 'creator',
        type: 'address',
      },
    ],
    name: 'UserWalletCreated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'agent',
        type: 'address',
      },
      {
        indexed: true,
        name: 'owner',
        type: 'address',
      },
      {
        indexed: false,
        name: 'creator',
        type: 'address',
      },
    ],
    name: 'AgentCreated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'template',
        type: 'address',
      },
      {
        indexed: false,
        name: 'version',
        type: 'uint256',
      },
    ],
    name: 'UserWalletTemplateSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'template',
        type: 'address',
      },
      {
        indexed: false,
        name: 'version',
        type: 'uint256',
      },
    ],
    name: 'UserWalletConfigTemplateSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'template',
        type: 'address',
      },
      {
        indexed: false,
        name: 'version',
        type: 'uint256',
      },
    ],
    name: 'AgentTemplateSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: false,
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'TrialFundsDataSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'shouldWhitelist',
        type: 'bool',
      },
    ],
    name: 'WhitelistSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'numAllowed',
        type: 'uint256',
      },
    ],
    name: 'NumUserWalletsAllowedSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'numAllowed',
        type: 'uint256',
      },
    ],
    name: 'NumAgentsAllowedSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'shouldEnforce',
        type: 'bool',
      },
    ],
    name: 'ShouldEnforceWhitelistSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'agentAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'shouldBlacklist',
        type: 'bool',
      },
    ],
    name: 'AgentBlacklistSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: true,
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: false,
        name: 'balance',
        type: 'uint256',
      },
    ],
    name: 'AgentFactoryFundsRecovered',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'caller',
        type: 'address',
      },
    ],
    name: 'RecoveryCallerSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'canCancel',
        type: 'bool',
      },
    ],
    name: 'CanCriticalCancelSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'isActivated',
        type: 'bool',
      },
    ],
    name: 'AgentFactoryActivated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevGov',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeInitiated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevGov',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'cancelledGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'delayBlocks',
        type: 'uint256',
      },
    ],
    name: 'GovChangeDelaySet',
    type: 'event',
  },
  {
    inputs: [
      {
        name: '_address',
        type: 'address',
      },
    ],
    name: 'canGovern',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasPendingGovChange',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    name: 'changeGovernance',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmGovernanceChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelGovernanceChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    name: 'setGovernanceChangeDelay',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'governance',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingGov',
    outputs: [
      {
        components: [
          {
            name: 'newGov',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'govChangeDelay',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MIN_GOV_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_GOV_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'currentUserWalletTemplate',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'currentUserWalletConfigTemplate',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'currentAgentTemplate',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_agent',
        type: 'address',
      },
    ],
    name: 'isValidUserWalletSetup',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'createUserWallet',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
    ],
    name: 'createUserWallet',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_agent',
        type: 'address',
      },
    ],
    name: 'createUserWallet',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    name: 'isValidUserWalletTemplate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'setUserWalletTemplate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    name: 'isValidUserWalletConfigTemplate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'setUserWalletConfigTemplate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
    ],
    name: 'isValidAgentSetup',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'createAgent',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
    ],
    name: 'createAgent',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    name: 'isValidAgentTemplate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'setAgentTemplate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'isValidTrialFundsData',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'setTrialFundsData',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_wallet',
        type: 'address',
      },
    ],
    name: 'recoverTrialFunds',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_wallet',
        type: 'address',
      },
      {
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'vaultToken',
            type: 'address',
          },
        ],
        name: '_opportunities',
        type: 'tuple[]',
      },
    ],
    name: 'recoverTrialFunds',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            name: 'wallet',
            type: 'address',
          },
          {
            components: [
              {
                name: 'legoId',
                type: 'uint256',
              },
              {
                name: 'vaultToken',
                type: 'address',
              },
            ],
            name: 'opportunities',
            type: 'tuple[]',
          },
        ],
        name: '_recoveries',
        type: 'tuple[]',
      },
    ],
    name: 'recoverTrialFundsMany',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_caller',
        type: 'address',
      },
    ],
    name: 'setRecoveryCaller',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
      {
        name: '_shouldWhitelist',
        type: 'bool',
      },
    ],
    name: 'setWhitelist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_shouldEnforce',
        type: 'bool',
      },
    ],
    name: 'setShouldEnforceWhitelist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'setNumUserWalletsAllowed',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numAllowed',
        type: 'uint256',
      },
    ],
    name: 'setNumUserWalletsAllowed',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'setNumAgentsAllowed',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numAllowed',
        type: 'uint256',
      },
    ],
    name: 'setNumAgentsAllowed',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agentAddr',
        type: 'address',
      },
      {
        name: '_shouldBlacklist',
        type: 'bool',
      },
    ],
    name: 'setAgentBlacklist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    name: 'recoverFunds',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'canCancelCriticalAction',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
      {
        name: '_canCancel',
        type: 'bool',
      },
    ],
    name: 'setCanCriticalCancel',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_shouldActivate',
        type: 'bool',
      },
    ],
    name: 'activate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'trialFundsData',
    outputs: [
      {
        components: [
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'recoveryCaller',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'userWalletTemplate',
    outputs: [
      {
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'userWalletConfig',
    outputs: [
      {
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'isUserWallet',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'numUserWallets',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'agentTemplateInfo',
    outputs: [
      {
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'isAgent',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'numAgents',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'agentBlacklist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'numUserWalletsAllowed',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'numAgentsAllowed',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'whitelist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'shouldEnforceWhitelist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'canCriticalCancel',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'isActivated',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ADDY_REGISTRY',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'WETH_ADDR',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MIN_OWNER_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_OWNER_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addyRegistry',
        type: 'address',
      },
      {
        name: '_wethAddr',
        type: 'address',
      },
      {
        name: '_userWalletTemplate',
        type: 'address',
      },
      {
        name: '_userConfigTemplate',
        type: 'address',
      },
      {
        name: '_agentTemplate',
        type: 'address',
      },
      {
        name: '_minOwnerChangeDelay',
        type: 'uint256',
      },
      {
        name: '_maxOwnerChangeDelay',
        type: 'uint256',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
] as const

export const deployAddress: Address | undefined = '0x484637E77C66eaE88C8Edb64E09c5057F52866BE'

export type Contract = {
  calls: {
    canGovern: (address: `0x${string}`) => Promise<boolean>
    hasPendingGovChange: () => Promise<boolean>
    governance: () => Promise<`0x${string}`>
    pendingGov: () => Promise<{ newGov: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    govChangeDelay: () => Promise<bigint>
    MIN_GOV_CHANGE_DELAY: () => Promise<bigint>
    MAX_GOV_CHANGE_DELAY: () => Promise<bigint>
    currentUserWalletTemplate: () => Promise<`0x${string}`>
    currentUserWalletConfigTemplate: () => Promise<`0x${string}`>
    currentAgentTemplate: () => Promise<`0x${string}`>
    isValidUserWalletSetup: (owner: `0x${string}`, agent: `0x${string}`) => Promise<boolean>
    isValidUserWalletTemplate: (newAddr: `0x${string}`) => Promise<boolean>
    isValidUserWalletConfigTemplate: (newAddr: `0x${string}`) => Promise<boolean>
    isValidAgentSetup: (owner: `0x${string}`) => Promise<boolean>
    isValidAgentTemplate: (newAddr: `0x${string}`) => Promise<boolean>
    isValidTrialFundsData: (asset: `0x${string}`, amount: bigint) => Promise<boolean>
    canCancelCriticalAction: (addr: `0x${string}`) => Promise<boolean>
    trialFundsData: () => Promise<{ asset: `0x${string}`; amount: bigint }>
    recoveryCaller: () => Promise<`0x${string}`>
    userWalletTemplate: () => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint }>
    userWalletConfig: () => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint }>
    isUserWallet: (arg0: `0x${string}`) => Promise<boolean>
    numUserWallets: () => Promise<bigint>
    agentTemplateInfo: () => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint }>
    isAgent: (arg0: `0x${string}`) => Promise<boolean>
    numAgents: () => Promise<bigint>
    agentBlacklist: (arg0: `0x${string}`) => Promise<boolean>
    numUserWalletsAllowed: () => Promise<bigint>
    numAgentsAllowed: () => Promise<bigint>
    whitelist: (arg0: `0x${string}`) => Promise<boolean>
    shouldEnforceWhitelist: () => Promise<boolean>
    canCriticalCancel: (arg0: `0x${string}`) => Promise<boolean>
    isActivated: () => Promise<boolean>
    ADDY_REGISTRY: () => Promise<`0x${string}`>
    WETH_ADDR: () => Promise<`0x${string}`>
    MIN_OWNER_CHANGE_DELAY: () => Promise<bigint>
    MAX_OWNER_CHANGE_DELAY: () => Promise<bigint>
  }
  mutations: {
    changeGovernance: (newGov: `0x${string}`) => Promise<void>
    confirmGovernanceChange: () => Promise<void>
    cancelGovernanceChange: () => Promise<void>
    setGovernanceChangeDelay: (numBlocks: bigint) => Promise<void>
    createUserWallet: (owner?: `0x${string}`, agent?: `0x${string}`) => Promise<`0x${string}`>
    setUserWalletTemplate: (addr: `0x${string}`) => Promise<boolean>
    setUserWalletConfigTemplate: (addr: `0x${string}`) => Promise<boolean>
    createAgent: (owner?: `0x${string}`) => Promise<`0x${string}`>
    setAgentTemplate: (addr: `0x${string}`) => Promise<boolean>
    setTrialFundsData: (asset: `0x${string}`, amount: bigint) => Promise<boolean>
    recoverTrialFunds: (
      wallet: `0x${string}`,
      opportunities?: { legoId: bigint; vaultToken: `0x${string}` }[],
    ) => Promise<boolean>
    recoverTrialFundsMany: (
      recoveries: { wallet: `0x${string}`; opportunities: { legoId: bigint; vaultToken: `0x${string}` }[] }[],
    ) => Promise<boolean>
    setRecoveryCaller: (caller: `0x${string}`) => Promise<boolean>
    setWhitelist: (addr: `0x${string}`, shouldWhitelist: boolean) => Promise<boolean>
    setShouldEnforceWhitelist: (shouldEnforce: boolean) => Promise<boolean>
    setNumUserWalletsAllowed: (numAllowed?: bigint) => Promise<boolean>
    setNumAgentsAllowed: (numAllowed?: bigint) => Promise<boolean>
    setAgentBlacklist: (agentAddr: `0x${string}`, shouldBlacklist: boolean) => Promise<boolean>
    recoverFunds: (asset: `0x${string}`, recipient: `0x${string}`) => Promise<boolean>
    setCanCriticalCancel: (addr: `0x${string}`, canCancel: boolean) => Promise<boolean>
    activate: (shouldActivate: boolean) => Promise<void>
  }
  events: {
    UserWalletCreated: (
      mainAddr: `0x${string}`,
      configAddr: `0x${string}`,
      owner: `0x${string}`,
      agent: `0x${string}`,
      creator: `0x${string}`,
    ) => Promise<void>
    AgentCreated: (agent: `0x${string}`, owner: `0x${string}`, creator: `0x${string}`) => Promise<void>
    UserWalletTemplateSet: (template: `0x${string}`, version: bigint) => Promise<void>
    UserWalletConfigTemplateSet: (template: `0x${string}`, version: bigint) => Promise<void>
    AgentTemplateSet: (template: `0x${string}`, version: bigint) => Promise<void>
    TrialFundsDataSet: (asset: `0x${string}`, amount: bigint) => Promise<void>
    WhitelistSet: (addr: `0x${string}`, shouldWhitelist: boolean) => Promise<void>
    NumUserWalletsAllowedSet: (numAllowed: bigint) => Promise<void>
    NumAgentsAllowedSet: (numAllowed: bigint) => Promise<void>
    ShouldEnforceWhitelistSet: (shouldEnforce: boolean) => Promise<void>
    AgentBlacklistSet: (agentAddr: `0x${string}`, shouldBlacklist: boolean) => Promise<void>
    AgentFactoryFundsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, balance: bigint) => Promise<void>
    RecoveryCallerSet: (caller: `0x${string}`) => Promise<void>
    CanCriticalCancelSet: (addr: `0x${string}`, canCancel: boolean) => Promise<void>
    AgentFactoryActivated: (isActivated: boolean) => Promise<void>
    GovChangeInitiated: (prevGov: `0x${string}`, newGov: `0x${string}`, confirmBlock: bigint) => Promise<void>
    GovChangeConfirmed: (
      prevGov: `0x${string}`,
      newGov: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    GovChangeCancelled: (cancelledGov: `0x${string}`, initiatedBlock: bigint, confirmBlock: bigint) => Promise<void>
    GovChangeDelaySet: (delayBlocks: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'AgentFactory_v2'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'AgentFactory_v2' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => getRequest('canGovern', args),
  hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
    getRequest('hasPendingGovChange', args),
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => getRequest('governance', args),
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => getRequest('pendingGov', args),
  govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) => getRequest('govChangeDelay', args),
  MIN_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>) =>
    getRequest('MIN_GOV_CHANGE_DELAY', args),
  MAX_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>) =>
    getRequest('MAX_GOV_CHANGE_DELAY', args),
  currentUserWalletTemplate: (...args: ExtractArgs<Contract['calls']['currentUserWalletTemplate']>) =>
    getRequest('currentUserWalletTemplate', args),
  currentUserWalletConfigTemplate: (...args: ExtractArgs<Contract['calls']['currentUserWalletConfigTemplate']>) =>
    getRequest('currentUserWalletConfigTemplate', args),
  currentAgentTemplate: (...args: ExtractArgs<Contract['calls']['currentAgentTemplate']>) =>
    getRequest('currentAgentTemplate', args),
  isValidUserWalletSetup: (...args: ExtractArgs<Contract['calls']['isValidUserWalletSetup']>) =>
    getRequest('isValidUserWalletSetup', args),
  isValidUserWalletTemplate: (...args: ExtractArgs<Contract['calls']['isValidUserWalletTemplate']>) =>
    getRequest('isValidUserWalletTemplate', args),
  isValidUserWalletConfigTemplate: (...args: ExtractArgs<Contract['calls']['isValidUserWalletConfigTemplate']>) =>
    getRequest('isValidUserWalletConfigTemplate', args),
  isValidAgentSetup: (...args: ExtractArgs<Contract['calls']['isValidAgentSetup']>) =>
    getRequest('isValidAgentSetup', args),
  isValidAgentTemplate: (...args: ExtractArgs<Contract['calls']['isValidAgentTemplate']>) =>
    getRequest('isValidAgentTemplate', args),
  isValidTrialFundsData: (...args: ExtractArgs<Contract['calls']['isValidTrialFundsData']>) =>
    getRequest('isValidTrialFundsData', args),
  canCancelCriticalAction: (...args: ExtractArgs<Contract['calls']['canCancelCriticalAction']>) =>
    getRequest('canCancelCriticalAction', args),
  trialFundsData: (...args: ExtractArgs<Contract['calls']['trialFundsData']>) => getRequest('trialFundsData', args),
  recoveryCaller: (...args: ExtractArgs<Contract['calls']['recoveryCaller']>) => getRequest('recoveryCaller', args),
  userWalletTemplate: (...args: ExtractArgs<Contract['calls']['userWalletTemplate']>) =>
    getRequest('userWalletTemplate', args),
  userWalletConfig: (...args: ExtractArgs<Contract['calls']['userWalletConfig']>) =>
    getRequest('userWalletConfig', args),
  isUserWallet: (...args: ExtractArgs<Contract['calls']['isUserWallet']>) => getRequest('isUserWallet', args),
  numUserWallets: (...args: ExtractArgs<Contract['calls']['numUserWallets']>) => getRequest('numUserWallets', args),
  agentTemplateInfo: (...args: ExtractArgs<Contract['calls']['agentTemplateInfo']>) =>
    getRequest('agentTemplateInfo', args),
  isAgent: (...args: ExtractArgs<Contract['calls']['isAgent']>) => getRequest('isAgent', args),
  numAgents: (...args: ExtractArgs<Contract['calls']['numAgents']>) => getRequest('numAgents', args),
  agentBlacklist: (...args: ExtractArgs<Contract['calls']['agentBlacklist']>) => getRequest('agentBlacklist', args),
  numUserWalletsAllowed: (...args: ExtractArgs<Contract['calls']['numUserWalletsAllowed']>) =>
    getRequest('numUserWalletsAllowed', args),
  numAgentsAllowed: (...args: ExtractArgs<Contract['calls']['numAgentsAllowed']>) =>
    getRequest('numAgentsAllowed', args),
  whitelist: (...args: ExtractArgs<Contract['calls']['whitelist']>) => getRequest('whitelist', args),
  shouldEnforceWhitelist: (...args: ExtractArgs<Contract['calls']['shouldEnforceWhitelist']>) =>
    getRequest('shouldEnforceWhitelist', args),
  canCriticalCancel: (...args: ExtractArgs<Contract['calls']['canCriticalCancel']>) =>
    getRequest('canCriticalCancel', args),
  isActivated: (...args: ExtractArgs<Contract['calls']['isActivated']>) => getRequest('isActivated', args),
  ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) => getRequest('ADDY_REGISTRY', args),
  WETH_ADDR: (...args: ExtractArgs<Contract['calls']['WETH_ADDR']>) => getRequest('WETH_ADDR', args),
  MIN_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>) =>
    getRequest('MIN_OWNER_CHANGE_DELAY', args),
  MAX_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>) =>
    getRequest('MAX_OWNER_CHANGE_DELAY', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'AgentFactory_v2' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'AgentFactory_v2'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  changeGovernance: getMutation('changeGovernance'),
  confirmGovernanceChange: getMutation('confirmGovernanceChange'),
  cancelGovernanceChange: getMutation('cancelGovernanceChange'),
  setGovernanceChangeDelay: getMutation('setGovernanceChangeDelay'),
  createUserWallet: getMutation('createUserWallet'),
  setUserWalletTemplate: getMutation('setUserWalletTemplate'),
  setUserWalletConfigTemplate: getMutation('setUserWalletConfigTemplate'),
  createAgent: getMutation('createAgent'),
  setAgentTemplate: getMutation('setAgentTemplate'),
  setTrialFundsData: getMutation('setTrialFundsData'),
  recoverTrialFunds: getMutation('recoverTrialFunds'),
  recoverTrialFundsMany: getMutation('recoverTrialFundsMany'),
  setRecoveryCaller: getMutation('setRecoveryCaller'),
  setWhitelist: getMutation('setWhitelist'),
  setShouldEnforceWhitelist: getMutation('setShouldEnforceWhitelist'),
  setNumUserWalletsAllowed: getMutation('setNumUserWalletsAllowed'),
  setNumAgentsAllowed: getMutation('setNumAgentsAllowed'),
  setAgentBlacklist: getMutation('setAgentBlacklist'),
  recoverFunds: getMutation('recoverFunds'),
  setCanCriticalCancel: getMutation('setCanCriticalCancel'),
  activate: getMutation('activate'),
}

export type SDK = {
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => Promise<CallReturn<'canGovern'>>
  hasPendingGovChange: (
    ...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>
  ) => Promise<CallReturn<'hasPendingGovChange'>>
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => Promise<CallReturn<'governance'>>
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => Promise<CallReturn<'pendingGov'>>
  govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) => Promise<CallReturn<'govChangeDelay'>>
  MIN_GOV_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MIN_GOV_CHANGE_DELAY'>>
  MAX_GOV_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MAX_GOV_CHANGE_DELAY'>>
  currentUserWalletTemplate: (
    ...args: ExtractArgs<Contract['calls']['currentUserWalletTemplate']>
  ) => Promise<CallReturn<'currentUserWalletTemplate'>>
  currentUserWalletConfigTemplate: (
    ...args: ExtractArgs<Contract['calls']['currentUserWalletConfigTemplate']>
  ) => Promise<CallReturn<'currentUserWalletConfigTemplate'>>
  currentAgentTemplate: (
    ...args: ExtractArgs<Contract['calls']['currentAgentTemplate']>
  ) => Promise<CallReturn<'currentAgentTemplate'>>
  isValidUserWalletSetup: (
    ...args: ExtractArgs<Contract['calls']['isValidUserWalletSetup']>
  ) => Promise<CallReturn<'isValidUserWalletSetup'>>
  isValidUserWalletTemplate: (
    ...args: ExtractArgs<Contract['calls']['isValidUserWalletTemplate']>
  ) => Promise<CallReturn<'isValidUserWalletTemplate'>>
  isValidUserWalletConfigTemplate: (
    ...args: ExtractArgs<Contract['calls']['isValidUserWalletConfigTemplate']>
  ) => Promise<CallReturn<'isValidUserWalletConfigTemplate'>>
  isValidAgentSetup: (
    ...args: ExtractArgs<Contract['calls']['isValidAgentSetup']>
  ) => Promise<CallReturn<'isValidAgentSetup'>>
  isValidAgentTemplate: (
    ...args: ExtractArgs<Contract['calls']['isValidAgentTemplate']>
  ) => Promise<CallReturn<'isValidAgentTemplate'>>
  isValidTrialFundsData: (
    ...args: ExtractArgs<Contract['calls']['isValidTrialFundsData']>
  ) => Promise<CallReturn<'isValidTrialFundsData'>>
  canCancelCriticalAction: (
    ...args: ExtractArgs<Contract['calls']['canCancelCriticalAction']>
  ) => Promise<CallReturn<'canCancelCriticalAction'>>
  trialFundsData: (...args: ExtractArgs<Contract['calls']['trialFundsData']>) => Promise<CallReturn<'trialFundsData'>>
  recoveryCaller: (...args: ExtractArgs<Contract['calls']['recoveryCaller']>) => Promise<CallReturn<'recoveryCaller'>>
  userWalletTemplate: (
    ...args: ExtractArgs<Contract['calls']['userWalletTemplate']>
  ) => Promise<CallReturn<'userWalletTemplate'>>
  userWalletConfig: (
    ...args: ExtractArgs<Contract['calls']['userWalletConfig']>
  ) => Promise<CallReturn<'userWalletConfig'>>
  isUserWallet: (...args: ExtractArgs<Contract['calls']['isUserWallet']>) => Promise<CallReturn<'isUserWallet'>>
  numUserWallets: (...args: ExtractArgs<Contract['calls']['numUserWallets']>) => Promise<CallReturn<'numUserWallets'>>
  agentTemplateInfo: (
    ...args: ExtractArgs<Contract['calls']['agentTemplateInfo']>
  ) => Promise<CallReturn<'agentTemplateInfo'>>
  isAgent: (...args: ExtractArgs<Contract['calls']['isAgent']>) => Promise<CallReturn<'isAgent'>>
  numAgents: (...args: ExtractArgs<Contract['calls']['numAgents']>) => Promise<CallReturn<'numAgents'>>
  agentBlacklist: (...args: ExtractArgs<Contract['calls']['agentBlacklist']>) => Promise<CallReturn<'agentBlacklist'>>
  numUserWalletsAllowed: (
    ...args: ExtractArgs<Contract['calls']['numUserWalletsAllowed']>
  ) => Promise<CallReturn<'numUserWalletsAllowed'>>
  numAgentsAllowed: (
    ...args: ExtractArgs<Contract['calls']['numAgentsAllowed']>
  ) => Promise<CallReturn<'numAgentsAllowed'>>
  whitelist: (...args: ExtractArgs<Contract['calls']['whitelist']>) => Promise<CallReturn<'whitelist'>>
  shouldEnforceWhitelist: (
    ...args: ExtractArgs<Contract['calls']['shouldEnforceWhitelist']>
  ) => Promise<CallReturn<'shouldEnforceWhitelist'>>
  canCriticalCancel: (
    ...args: ExtractArgs<Contract['calls']['canCriticalCancel']>
  ) => Promise<CallReturn<'canCriticalCancel'>>
  isActivated: (...args: ExtractArgs<Contract['calls']['isActivated']>) => Promise<CallReturn<'isActivated'>>
  ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) => Promise<CallReturn<'ADDY_REGISTRY'>>
  WETH_ADDR: (...args: ExtractArgs<Contract['calls']['WETH_ADDR']>) => Promise<CallReturn<'WETH_ADDR'>>
  MIN_OWNER_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MIN_OWNER_CHANGE_DELAY'>>
  MAX_OWNER_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MAX_OWNER_CHANGE_DELAY'>>
  changeGovernance: (...args: ExtractArgs<Contract['mutations']['changeGovernance']>) => Promise<Address>
  confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) => Promise<Address>
  cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) => Promise<Address>
  setGovernanceChangeDelay: (
    ...args: ExtractArgs<Contract['mutations']['setGovernanceChangeDelay']>
  ) => Promise<Address>
  createUserWallet: (...args: ExtractArgs<Contract['mutations']['createUserWallet']>) => Promise<Address>
  setUserWalletTemplate: (...args: ExtractArgs<Contract['mutations']['setUserWalletTemplate']>) => Promise<Address>
  setUserWalletConfigTemplate: (
    ...args: ExtractArgs<Contract['mutations']['setUserWalletConfigTemplate']>
  ) => Promise<Address>
  createAgent: (...args: ExtractArgs<Contract['mutations']['createAgent']>) => Promise<Address>
  setAgentTemplate: (...args: ExtractArgs<Contract['mutations']['setAgentTemplate']>) => Promise<Address>
  setTrialFundsData: (...args: ExtractArgs<Contract['mutations']['setTrialFundsData']>) => Promise<Address>
  recoverTrialFunds: (...args: ExtractArgs<Contract['mutations']['recoverTrialFunds']>) => Promise<Address>
  recoverTrialFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverTrialFundsMany']>) => Promise<Address>
  setRecoveryCaller: (...args: ExtractArgs<Contract['mutations']['setRecoveryCaller']>) => Promise<Address>
  setWhitelist: (...args: ExtractArgs<Contract['mutations']['setWhitelist']>) => Promise<Address>
  setShouldEnforceWhitelist: (
    ...args: ExtractArgs<Contract['mutations']['setShouldEnforceWhitelist']>
  ) => Promise<Address>
  setNumUserWalletsAllowed: (
    ...args: ExtractArgs<Contract['mutations']['setNumUserWalletsAllowed']>
  ) => Promise<Address>
  setNumAgentsAllowed: (...args: ExtractArgs<Contract['mutations']['setNumAgentsAllowed']>) => Promise<Address>
  setAgentBlacklist: (...args: ExtractArgs<Contract['mutations']['setAgentBlacklist']>) => Promise<Address>
  recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) => Promise<Address>
  setCanCriticalCancel: (...args: ExtractArgs<Contract['mutations']['setCanCriticalCancel']>) => Promise<Address>
  activate: (...args: ExtractArgs<Contract['mutations']['activate']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    // Queries
    canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) =>
      singleQuery(publicClient!, call.canGovern(...args)) as Promise<CallReturn<'canGovern'>>,
    hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
      singleQuery(publicClient!, call.hasPendingGovChange(...args)) as Promise<CallReturn<'hasPendingGovChange'>>,
    governance: (...args: ExtractArgs<Contract['calls']['governance']>) =>
      singleQuery(publicClient!, call.governance(...args)) as Promise<CallReturn<'governance'>>,
    pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) =>
      singleQuery(publicClient!, call.pendingGov(...args)) as Promise<CallReturn<'pendingGov'>>,
    govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) =>
      singleQuery(publicClient!, call.govChangeDelay(...args)) as Promise<CallReturn<'govChangeDelay'>>,
    MIN_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MIN_GOV_CHANGE_DELAY(...args)) as Promise<CallReturn<'MIN_GOV_CHANGE_DELAY'>>,
    MAX_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MAX_GOV_CHANGE_DELAY(...args)) as Promise<CallReturn<'MAX_GOV_CHANGE_DELAY'>>,
    currentUserWalletTemplate: (...args: ExtractArgs<Contract['calls']['currentUserWalletTemplate']>) =>
      singleQuery(publicClient!, call.currentUserWalletTemplate(...args)) as Promise<
        CallReturn<'currentUserWalletTemplate'>
      >,
    currentUserWalletConfigTemplate: (...args: ExtractArgs<Contract['calls']['currentUserWalletConfigTemplate']>) =>
      singleQuery(publicClient!, call.currentUserWalletConfigTemplate(...args)) as Promise<
        CallReturn<'currentUserWalletConfigTemplate'>
      >,
    currentAgentTemplate: (...args: ExtractArgs<Contract['calls']['currentAgentTemplate']>) =>
      singleQuery(publicClient!, call.currentAgentTemplate(...args)) as Promise<CallReturn<'currentAgentTemplate'>>,
    isValidUserWalletSetup: (...args: ExtractArgs<Contract['calls']['isValidUserWalletSetup']>) =>
      singleQuery(publicClient!, call.isValidUserWalletSetup(...args)) as Promise<CallReturn<'isValidUserWalletSetup'>>,
    isValidUserWalletTemplate: (...args: ExtractArgs<Contract['calls']['isValidUserWalletTemplate']>) =>
      singleQuery(publicClient!, call.isValidUserWalletTemplate(...args)) as Promise<
        CallReturn<'isValidUserWalletTemplate'>
      >,
    isValidUserWalletConfigTemplate: (...args: ExtractArgs<Contract['calls']['isValidUserWalletConfigTemplate']>) =>
      singleQuery(publicClient!, call.isValidUserWalletConfigTemplate(...args)) as Promise<
        CallReturn<'isValidUserWalletConfigTemplate'>
      >,
    isValidAgentSetup: (...args: ExtractArgs<Contract['calls']['isValidAgentSetup']>) =>
      singleQuery(publicClient!, call.isValidAgentSetup(...args)) as Promise<CallReturn<'isValidAgentSetup'>>,
    isValidAgentTemplate: (...args: ExtractArgs<Contract['calls']['isValidAgentTemplate']>) =>
      singleQuery(publicClient!, call.isValidAgentTemplate(...args)) as Promise<CallReturn<'isValidAgentTemplate'>>,
    isValidTrialFundsData: (...args: ExtractArgs<Contract['calls']['isValidTrialFundsData']>) =>
      singleQuery(publicClient!, call.isValidTrialFundsData(...args)) as Promise<CallReturn<'isValidTrialFundsData'>>,
    canCancelCriticalAction: (...args: ExtractArgs<Contract['calls']['canCancelCriticalAction']>) =>
      singleQuery(publicClient!, call.canCancelCriticalAction(...args)) as Promise<
        CallReturn<'canCancelCriticalAction'>
      >,
    trialFundsData: (...args: ExtractArgs<Contract['calls']['trialFundsData']>) =>
      singleQuery(publicClient!, call.trialFundsData(...args)) as Promise<CallReturn<'trialFundsData'>>,
    recoveryCaller: (...args: ExtractArgs<Contract['calls']['recoveryCaller']>) =>
      singleQuery(publicClient!, call.recoveryCaller(...args)) as Promise<CallReturn<'recoveryCaller'>>,
    userWalletTemplate: (...args: ExtractArgs<Contract['calls']['userWalletTemplate']>) =>
      singleQuery(publicClient!, call.userWalletTemplate(...args)) as Promise<CallReturn<'userWalletTemplate'>>,
    userWalletConfig: (...args: ExtractArgs<Contract['calls']['userWalletConfig']>) =>
      singleQuery(publicClient!, call.userWalletConfig(...args)) as Promise<CallReturn<'userWalletConfig'>>,
    isUserWallet: (...args: ExtractArgs<Contract['calls']['isUserWallet']>) =>
      singleQuery(publicClient!, call.isUserWallet(...args)) as Promise<CallReturn<'isUserWallet'>>,
    numUserWallets: (...args: ExtractArgs<Contract['calls']['numUserWallets']>) =>
      singleQuery(publicClient!, call.numUserWallets(...args)) as Promise<CallReturn<'numUserWallets'>>,
    agentTemplateInfo: (...args: ExtractArgs<Contract['calls']['agentTemplateInfo']>) =>
      singleQuery(publicClient!, call.agentTemplateInfo(...args)) as Promise<CallReturn<'agentTemplateInfo'>>,
    isAgent: (...args: ExtractArgs<Contract['calls']['isAgent']>) =>
      singleQuery(publicClient!, call.isAgent(...args)) as Promise<CallReturn<'isAgent'>>,
    numAgents: (...args: ExtractArgs<Contract['calls']['numAgents']>) =>
      singleQuery(publicClient!, call.numAgents(...args)) as Promise<CallReturn<'numAgents'>>,
    agentBlacklist: (...args: ExtractArgs<Contract['calls']['agentBlacklist']>) =>
      singleQuery(publicClient!, call.agentBlacklist(...args)) as Promise<CallReturn<'agentBlacklist'>>,
    numUserWalletsAllowed: (...args: ExtractArgs<Contract['calls']['numUserWalletsAllowed']>) =>
      singleQuery(publicClient!, call.numUserWalletsAllowed(...args)) as Promise<CallReturn<'numUserWalletsAllowed'>>,
    numAgentsAllowed: (...args: ExtractArgs<Contract['calls']['numAgentsAllowed']>) =>
      singleQuery(publicClient!, call.numAgentsAllowed(...args)) as Promise<CallReturn<'numAgentsAllowed'>>,
    whitelist: (...args: ExtractArgs<Contract['calls']['whitelist']>) =>
      singleQuery(publicClient!, call.whitelist(...args)) as Promise<CallReturn<'whitelist'>>,
    shouldEnforceWhitelist: (...args: ExtractArgs<Contract['calls']['shouldEnforceWhitelist']>) =>
      singleQuery(publicClient!, call.shouldEnforceWhitelist(...args)) as Promise<CallReturn<'shouldEnforceWhitelist'>>,
    canCriticalCancel: (...args: ExtractArgs<Contract['calls']['canCriticalCancel']>) =>
      singleQuery(publicClient!, call.canCriticalCancel(...args)) as Promise<CallReturn<'canCriticalCancel'>>,
    isActivated: (...args: ExtractArgs<Contract['calls']['isActivated']>) =>
      singleQuery(publicClient!, call.isActivated(...args)) as Promise<CallReturn<'isActivated'>>,
    ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) =>
      singleQuery(publicClient!, call.ADDY_REGISTRY(...args)) as Promise<CallReturn<'ADDY_REGISTRY'>>,
    WETH_ADDR: (...args: ExtractArgs<Contract['calls']['WETH_ADDR']>) =>
      singleQuery(publicClient!, call.WETH_ADDR(...args)) as Promise<CallReturn<'WETH_ADDR'>>,
    MIN_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MIN_OWNER_CHANGE_DELAY(...args)) as Promise<CallReturn<'MIN_OWNER_CHANGE_DELAY'>>,
    MAX_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MAX_OWNER_CHANGE_DELAY(...args)) as Promise<CallReturn<'MAX_OWNER_CHANGE_DELAY'>>,

    // Mutations
    changeGovernance: (...args: ExtractArgs<Contract['mutations']['changeGovernance']>) =>
      mutate(walletClient!, mutation.changeGovernance)(...args),
    confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) =>
      mutate(walletClient!, mutation.confirmGovernanceChange)(...args),
    cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) =>
      mutate(walletClient!, mutation.cancelGovernanceChange)(...args),
    setGovernanceChangeDelay: (...args: ExtractArgs<Contract['mutations']['setGovernanceChangeDelay']>) =>
      mutate(walletClient!, mutation.setGovernanceChangeDelay)(...args),
    createUserWallet: (...args: ExtractArgs<Contract['mutations']['createUserWallet']>) =>
      mutate(walletClient!, mutation.createUserWallet)(...args),
    setUserWalletTemplate: (...args: ExtractArgs<Contract['mutations']['setUserWalletTemplate']>) =>
      mutate(walletClient!, mutation.setUserWalletTemplate)(...args),
    setUserWalletConfigTemplate: (...args: ExtractArgs<Contract['mutations']['setUserWalletConfigTemplate']>) =>
      mutate(walletClient!, mutation.setUserWalletConfigTemplate)(...args),
    createAgent: (...args: ExtractArgs<Contract['mutations']['createAgent']>) =>
      mutate(walletClient!, mutation.createAgent)(...args),
    setAgentTemplate: (...args: ExtractArgs<Contract['mutations']['setAgentTemplate']>) =>
      mutate(walletClient!, mutation.setAgentTemplate)(...args),
    setTrialFundsData: (...args: ExtractArgs<Contract['mutations']['setTrialFundsData']>) =>
      mutate(walletClient!, mutation.setTrialFundsData)(...args),
    recoverTrialFunds: (...args: ExtractArgs<Contract['mutations']['recoverTrialFunds']>) =>
      mutate(walletClient!, mutation.recoverTrialFunds)(...args),
    recoverTrialFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverTrialFundsMany']>) =>
      mutate(walletClient!, mutation.recoverTrialFundsMany)(...args),
    setRecoveryCaller: (...args: ExtractArgs<Contract['mutations']['setRecoveryCaller']>) =>
      mutate(walletClient!, mutation.setRecoveryCaller)(...args),
    setWhitelist: (...args: ExtractArgs<Contract['mutations']['setWhitelist']>) =>
      mutate(walletClient!, mutation.setWhitelist)(...args),
    setShouldEnforceWhitelist: (...args: ExtractArgs<Contract['mutations']['setShouldEnforceWhitelist']>) =>
      mutate(walletClient!, mutation.setShouldEnforceWhitelist)(...args),
    setNumUserWalletsAllowed: (...args: ExtractArgs<Contract['mutations']['setNumUserWalletsAllowed']>) =>
      mutate(walletClient!, mutation.setNumUserWalletsAllowed)(...args),
    setNumAgentsAllowed: (...args: ExtractArgs<Contract['mutations']['setNumAgentsAllowed']>) =>
      mutate(walletClient!, mutation.setNumAgentsAllowed)(...args),
    setAgentBlacklist: (...args: ExtractArgs<Contract['mutations']['setAgentBlacklist']>) =>
      mutate(walletClient!, mutation.setAgentBlacklist)(...args),
    recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) =>
      mutate(walletClient!, mutation.recoverFunds)(...args),
    setCanCriticalCancel: (...args: ExtractArgs<Contract['mutations']['setCanCriticalCancel']>) =>
      mutate(walletClient!, mutation.setCanCriticalCancel)(...args),
    activate: (...args: ExtractArgs<Contract['mutations']['activate']>) =>
      mutate(walletClient!, mutation.activate)(...args),
  }
}
