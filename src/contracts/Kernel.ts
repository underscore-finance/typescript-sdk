/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'WhitelistAddrPending',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addedBy',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'WhitelistAddrConfirmed',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmedBy',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'WhitelistAddrCancelled',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'cancelledBy',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'WhitelistAddrRemoved',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'addr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'removedBy',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addPendingWhitelistAddr',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_whitelistAddr',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmWhitelistAddr',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_whitelistAddr',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelPendingWhitelistAddr',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_whitelistAddr',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeWhitelistAddr',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_whitelistAddr',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canManageWhitelist',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_caller',
        type: 'address',
      },
      {
        name: '_action',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getWhitelistConfig',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_whitelistAddr',
        type: 'address',
      },
      {
        name: '_caller',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'owner',
            type: 'address',
          },
          {
            name: 'wallet',
            type: 'address',
          },
          {
            name: 'isWhitelisted',
            type: 'bool',
          },
          {
            name: 'pendingWhitelist',
            type: 'tuple',
            components: [
              {
                name: 'initiatedBlock',
                type: 'uint256',
              },
              {
                name: 'confirmBlock',
                type: 'uint256',
              },
              {
                name: 'currentOwner',
                type: 'address',
              },
            ],
          },
          {
            name: 'timeLock',
            type: 'uint256',
          },
          {
            name: 'walletConfig',
            type: 'address',
          },
          {
            name: 'isManager',
            type: 'bool',
          },
          {
            name: 'isOwner',
            type: 'bool',
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'globalWhitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'UNDY_HQ',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0xcb91C738E301bDf8Ee5354f0Ef2692B41145D217'

export type Contract = {
  calls: {
    canManageWhitelist: (userWallet: `0x${string}`, caller: `0x${string}`, action: bigint) => Promise<boolean>
    getWhitelistConfig: (
      userWallet: `0x${string}`,
      whitelistAddr: `0x${string}`,
      caller: `0x${string}`,
    ) => Promise<{
      owner: `0x${string}`
      wallet: `0x${string}`
      isWhitelisted: boolean
      pendingWhitelist: { initiatedBlock: bigint; confirmBlock: bigint; currentOwner: `0x${string}` }
      timeLock: bigint
      walletConfig: `0x${string}`
      isManager: boolean
      isOwner: boolean
      whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean }
      globalWhitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean }
    }>
    UNDY_HQ: () => Promise<`0x${string}`>
  }
  mutations: {
    addPendingWhitelistAddr: (userWallet: `0x${string}`, whitelistAddr: `0x${string}`) => Promise<void>
    confirmWhitelistAddr: (userWallet: `0x${string}`, whitelistAddr: `0x${string}`) => Promise<void>
    cancelPendingWhitelistAddr: (userWallet: `0x${string}`, whitelistAddr: `0x${string}`) => Promise<void>
    removeWhitelistAddr: (userWallet: `0x${string}`, whitelistAddr: `0x${string}`) => Promise<void>
  }
  events: {
    WhitelistAddrPending: (
      user: `0x${string}`,
      addr: `0x${string}`,
      confirmBlock: bigint,
      addedBy: `0x${string}`,
    ) => Promise<void>
    WhitelistAddrConfirmed: (
      user: `0x${string}`,
      addr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      confirmedBy: `0x${string}`,
    ) => Promise<void>
    WhitelistAddrCancelled: (
      user: `0x${string}`,
      addr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      cancelledBy: `0x${string}`,
    ) => Promise<void>
    WhitelistAddrRemoved: (user: `0x${string}`, addr: `0x${string}`, removedBy: `0x${string}`) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'Kernel'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'Kernel' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  canManageWhitelist: (...args: ExtractArgs<Contract['calls']['canManageWhitelist']>) =>
    getRequest('canManageWhitelist', args),
  getWhitelistConfig: (...args: ExtractArgs<Contract['calls']['getWhitelistConfig']>) =>
    getRequest('getWhitelistConfig', args),
  UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) => getRequest('UNDY_HQ', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'Kernel' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'Kernel'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  addPendingWhitelistAddr: getMutation('addPendingWhitelistAddr'),
  confirmWhitelistAddr: getMutation('confirmWhitelistAddr'),
  cancelPendingWhitelistAddr: getMutation('cancelPendingWhitelistAddr'),
  removeWhitelistAddr: getMutation('removeWhitelistAddr'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  canManageWhitelist: (
    ...args: ExtractArgs<Contract['calls']['canManageWhitelist']>
  ) => Promise<CallReturn<'canManageWhitelist'>>
  getWhitelistConfig: (
    ...args: ExtractArgs<Contract['calls']['getWhitelistConfig']>
  ) => Promise<CallReturn<'getWhitelistConfig'>>
  UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) => Promise<CallReturn<'UNDY_HQ'>>
  addPendingWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['addPendingWhitelistAddr']>) => Promise<Address>
  confirmWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['confirmWhitelistAddr']>) => Promise<Address>
  cancelPendingWhitelistAddr: (
    ...args: ExtractArgs<Contract['mutations']['cancelPendingWhitelistAddr']>
  ) => Promise<Address>
  removeWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['removeWhitelistAddr']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    canManageWhitelist: (...args: ExtractArgs<Contract['calls']['canManageWhitelist']>) =>
      singleQuery(publicClient!, call.canManageWhitelist(...args)) as Promise<CallReturn<'canManageWhitelist'>>,
    getWhitelistConfig: (...args: ExtractArgs<Contract['calls']['getWhitelistConfig']>) =>
      singleQuery(publicClient!, call.getWhitelistConfig(...args)) as Promise<CallReturn<'getWhitelistConfig'>>,
    UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) =>
      singleQuery(publicClient!, call.UNDY_HQ(...args)) as Promise<CallReturn<'UNDY_HQ'>>,

    // Mutations
    addPendingWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['addPendingWhitelistAddr']>) =>
      mutate(walletClient!, mutation.addPendingWhitelistAddr)(...args),
    confirmWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['confirmWhitelistAddr']>) =>
      mutate(walletClient!, mutation.confirmWhitelistAddr)(...args),
    cancelPendingWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['cancelPendingWhitelistAddr']>) =>
      mutate(walletClient!, mutation.cancelPendingWhitelistAddr)(...args),
    removeWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['removeWhitelistAddr']>) =>
      mutate(walletClient!, mutation.removeWhitelistAddr)(...args),
  }
}
