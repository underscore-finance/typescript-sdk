/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositTokens',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_vault',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositTokens',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_vault',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_oracleRegistry',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawTokens',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawTokens',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_oracleRegistry',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAssetOpportunities',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUnderlyingAmount',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_vaultTokenAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUnderlyingAsset',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAssets',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isVaultToken',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getVaultTokenAmount',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_assetAmount',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUsdValueOfVaultToken',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_vaultTokenAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUsdValueOfVaultToken',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_vaultTokenAmount',
        type: 'uint256',
      },
      {
        name: '_oracleRegistry',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUnderlyingData',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_vaultTokenAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUnderlyingData',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_vaultTokenAmount',
        type: 'uint256',
      },
      {
        name: '_oracleRegistry',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'totalAssets',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'totalBorrows',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
] as const

export const deployAddress: Address | undefined = undefined

export type Contract = {
  calls: {
    getAssetOpportunities: (asset: `0x${string}`) => Promise<`0x${string}`[]>
    getUnderlyingAmount: (vaultToken: `0x${string}`, vaultTokenAmount: bigint) => Promise<bigint>
    getUnderlyingAsset: (vaultToken: `0x${string}`) => Promise<`0x${string}`>
    getAssets: () => Promise<`0x${string}`[]>
    isVaultToken: (vaultToken: `0x${string}`) => Promise<boolean>
    getVaultTokenAmount: (asset: `0x${string}`, assetAmount: bigint, vaultToken: `0x${string}`) => Promise<bigint>
    getUsdValueOfVaultToken: (
      vaultToken: `0x${string}`,
      vaultTokenAmount: bigint,
      oracleRegistry?: `0x${string}`,
    ) => Promise<bigint>
    getUnderlyingData: (
      vaultToken: `0x${string}`,
      vaultTokenAmount: bigint,
      oracleRegistry?: `0x${string}`,
    ) => Promise<[`0x${string}`, bigint, bigint]>
    totalAssets: (vaultToken: `0x${string}`) => Promise<bigint>
    totalBorrows: (vaultToken: `0x${string}`) => Promise<bigint>
  }
  mutations: {
    depositTokens: (
      asset: `0x${string}`,
      amount: bigint,
      vault: `0x${string}`,
      recipient: `0x${string}`,
      oracleRegistry?: `0x${string}`,
    ) => Promise<[bigint, `0x${string}`, bigint, bigint, bigint]>
    withdrawTokens: (
      asset: `0x${string}`,
      amount: bigint,
      vaultToken: `0x${string}`,
      recipient: `0x${string}`,
      oracleRegistry?: `0x${string}`,
    ) => Promise<[bigint, bigint, bigint, bigint]>
  }
  events: {}
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'v0_3_LegoYield'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'v0_3_LegoYield' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getAssetOpportunities: (...args: ExtractArgs<Contract['calls']['getAssetOpportunities']>) =>
    getRequest('getAssetOpportunities', args),
  getUnderlyingAmount: (...args: ExtractArgs<Contract['calls']['getUnderlyingAmount']>) =>
    getRequest('getUnderlyingAmount', args),
  getUnderlyingAsset: (...args: ExtractArgs<Contract['calls']['getUnderlyingAsset']>) =>
    getRequest('getUnderlyingAsset', args),
  getAssets: (...args: ExtractArgs<Contract['calls']['getAssets']>) => getRequest('getAssets', args),
  isVaultToken: (...args: ExtractArgs<Contract['calls']['isVaultToken']>) => getRequest('isVaultToken', args),
  getVaultTokenAmount: (...args: ExtractArgs<Contract['calls']['getVaultTokenAmount']>) =>
    getRequest('getVaultTokenAmount', args),
  getUsdValueOfVaultToken: (...args: ExtractArgs<Contract['calls']['getUsdValueOfVaultToken']>) =>
    getRequest('getUsdValueOfVaultToken', args),
  getUnderlyingData: (...args: ExtractArgs<Contract['calls']['getUnderlyingData']>) =>
    getRequest('getUnderlyingData', args),
  totalAssets: (...args: ExtractArgs<Contract['calls']['totalAssets']>) => getRequest('totalAssets', args),
  totalBorrows: (...args: ExtractArgs<Contract['calls']['totalBorrows']>) => getRequest('totalBorrows', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'v0_3_LegoYield' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'v0_3_LegoYield'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  depositTokens: getMutation('depositTokens'),
  withdrawTokens: getMutation('withdrawTokens'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getAssetOpportunities: (
    ...args: ExtractArgs<Contract['calls']['getAssetOpportunities']>
  ) => Promise<CallReturn<'getAssetOpportunities'>>
  getUnderlyingAmount: (
    ...args: ExtractArgs<Contract['calls']['getUnderlyingAmount']>
  ) => Promise<CallReturn<'getUnderlyingAmount'>>
  getUnderlyingAsset: (
    ...args: ExtractArgs<Contract['calls']['getUnderlyingAsset']>
  ) => Promise<CallReturn<'getUnderlyingAsset'>>
  getAssets: (...args: ExtractArgs<Contract['calls']['getAssets']>) => Promise<CallReturn<'getAssets'>>
  isVaultToken: (...args: ExtractArgs<Contract['calls']['isVaultToken']>) => Promise<CallReturn<'isVaultToken'>>
  getVaultTokenAmount: (
    ...args: ExtractArgs<Contract['calls']['getVaultTokenAmount']>
  ) => Promise<CallReturn<'getVaultTokenAmount'>>
  getUsdValueOfVaultToken: (
    ...args: ExtractArgs<Contract['calls']['getUsdValueOfVaultToken']>
  ) => Promise<CallReturn<'getUsdValueOfVaultToken'>>
  getUnderlyingData: (
    ...args: ExtractArgs<Contract['calls']['getUnderlyingData']>
  ) => Promise<CallReturn<'getUnderlyingData'>>
  totalAssets: (...args: ExtractArgs<Contract['calls']['totalAssets']>) => Promise<CallReturn<'totalAssets'>>
  totalBorrows: (...args: ExtractArgs<Contract['calls']['totalBorrows']>) => Promise<CallReturn<'totalBorrows'>>
  depositTokens: (...args: ExtractArgs<Contract['mutations']['depositTokens']>) => Promise<Address>
  withdrawTokens: (...args: ExtractArgs<Contract['mutations']['withdrawTokens']>) => Promise<Address>
}

export function toSdk(deployAddress: Address, publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getAssetOpportunities: (...args: ExtractArgs<Contract['calls']['getAssetOpportunities']>) =>
      singleQuery(publicClient!, call.getAssetOpportunities(...args).at(deployAddress)) as Promise<
        CallReturn<'getAssetOpportunities'>
      >,
    getUnderlyingAmount: (...args: ExtractArgs<Contract['calls']['getUnderlyingAmount']>) =>
      singleQuery(publicClient!, call.getUnderlyingAmount(...args).at(deployAddress)) as Promise<
        CallReturn<'getUnderlyingAmount'>
      >,
    getUnderlyingAsset: (...args: ExtractArgs<Contract['calls']['getUnderlyingAsset']>) =>
      singleQuery(publicClient!, call.getUnderlyingAsset(...args).at(deployAddress)) as Promise<
        CallReturn<'getUnderlyingAsset'>
      >,
    getAssets: (...args: ExtractArgs<Contract['calls']['getAssets']>) =>
      singleQuery(publicClient!, call.getAssets(...args).at(deployAddress)) as Promise<CallReturn<'getAssets'>>,
    isVaultToken: (...args: ExtractArgs<Contract['calls']['isVaultToken']>) =>
      singleQuery(publicClient!, call.isVaultToken(...args).at(deployAddress)) as Promise<CallReturn<'isVaultToken'>>,
    getVaultTokenAmount: (...args: ExtractArgs<Contract['calls']['getVaultTokenAmount']>) =>
      singleQuery(publicClient!, call.getVaultTokenAmount(...args).at(deployAddress)) as Promise<
        CallReturn<'getVaultTokenAmount'>
      >,
    getUsdValueOfVaultToken: (...args: ExtractArgs<Contract['calls']['getUsdValueOfVaultToken']>) =>
      singleQuery(publicClient!, call.getUsdValueOfVaultToken(...args).at(deployAddress)) as Promise<
        CallReturn<'getUsdValueOfVaultToken'>
      >,
    getUnderlyingData: (...args: ExtractArgs<Contract['calls']['getUnderlyingData']>) =>
      singleQuery(publicClient!, call.getUnderlyingData(...args).at(deployAddress)) as Promise<
        CallReturn<'getUnderlyingData'>
      >,
    totalAssets: (...args: ExtractArgs<Contract['calls']['totalAssets']>) =>
      singleQuery(publicClient!, call.totalAssets(...args).at(deployAddress)) as Promise<CallReturn<'totalAssets'>>,
    totalBorrows: (...args: ExtractArgs<Contract['calls']['totalBorrows']>) =>
      singleQuery(publicClient!, call.totalBorrows(...args).at(deployAddress)) as Promise<CallReturn<'totalBorrows'>>,

    // Mutations
    depositTokens: (...args: ExtractArgs<Contract['mutations']['depositTokens']>) =>
      mutate(walletClient!, mutation.depositTokens, { address: deployAddress })(...args),
    withdrawTokens: (...args: ExtractArgs<Contract['mutations']['withdrawTokens']>) =>
      mutate(walletClient!, mutation.withdrawTokens, { address: deployAddress })(...args),
  }
}
