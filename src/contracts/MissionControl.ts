/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'DepartmentPauseModified',
    inputs: [
      {
        name: 'isPaused',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepartmentFundsRecovered',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'balance',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddys',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'hq',
            type: 'address',
          },
          {
            name: 'undyToken',
            type: 'address',
          },
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'switchboard',
            type: 'address',
          },
          {
            name: 'hatchery',
            type: 'address',
          },
          {
            name: 'lootDistributor',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
          {
            name: 'walletBackpack',
            type: 'address',
          },
          {
            name: 'billing',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHq',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canMintUndy',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'pause',
    inputs: [
      {
        name: '_shouldPause',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFundsMany',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isPaused',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setUserWalletConfig',
    inputs: [
      {
        name: '_config',
        type: 'tuple',
        components: [
          {
            name: 'walletTemplate',
            type: 'address',
          },
          {
            name: 'configTemplate',
            type: 'address',
          },
          {
            name: 'trialAsset',
            type: 'address',
          },
          {
            name: 'trialAmount',
            type: 'uint256',
          },
          {
            name: 'numUserWalletsAllowed',
            type: 'uint256',
          },
          {
            name: 'enforceCreatorWhitelist',
            type: 'bool',
          },
          {
            name: 'minKeyActionTimeLock',
            type: 'uint256',
          },
          {
            name: 'maxKeyActionTimeLock',
            type: 'uint256',
          },
          {
            name: 'defaultStaleBlocks',
            type: 'uint256',
          },
          {
            name: 'depositRewardsAsset',
            type: 'address',
          },
          {
            name: 'txFees',
            type: 'tuple',
            components: [
              {
                name: 'swapFee',
                type: 'uint256',
              },
              {
                name: 'stableSwapFee',
                type: 'uint256',
              },
              {
                name: 'rewardsFee',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'ambassadorRevShare',
            type: 'tuple',
            components: [
              {
                name: 'swapRatio',
                type: 'uint256',
              },
              {
                name: 'rewardsRatio',
                type: 'uint256',
              },
              {
                name: 'yieldRatio',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'defaultYieldMaxIncrease',
            type: 'uint256',
          },
          {
            name: 'defaultYieldPerformanceFee',
            type: 'uint256',
          },
          {
            name: 'defaultYieldAmbassadorBonusRatio',
            type: 'uint256',
          },
          {
            name: 'defaultYieldBonusRatio',
            type: 'uint256',
          },
          {
            name: 'defaultYieldAltBonusAsset',
            type: 'address',
          },
          {
            name: 'lootClaimCoolOffPeriod',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setManagerConfig',
    inputs: [
      {
        name: '_config',
        type: 'tuple',
        components: [
          {
            name: 'managerPeriod',
            type: 'uint256',
          },
          {
            name: 'managerActivationLength',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setPayeeConfig',
    inputs: [
      {
        name: '_config',
        type: 'tuple',
        components: [
          {
            name: 'payeePeriod',
            type: 'uint256',
          },
          {
            name: 'payeeActivationLength',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setChequeConfig',
    inputs: [
      {
        name: '_config',
        type: 'tuple',
        components: [
          {
            name: 'maxNumActiveCheques',
            type: 'uint256',
          },
          {
            name: 'instantUsdThreshold',
            type: 'uint256',
          },
          {
            name: 'periodLength',
            type: 'uint256',
          },
          {
            name: 'expensiveDelayBlocks',
            type: 'uint256',
          },
          {
            name: 'defaultExpiryBlocks',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUserWalletCreationConfig',
    inputs: [
      {
        name: '_creator',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'numUserWalletsAllowed',
            type: 'uint256',
          },
          {
            name: 'isCreatorAllowed',
            type: 'bool',
          },
          {
            name: 'walletTemplate',
            type: 'address',
          },
          {
            name: 'configTemplate',
            type: 'address',
          },
          {
            name: 'startingAgent',
            type: 'address',
          },
          {
            name: 'startingAgentActivationLength',
            type: 'uint256',
          },
          {
            name: 'managerPeriod',
            type: 'uint256',
          },
          {
            name: 'managerActivationLength',
            type: 'uint256',
          },
          {
            name: 'payeePeriod',
            type: 'uint256',
          },
          {
            name: 'payeeActivationLength',
            type: 'uint256',
          },
          {
            name: 'chequeMaxNumActiveCheques',
            type: 'uint256',
          },
          {
            name: 'chequeInstantUsdThreshold',
            type: 'uint256',
          },
          {
            name: 'chequePeriodLength',
            type: 'uint256',
          },
          {
            name: 'chequeExpensiveDelayBlocks',
            type: 'uint256',
          },
          {
            name: 'chequeDefaultExpiryBlocks',
            type: 'uint256',
          },
          {
            name: 'trialAsset',
            type: 'address',
          },
          {
            name: 'trialAmount',
            type: 'uint256',
          },
          {
            name: 'minKeyActionTimeLock',
            type: 'uint256',
          },
          {
            name: 'maxKeyActionTimeLock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getLootDistroConfig',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'ambassador',
            type: 'address',
          },
          {
            name: 'ambassadorRevShare',
            type: 'tuple',
            components: [
              {
                name: 'swapRatio',
                type: 'uint256',
              },
              {
                name: 'rewardsRatio',
                type: 'uint256',
              },
              {
                name: 'yieldRatio',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'ambassadorBonusRatio',
            type: 'uint256',
          },
          {
            name: 'bonusRatio',
            type: 'uint256',
          },
          {
            name: 'altBonusAsset',
            type: 'address',
          },
          {
            name: 'underlyingAsset',
            type: 'address',
          },
          {
            name: 'decimals',
            type: 'uint256',
          },
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'legoAddr',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getDepositRewardsAsset',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getLootClaimCoolOffPeriod',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setAgentConfig',
    inputs: [
      {
        name: '_config',
        type: 'tuple',
        components: [
          {
            name: 'agentTemplate',
            type: 'address',
          },
          {
            name: 'numAgentsAllowed',
            type: 'uint256',
          },
          {
            name: 'enforceCreatorWhitelist',
            type: 'bool',
          },
          {
            name: 'startingAgent',
            type: 'address',
          },
          {
            name: 'startingAgentActivationLength',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setStarterAgent',
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAgentCreationConfig',
    inputs: [
      {
        name: '_creator',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'agentTemplate',
            type: 'address',
          },
          {
            name: 'numAgentsAllowed',
            type: 'uint256',
          },
          {
            name: 'isCreatorAllowed',
            type: 'bool',
          },
          {
            name: 'minTimeLock',
            type: 'uint256',
          },
          {
            name: 'maxTimeLock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setAssetConfig',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_config',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'decimals',
            type: 'uint256',
          },
          {
            name: 'staleBlocks',
            type: 'uint256',
          },
          {
            name: 'txFees',
            type: 'tuple',
            components: [
              {
                name: 'swapFee',
                type: 'uint256',
              },
              {
                name: 'stableSwapFee',
                type: 'uint256',
              },
              {
                name: 'rewardsFee',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'ambassadorRevShare',
            type: 'tuple',
            components: [
              {
                name: 'swapRatio',
                type: 'uint256',
              },
              {
                name: 'rewardsRatio',
                type: 'uint256',
              },
              {
                name: 'yieldRatio',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'yieldConfig',
            type: 'tuple',
            components: [
              {
                name: 'isYieldAsset',
                type: 'bool',
              },
              {
                name: 'isRebasing',
                type: 'bool',
              },
              {
                name: 'underlyingAsset',
                type: 'address',
              },
              {
                name: 'maxYieldIncrease',
                type: 'uint256',
              },
              {
                name: 'performanceFee',
                type: 'uint256',
              },
              {
                name: 'ambassadorBonusRatio',
                type: 'uint256',
              },
              {
                name: 'bonusRatio',
                type: 'uint256',
              },
              {
                name: 'altBonusAsset',
                type: 'address',
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setIsStablecoin',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_isStablecoin',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getProfitCalcConfig',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'legoAddr',
            type: 'address',
          },
          {
            name: 'decimals',
            type: 'uint256',
          },
          {
            name: 'staleBlocks',
            type: 'uint256',
          },
          {
            name: 'isYieldAsset',
            type: 'bool',
          },
          {
            name: 'isRebasing',
            type: 'bool',
          },
          {
            name: 'underlyingAsset',
            type: 'address',
          },
          {
            name: 'maxYieldIncrease',
            type: 'uint256',
          },
          {
            name: 'performanceFee',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAssetUsdValueConfig',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'legoAddr',
            type: 'address',
          },
          {
            name: 'decimals',
            type: 'uint256',
          },
          {
            name: 'staleBlocks',
            type: 'uint256',
          },
          {
            name: 'isYieldAsset',
            type: 'bool',
          },
          {
            name: 'underlyingAsset',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getSwapFee',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getRewardsFee',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setCanPerformSecurityAction',
    inputs: [
      {
        name: '_signer',
        type: 'address',
      },
      {
        name: '_canPerform',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setCreatorWhitelist',
    inputs: [
      {
        name: '_creator',
        type: 'address',
      },
      {
        name: '_isWhitelisted',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setLockedSigner',
    inputs: [
      {
        name: '_signer',
        type: 'address',
      },
      {
        name: '_isLocked',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'userWalletConfig',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'walletTemplate',
            type: 'address',
          },
          {
            name: 'configTemplate',
            type: 'address',
          },
          {
            name: 'trialAsset',
            type: 'address',
          },
          {
            name: 'trialAmount',
            type: 'uint256',
          },
          {
            name: 'numUserWalletsAllowed',
            type: 'uint256',
          },
          {
            name: 'enforceCreatorWhitelist',
            type: 'bool',
          },
          {
            name: 'minKeyActionTimeLock',
            type: 'uint256',
          },
          {
            name: 'maxKeyActionTimeLock',
            type: 'uint256',
          },
          {
            name: 'defaultStaleBlocks',
            type: 'uint256',
          },
          {
            name: 'depositRewardsAsset',
            type: 'address',
          },
          {
            name: 'txFees',
            type: 'tuple',
            components: [
              {
                name: 'swapFee',
                type: 'uint256',
              },
              {
                name: 'stableSwapFee',
                type: 'uint256',
              },
              {
                name: 'rewardsFee',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'ambassadorRevShare',
            type: 'tuple',
            components: [
              {
                name: 'swapRatio',
                type: 'uint256',
              },
              {
                name: 'rewardsRatio',
                type: 'uint256',
              },
              {
                name: 'yieldRatio',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'defaultYieldMaxIncrease',
            type: 'uint256',
          },
          {
            name: 'defaultYieldPerformanceFee',
            type: 'uint256',
          },
          {
            name: 'defaultYieldAmbassadorBonusRatio',
            type: 'uint256',
          },
          {
            name: 'defaultYieldBonusRatio',
            type: 'uint256',
          },
          {
            name: 'defaultYieldAltBonusAsset',
            type: 'address',
          },
          {
            name: 'lootClaimCoolOffPeriod',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'agentConfig',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'agentTemplate',
            type: 'address',
          },
          {
            name: 'numAgentsAllowed',
            type: 'uint256',
          },
          {
            name: 'enforceCreatorWhitelist',
            type: 'bool',
          },
          {
            name: 'startingAgent',
            type: 'address',
          },
          {
            name: 'startingAgentActivationLength',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'managerConfig',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'managerPeriod',
            type: 'uint256',
          },
          {
            name: 'managerActivationLength',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'payeeConfig',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'payeePeriod',
            type: 'uint256',
          },
          {
            name: 'payeeActivationLength',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'chequeConfig',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'maxNumActiveCheques',
            type: 'uint256',
          },
          {
            name: 'instantUsdThreshold',
            type: 'uint256',
          },
          {
            name: 'periodLength',
            type: 'uint256',
          },
          {
            name: 'expensiveDelayBlocks',
            type: 'uint256',
          },
          {
            name: 'defaultExpiryBlocks',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'assetConfig',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'decimals',
            type: 'uint256',
          },
          {
            name: 'staleBlocks',
            type: 'uint256',
          },
          {
            name: 'txFees',
            type: 'tuple',
            components: [
              {
                name: 'swapFee',
                type: 'uint256',
              },
              {
                name: 'stableSwapFee',
                type: 'uint256',
              },
              {
                name: 'rewardsFee',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'ambassadorRevShare',
            type: 'tuple',
            components: [
              {
                name: 'swapRatio',
                type: 'uint256',
              },
              {
                name: 'rewardsRatio',
                type: 'uint256',
              },
              {
                name: 'yieldRatio',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'yieldConfig',
            type: 'tuple',
            components: [
              {
                name: 'isYieldAsset',
                type: 'bool',
              },
              {
                name: 'isRebasing',
                type: 'bool',
              },
              {
                name: 'underlyingAsset',
                type: 'address',
              },
              {
                name: 'maxYieldIncrease',
                type: 'uint256',
              },
              {
                name: 'performanceFee',
                type: 'uint256',
              },
              {
                name: 'ambassadorBonusRatio',
                type: 'uint256',
              },
              {
                name: 'bonusRatio',
                type: 'uint256',
              },
              {
                name: 'altBonusAsset',
                type: 'address',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isStablecoin',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'creatorWhitelist',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canPerformSecurityAction',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isLockedSigner',
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_defaults',
        type: 'address',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0x910FE9484540fa21B092eE04a478A30A6B342006'

export type Contract = {
  calls: {
    getAddys: () => Promise<{
      hq: `0x${string}`
      undyToken: `0x${string}`
      ledger: `0x${string}`
      missionControl: `0x${string}`
      legoBook: `0x${string}`
      switchboard: `0x${string}`
      hatchery: `0x${string}`
      lootDistributor: `0x${string}`
      appraiser: `0x${string}`
      walletBackpack: `0x${string}`
      billing: `0x${string}`
    }>
    getUndyHq: () => Promise<`0x${string}`>
    canMintUndy: () => Promise<boolean>
    isPaused: () => Promise<boolean>
    getUserWalletCreationConfig: (
      creator: `0x${string}`,
    ) => Promise<{
      numUserWalletsAllowed: bigint
      isCreatorAllowed: boolean
      walletTemplate: `0x${string}`
      configTemplate: `0x${string}`
      startingAgent: `0x${string}`
      startingAgentActivationLength: bigint
      managerPeriod: bigint
      managerActivationLength: bigint
      payeePeriod: bigint
      payeeActivationLength: bigint
      chequeMaxNumActiveCheques: bigint
      chequeInstantUsdThreshold: bigint
      chequePeriodLength: bigint
      chequeExpensiveDelayBlocks: bigint
      chequeDefaultExpiryBlocks: bigint
      trialAsset: `0x${string}`
      trialAmount: bigint
      minKeyActionTimeLock: bigint
      maxKeyActionTimeLock: bigint
    }>
    getLootDistroConfig: (
      asset: `0x${string}`,
    ) => Promise<{
      ambassador: `0x${string}`
      ambassadorRevShare: { swapRatio: bigint; rewardsRatio: bigint; yieldRatio: bigint }
      ambassadorBonusRatio: bigint
      bonusRatio: bigint
      altBonusAsset: `0x${string}`
      underlyingAsset: `0x${string}`
      decimals: bigint
      legoId: bigint
      legoAddr: `0x${string}`
    }>
    getDepositRewardsAsset: () => Promise<`0x${string}`>
    getLootClaimCoolOffPeriod: () => Promise<bigint>
    getAgentCreationConfig: (
      creator: `0x${string}`,
    ) => Promise<{
      agentTemplate: `0x${string}`
      numAgentsAllowed: bigint
      isCreatorAllowed: boolean
      minTimeLock: bigint
      maxTimeLock: bigint
    }>
    getProfitCalcConfig: (
      asset: `0x${string}`,
    ) => Promise<{
      legoId: bigint
      legoAddr: `0x${string}`
      decimals: bigint
      staleBlocks: bigint
      isYieldAsset: boolean
      isRebasing: boolean
      underlyingAsset: `0x${string}`
      maxYieldIncrease: bigint
      performanceFee: bigint
    }>
    getAssetUsdValueConfig: (
      asset: `0x${string}`,
    ) => Promise<{
      legoId: bigint
      legoAddr: `0x${string}`
      decimals: bigint
      staleBlocks: bigint
      isYieldAsset: boolean
      underlyingAsset: `0x${string}`
    }>
    getSwapFee: (tokenIn: `0x${string}`, tokenOut: `0x${string}`) => Promise<bigint>
    getRewardsFee: (asset: `0x${string}`) => Promise<bigint>
    userWalletConfig: () => Promise<{
      walletTemplate: `0x${string}`
      configTemplate: `0x${string}`
      trialAsset: `0x${string}`
      trialAmount: bigint
      numUserWalletsAllowed: bigint
      enforceCreatorWhitelist: boolean
      minKeyActionTimeLock: bigint
      maxKeyActionTimeLock: bigint
      defaultStaleBlocks: bigint
      depositRewardsAsset: `0x${string}`
      txFees: { swapFee: bigint; stableSwapFee: bigint; rewardsFee: bigint }
      ambassadorRevShare: { swapRatio: bigint; rewardsRatio: bigint; yieldRatio: bigint }
      defaultYieldMaxIncrease: bigint
      defaultYieldPerformanceFee: bigint
      defaultYieldAmbassadorBonusRatio: bigint
      defaultYieldBonusRatio: bigint
      defaultYieldAltBonusAsset: `0x${string}`
      lootClaimCoolOffPeriod: bigint
    }>
    agentConfig: () => Promise<{
      agentTemplate: `0x${string}`
      numAgentsAllowed: bigint
      enforceCreatorWhitelist: boolean
      startingAgent: `0x${string}`
      startingAgentActivationLength: bigint
    }>
    managerConfig: () => Promise<{ managerPeriod: bigint; managerActivationLength: bigint }>
    payeeConfig: () => Promise<{ payeePeriod: bigint; payeeActivationLength: bigint }>
    chequeConfig: () => Promise<{
      maxNumActiveCheques: bigint
      instantUsdThreshold: bigint
      periodLength: bigint
      expensiveDelayBlocks: bigint
      defaultExpiryBlocks: bigint
    }>
    assetConfig: (
      arg0: `0x${string}`,
    ) => Promise<{
      legoId: bigint
      decimals: bigint
      staleBlocks: bigint
      txFees: { swapFee: bigint; stableSwapFee: bigint; rewardsFee: bigint }
      ambassadorRevShare: { swapRatio: bigint; rewardsRatio: bigint; yieldRatio: bigint }
      yieldConfig: {
        isYieldAsset: boolean
        isRebasing: boolean
        underlyingAsset: `0x${string}`
        maxYieldIncrease: bigint
        performanceFee: bigint
        ambassadorBonusRatio: bigint
        bonusRatio: bigint
        altBonusAsset: `0x${string}`
      }
    }>
    isStablecoin: (arg0: `0x${string}`) => Promise<boolean>
    creatorWhitelist: (arg0: `0x${string}`) => Promise<boolean>
    canPerformSecurityAction: (arg0: `0x${string}`) => Promise<boolean>
    isLockedSigner: (arg0: `0x${string}`) => Promise<boolean>
  }
  mutations: {
    pause: (shouldPause: boolean) => Promise<void>
    recoverFunds: (recipient: `0x${string}`, asset: `0x${string}`) => Promise<void>
    recoverFundsMany: (recipient: `0x${string}`, assets: `0x${string}`[]) => Promise<void>
    setUserWalletConfig: (config: {
      walletTemplate: `0x${string}`
      configTemplate: `0x${string}`
      trialAsset: `0x${string}`
      trialAmount: bigint
      numUserWalletsAllowed: bigint
      enforceCreatorWhitelist: boolean
      minKeyActionTimeLock: bigint
      maxKeyActionTimeLock: bigint
      defaultStaleBlocks: bigint
      depositRewardsAsset: `0x${string}`
      txFees: { swapFee: bigint; stableSwapFee: bigint; rewardsFee: bigint }
      ambassadorRevShare: { swapRatio: bigint; rewardsRatio: bigint; yieldRatio: bigint }
      defaultYieldMaxIncrease: bigint
      defaultYieldPerformanceFee: bigint
      defaultYieldAmbassadorBonusRatio: bigint
      defaultYieldBonusRatio: bigint
      defaultYieldAltBonusAsset: `0x${string}`
      lootClaimCoolOffPeriod: bigint
    }) => Promise<void>
    setManagerConfig: (config: { managerPeriod: bigint; managerActivationLength: bigint }) => Promise<void>
    setPayeeConfig: (config: { payeePeriod: bigint; payeeActivationLength: bigint }) => Promise<void>
    setChequeConfig: (config: {
      maxNumActiveCheques: bigint
      instantUsdThreshold: bigint
      periodLength: bigint
      expensiveDelayBlocks: bigint
      defaultExpiryBlocks: bigint
    }) => Promise<void>
    setAgentConfig: (config: {
      agentTemplate: `0x${string}`
      numAgentsAllowed: bigint
      enforceCreatorWhitelist: boolean
      startingAgent: `0x${string}`
      startingAgentActivationLength: bigint
    }) => Promise<void>
    setStarterAgent: (agent: `0x${string}`) => Promise<void>
    setAssetConfig: (
      asset: `0x${string}`,
      config: {
        legoId: bigint
        decimals: bigint
        staleBlocks: bigint
        txFees: { swapFee: bigint; stableSwapFee: bigint; rewardsFee: bigint }
        ambassadorRevShare: { swapRatio: bigint; rewardsRatio: bigint; yieldRatio: bigint }
        yieldConfig: {
          isYieldAsset: boolean
          isRebasing: boolean
          underlyingAsset: `0x${string}`
          maxYieldIncrease: bigint
          performanceFee: bigint
          ambassadorBonusRatio: bigint
          bonusRatio: bigint
          altBonusAsset: `0x${string}`
        }
      },
    ) => Promise<void>
    setIsStablecoin: (asset: `0x${string}`, isStablecoin: boolean) => Promise<void>
    setCanPerformSecurityAction: (signer: `0x${string}`, canPerform: boolean) => Promise<void>
    setCreatorWhitelist: (creator: `0x${string}`, isWhitelisted: boolean) => Promise<void>
    setLockedSigner: (signer: `0x${string}`, isLocked: boolean) => Promise<void>
  }
  events: {
    DepartmentPauseModified: (isPaused: boolean) => Promise<void>
    DepartmentFundsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, balance: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'MissionControl'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'MissionControl' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => getRequest('getAddys', args),
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => getRequest('getUndyHq', args),
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => getRequest('canMintUndy', args),
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => getRequest('isPaused', args),
  getUserWalletCreationConfig: (...args: ExtractArgs<Contract['calls']['getUserWalletCreationConfig']>) =>
    getRequest('getUserWalletCreationConfig', args),
  getLootDistroConfig: (...args: ExtractArgs<Contract['calls']['getLootDistroConfig']>) =>
    getRequest('getLootDistroConfig', args),
  getDepositRewardsAsset: (...args: ExtractArgs<Contract['calls']['getDepositRewardsAsset']>) =>
    getRequest('getDepositRewardsAsset', args),
  getLootClaimCoolOffPeriod: (...args: ExtractArgs<Contract['calls']['getLootClaimCoolOffPeriod']>) =>
    getRequest('getLootClaimCoolOffPeriod', args),
  getAgentCreationConfig: (...args: ExtractArgs<Contract['calls']['getAgentCreationConfig']>) =>
    getRequest('getAgentCreationConfig', args),
  getProfitCalcConfig: (...args: ExtractArgs<Contract['calls']['getProfitCalcConfig']>) =>
    getRequest('getProfitCalcConfig', args),
  getAssetUsdValueConfig: (...args: ExtractArgs<Contract['calls']['getAssetUsdValueConfig']>) =>
    getRequest('getAssetUsdValueConfig', args),
  getSwapFee: (...args: ExtractArgs<Contract['calls']['getSwapFee']>) => getRequest('getSwapFee', args),
  getRewardsFee: (...args: ExtractArgs<Contract['calls']['getRewardsFee']>) => getRequest('getRewardsFee', args),
  userWalletConfig: (...args: ExtractArgs<Contract['calls']['userWalletConfig']>) =>
    getRequest('userWalletConfig', args),
  agentConfig: (...args: ExtractArgs<Contract['calls']['agentConfig']>) => getRequest('agentConfig', args),
  managerConfig: (...args: ExtractArgs<Contract['calls']['managerConfig']>) => getRequest('managerConfig', args),
  payeeConfig: (...args: ExtractArgs<Contract['calls']['payeeConfig']>) => getRequest('payeeConfig', args),
  chequeConfig: (...args: ExtractArgs<Contract['calls']['chequeConfig']>) => getRequest('chequeConfig', args),
  assetConfig: (...args: ExtractArgs<Contract['calls']['assetConfig']>) => getRequest('assetConfig', args),
  isStablecoin: (...args: ExtractArgs<Contract['calls']['isStablecoin']>) => getRequest('isStablecoin', args),
  creatorWhitelist: (...args: ExtractArgs<Contract['calls']['creatorWhitelist']>) =>
    getRequest('creatorWhitelist', args),
  canPerformSecurityAction: (...args: ExtractArgs<Contract['calls']['canPerformSecurityAction']>) =>
    getRequest('canPerformSecurityAction', args),
  isLockedSigner: (...args: ExtractArgs<Contract['calls']['isLockedSigner']>) => getRequest('isLockedSigner', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'MissionControl' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'MissionControl'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  pause: getMutation('pause'),
  recoverFunds: getMutation('recoverFunds'),
  recoverFundsMany: getMutation('recoverFundsMany'),
  setUserWalletConfig: getMutation('setUserWalletConfig'),
  setManagerConfig: getMutation('setManagerConfig'),
  setPayeeConfig: getMutation('setPayeeConfig'),
  setChequeConfig: getMutation('setChequeConfig'),
  setAgentConfig: getMutation('setAgentConfig'),
  setStarterAgent: getMutation('setStarterAgent'),
  setAssetConfig: getMutation('setAssetConfig'),
  setIsStablecoin: getMutation('setIsStablecoin'),
  setCanPerformSecurityAction: getMutation('setCanPerformSecurityAction'),
  setCreatorWhitelist: getMutation('setCreatorWhitelist'),
  setLockedSigner: getMutation('setLockedSigner'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => Promise<CallReturn<'getAddys'>>
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => Promise<CallReturn<'getUndyHq'>>
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => Promise<CallReturn<'canMintUndy'>>
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => Promise<CallReturn<'isPaused'>>
  getUserWalletCreationConfig: (
    ...args: ExtractArgs<Contract['calls']['getUserWalletCreationConfig']>
  ) => Promise<CallReturn<'getUserWalletCreationConfig'>>
  getLootDistroConfig: (
    ...args: ExtractArgs<Contract['calls']['getLootDistroConfig']>
  ) => Promise<CallReturn<'getLootDistroConfig'>>
  getDepositRewardsAsset: (
    ...args: ExtractArgs<Contract['calls']['getDepositRewardsAsset']>
  ) => Promise<CallReturn<'getDepositRewardsAsset'>>
  getLootClaimCoolOffPeriod: (
    ...args: ExtractArgs<Contract['calls']['getLootClaimCoolOffPeriod']>
  ) => Promise<CallReturn<'getLootClaimCoolOffPeriod'>>
  getAgentCreationConfig: (
    ...args: ExtractArgs<Contract['calls']['getAgentCreationConfig']>
  ) => Promise<CallReturn<'getAgentCreationConfig'>>
  getProfitCalcConfig: (
    ...args: ExtractArgs<Contract['calls']['getProfitCalcConfig']>
  ) => Promise<CallReturn<'getProfitCalcConfig'>>
  getAssetUsdValueConfig: (
    ...args: ExtractArgs<Contract['calls']['getAssetUsdValueConfig']>
  ) => Promise<CallReturn<'getAssetUsdValueConfig'>>
  getSwapFee: (...args: ExtractArgs<Contract['calls']['getSwapFee']>) => Promise<CallReturn<'getSwapFee'>>
  getRewardsFee: (...args: ExtractArgs<Contract['calls']['getRewardsFee']>) => Promise<CallReturn<'getRewardsFee'>>
  userWalletConfig: (
    ...args: ExtractArgs<Contract['calls']['userWalletConfig']>
  ) => Promise<CallReturn<'userWalletConfig'>>
  agentConfig: (...args: ExtractArgs<Contract['calls']['agentConfig']>) => Promise<CallReturn<'agentConfig'>>
  managerConfig: (...args: ExtractArgs<Contract['calls']['managerConfig']>) => Promise<CallReturn<'managerConfig'>>
  payeeConfig: (...args: ExtractArgs<Contract['calls']['payeeConfig']>) => Promise<CallReturn<'payeeConfig'>>
  chequeConfig: (...args: ExtractArgs<Contract['calls']['chequeConfig']>) => Promise<CallReturn<'chequeConfig'>>
  assetConfig: (...args: ExtractArgs<Contract['calls']['assetConfig']>) => Promise<CallReturn<'assetConfig'>>
  isStablecoin: (...args: ExtractArgs<Contract['calls']['isStablecoin']>) => Promise<CallReturn<'isStablecoin'>>
  creatorWhitelist: (
    ...args: ExtractArgs<Contract['calls']['creatorWhitelist']>
  ) => Promise<CallReturn<'creatorWhitelist'>>
  canPerformSecurityAction: (
    ...args: ExtractArgs<Contract['calls']['canPerformSecurityAction']>
  ) => Promise<CallReturn<'canPerformSecurityAction'>>
  isLockedSigner: (...args: ExtractArgs<Contract['calls']['isLockedSigner']>) => Promise<CallReturn<'isLockedSigner'>>
  pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => Promise<Address>
  recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) => Promise<Address>
  recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) => Promise<Address>
  setUserWalletConfig: (...args: ExtractArgs<Contract['mutations']['setUserWalletConfig']>) => Promise<Address>
  setManagerConfig: (...args: ExtractArgs<Contract['mutations']['setManagerConfig']>) => Promise<Address>
  setPayeeConfig: (...args: ExtractArgs<Contract['mutations']['setPayeeConfig']>) => Promise<Address>
  setChequeConfig: (...args: ExtractArgs<Contract['mutations']['setChequeConfig']>) => Promise<Address>
  setAgentConfig: (...args: ExtractArgs<Contract['mutations']['setAgentConfig']>) => Promise<Address>
  setStarterAgent: (...args: ExtractArgs<Contract['mutations']['setStarterAgent']>) => Promise<Address>
  setAssetConfig: (...args: ExtractArgs<Contract['mutations']['setAssetConfig']>) => Promise<Address>
  setIsStablecoin: (...args: ExtractArgs<Contract['mutations']['setIsStablecoin']>) => Promise<Address>
  setCanPerformSecurityAction: (
    ...args: ExtractArgs<Contract['mutations']['setCanPerformSecurityAction']>
  ) => Promise<Address>
  setCreatorWhitelist: (...args: ExtractArgs<Contract['mutations']['setCreatorWhitelist']>) => Promise<Address>
  setLockedSigner: (...args: ExtractArgs<Contract['mutations']['setLockedSigner']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) =>
      singleQuery(publicClient!, call.getAddys(...args)) as Promise<CallReturn<'getAddys'>>,
    getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) =>
      singleQuery(publicClient!, call.getUndyHq(...args)) as Promise<CallReturn<'getUndyHq'>>,
    canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) =>
      singleQuery(publicClient!, call.canMintUndy(...args)) as Promise<CallReturn<'canMintUndy'>>,
    isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) =>
      singleQuery(publicClient!, call.isPaused(...args)) as Promise<CallReturn<'isPaused'>>,
    getUserWalletCreationConfig: (...args: ExtractArgs<Contract['calls']['getUserWalletCreationConfig']>) =>
      singleQuery(publicClient!, call.getUserWalletCreationConfig(...args)) as Promise<
        CallReturn<'getUserWalletCreationConfig'>
      >,
    getLootDistroConfig: (...args: ExtractArgs<Contract['calls']['getLootDistroConfig']>) =>
      singleQuery(publicClient!, call.getLootDistroConfig(...args)) as Promise<CallReturn<'getLootDistroConfig'>>,
    getDepositRewardsAsset: (...args: ExtractArgs<Contract['calls']['getDepositRewardsAsset']>) =>
      singleQuery(publicClient!, call.getDepositRewardsAsset(...args)) as Promise<CallReturn<'getDepositRewardsAsset'>>,
    getLootClaimCoolOffPeriod: (...args: ExtractArgs<Contract['calls']['getLootClaimCoolOffPeriod']>) =>
      singleQuery(publicClient!, call.getLootClaimCoolOffPeriod(...args)) as Promise<
        CallReturn<'getLootClaimCoolOffPeriod'>
      >,
    getAgentCreationConfig: (...args: ExtractArgs<Contract['calls']['getAgentCreationConfig']>) =>
      singleQuery(publicClient!, call.getAgentCreationConfig(...args)) as Promise<CallReturn<'getAgentCreationConfig'>>,
    getProfitCalcConfig: (...args: ExtractArgs<Contract['calls']['getProfitCalcConfig']>) =>
      singleQuery(publicClient!, call.getProfitCalcConfig(...args)) as Promise<CallReturn<'getProfitCalcConfig'>>,
    getAssetUsdValueConfig: (...args: ExtractArgs<Contract['calls']['getAssetUsdValueConfig']>) =>
      singleQuery(publicClient!, call.getAssetUsdValueConfig(...args)) as Promise<CallReturn<'getAssetUsdValueConfig'>>,
    getSwapFee: (...args: ExtractArgs<Contract['calls']['getSwapFee']>) =>
      singleQuery(publicClient!, call.getSwapFee(...args)) as Promise<CallReturn<'getSwapFee'>>,
    getRewardsFee: (...args: ExtractArgs<Contract['calls']['getRewardsFee']>) =>
      singleQuery(publicClient!, call.getRewardsFee(...args)) as Promise<CallReturn<'getRewardsFee'>>,
    userWalletConfig: (...args: ExtractArgs<Contract['calls']['userWalletConfig']>) =>
      singleQuery(publicClient!, call.userWalletConfig(...args)) as Promise<CallReturn<'userWalletConfig'>>,
    agentConfig: (...args: ExtractArgs<Contract['calls']['agentConfig']>) =>
      singleQuery(publicClient!, call.agentConfig(...args)) as Promise<CallReturn<'agentConfig'>>,
    managerConfig: (...args: ExtractArgs<Contract['calls']['managerConfig']>) =>
      singleQuery(publicClient!, call.managerConfig(...args)) as Promise<CallReturn<'managerConfig'>>,
    payeeConfig: (...args: ExtractArgs<Contract['calls']['payeeConfig']>) =>
      singleQuery(publicClient!, call.payeeConfig(...args)) as Promise<CallReturn<'payeeConfig'>>,
    chequeConfig: (...args: ExtractArgs<Contract['calls']['chequeConfig']>) =>
      singleQuery(publicClient!, call.chequeConfig(...args)) as Promise<CallReturn<'chequeConfig'>>,
    assetConfig: (...args: ExtractArgs<Contract['calls']['assetConfig']>) =>
      singleQuery(publicClient!, call.assetConfig(...args)) as Promise<CallReturn<'assetConfig'>>,
    isStablecoin: (...args: ExtractArgs<Contract['calls']['isStablecoin']>) =>
      singleQuery(publicClient!, call.isStablecoin(...args)) as Promise<CallReturn<'isStablecoin'>>,
    creatorWhitelist: (...args: ExtractArgs<Contract['calls']['creatorWhitelist']>) =>
      singleQuery(publicClient!, call.creatorWhitelist(...args)) as Promise<CallReturn<'creatorWhitelist'>>,
    canPerformSecurityAction: (...args: ExtractArgs<Contract['calls']['canPerformSecurityAction']>) =>
      singleQuery(publicClient!, call.canPerformSecurityAction(...args)) as Promise<
        CallReturn<'canPerformSecurityAction'>
      >,
    isLockedSigner: (...args: ExtractArgs<Contract['calls']['isLockedSigner']>) =>
      singleQuery(publicClient!, call.isLockedSigner(...args)) as Promise<CallReturn<'isLockedSigner'>>,

    // Mutations
    pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => mutate(walletClient!, mutation.pause)(...args),
    recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) =>
      mutate(walletClient!, mutation.recoverFunds)(...args),
    recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) =>
      mutate(walletClient!, mutation.recoverFundsMany)(...args),
    setUserWalletConfig: (...args: ExtractArgs<Contract['mutations']['setUserWalletConfig']>) =>
      mutate(walletClient!, mutation.setUserWalletConfig)(...args),
    setManagerConfig: (...args: ExtractArgs<Contract['mutations']['setManagerConfig']>) =>
      mutate(walletClient!, mutation.setManagerConfig)(...args),
    setPayeeConfig: (...args: ExtractArgs<Contract['mutations']['setPayeeConfig']>) =>
      mutate(walletClient!, mutation.setPayeeConfig)(...args),
    setChequeConfig: (...args: ExtractArgs<Contract['mutations']['setChequeConfig']>) =>
      mutate(walletClient!, mutation.setChequeConfig)(...args),
    setAgentConfig: (...args: ExtractArgs<Contract['mutations']['setAgentConfig']>) =>
      mutate(walletClient!, mutation.setAgentConfig)(...args),
    setStarterAgent: (...args: ExtractArgs<Contract['mutations']['setStarterAgent']>) =>
      mutate(walletClient!, mutation.setStarterAgent)(...args),
    setAssetConfig: (...args: ExtractArgs<Contract['mutations']['setAssetConfig']>) =>
      mutate(walletClient!, mutation.setAssetConfig)(...args),
    setIsStablecoin: (...args: ExtractArgs<Contract['mutations']['setIsStablecoin']>) =>
      mutate(walletClient!, mutation.setIsStablecoin)(...args),
    setCanPerformSecurityAction: (...args: ExtractArgs<Contract['mutations']['setCanPerformSecurityAction']>) =>
      mutate(walletClient!, mutation.setCanPerformSecurityAction)(...args),
    setCreatorWhitelist: (...args: ExtractArgs<Contract['mutations']['setCreatorWhitelist']>) =>
      mutate(walletClient!, mutation.setCreatorWhitelist)(...args),
    setLockedSigner: (...args: ExtractArgs<Contract['mutations']['setLockedSigner']>) =>
      mutate(walletClient!, mutation.setLockedSigner)(...args),
  }
}
