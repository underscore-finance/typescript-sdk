/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'DepartmentPauseModified',
    inputs: [
      {
        name: 'isPaused',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepartmentFundsRecovered',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'balance',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddys',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'hq',
            type: 'address',
          },
          {
            name: 'undyToken',
            type: 'address',
          },
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'switchboard',
            type: 'address',
          },
          {
            name: 'hatchery',
            type: 'address',
          },
          {
            name: 'lootDistributor',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
          {
            name: 'walletBackpack',
            type: 'address',
          },
          {
            name: 'billing',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHq',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canMintUndy',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'pause',
    inputs: [
      {
        name: '_shouldPause',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFundsMany',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isPaused',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'aaveV3',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'aaveV3Id',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'compoundV3',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'compoundV3Id',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'euler',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'eulerId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'fluid',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'fluidId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'moonwell',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'moonwellId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'morpho',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'morphoId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'uniswapV2',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'uniswapV2Id',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'uniswapV3',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'uniswapV3Id',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'aerodrome',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'aerodromeId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'aerodromeSlipstream',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'aerodromeSlipstreamId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'curve',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'curveId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUnderlyingAsset',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUnderlyingAsset',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_legoBook',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUnderlyingForUser',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUnderlyingForUser',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_legoBook',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getVaultTokensForUser',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'vaultToken',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getVaultTokensForUser',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_legoBook',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'vaultToken',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isVaultToken',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isVaultToken',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_legoBook',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getVaultTokenAmount',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_assetAmount',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getVaultTokenAmount',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_assetAmount',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_legoBook',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getLegoInfoFromVaultToken',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'string',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getLegoInfoFromVaultToken',
    inputs: [
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_legoBook',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'string',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUnderlyingData',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'usdValue',
            type: 'uint256',
          },
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'legoAddr',
            type: 'address',
          },
          {
            name: 'legoDesc',
            type: 'string',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUnderlyingData',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_legoBook',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'usdValue',
            type: 'uint256',
          },
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'legoAddr',
            type: 'address',
          },
          {
            name: 'legoDesc',
            type: 'string',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getRoutesAndSwapInstructionsAmountOut',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_slippage',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getRoutesAndSwapInstructionsAmountOut',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_slippage',
        type: 'uint256',
      },
      {
        name: '_includeLegoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getRoutesAndSwapInstructionsAmountIn',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
      {
        name: '_amountInAvailable',
        type: 'uint256',
      },
      {
        name: '_slippage',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getRoutesAndSwapInstructionsAmountIn',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
      {
        name: '_amountInAvailable',
        type: 'uint256',
      },
      {
        name: '_slippage',
        type: 'uint256',
      },
      {
        name: '_includeLegoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'prepareSwapInstructionsAmountOut',
    inputs: [
      {
        name: '_slippage',
        type: 'uint256',
      },
      {
        name: '_routes',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapRoutesAmountOut',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapRoutesAmountOut',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_includeLegoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapAmountOutWithRouterPool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapAmountOutWithRouterPool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_includeLegoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapAmountOutSinglePool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapAmountOutSinglePool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_includeLegoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getSwapAmountOutViaRouterPool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getSwapAmountOutViaRouterPool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_includeLegoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapRoutesAmountIn',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapRoutesAmountIn',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
      {
        name: '_includeLegoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapAmountInWithRouterPool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapAmountInWithRouterPool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
      {
        name: '_includeLegoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapAmountInSinglePool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getBestSwapAmountInSinglePool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
      {
        name: '_includeLegoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getSwapAmountInViaRouterPool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'getSwapAmountInViaRouterPool',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
      {
        name: '_includeLegoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'pool',
            type: 'address',
          },
          {
            name: 'tokenIn',
            type: 'address',
          },
          {
            name: 'tokenOut',
            type: 'address',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'amountOut',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'ROUTER_TOKENA',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'ROUTER_TOKENB',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'AAVE_V3_ID',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'COMPOUND_V3_ID',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'EULER_ID',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'FLUID_ID',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MOONWELL_ID',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MORPHO_ID',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'UNISWAP_V2_ID',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'UNISWAP_V3_ID',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'AERODROME_ID',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'AERODROME_SLIPSTREAM_ID',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'CURVE_ID',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_routerTokenA',
        type: 'address',
      },
      {
        name: '_routerTokenB',
        type: 'address',
      },
      {
        name: '_aaveV3Id',
        type: 'uint256',
      },
      {
        name: '_compoundV3Id',
        type: 'uint256',
      },
      {
        name: '_eulerId',
        type: 'uint256',
      },
      {
        name: '_fluidId',
        type: 'uint256',
      },
      {
        name: '_moonwellId',
        type: 'uint256',
      },
      {
        name: '_morphoId',
        type: 'uint256',
      },
      {
        name: '_uniswapV2Id',
        type: 'uint256',
      },
      {
        name: '_uniswapV3Id',
        type: 'uint256',
      },
      {
        name: '_aerodromeId',
        type: 'uint256',
      },
      {
        name: '_aerodromeSlipstreamId',
        type: 'uint256',
      },
      {
        name: '_curveId',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0x2edb54bE8c4F6Cde402CAAe86A809D434b3AFC66'

export type Contract = {
  calls: {
    getAddys: () => Promise<{
      hq: `0x${string}`
      undyToken: `0x${string}`
      ledger: `0x${string}`
      missionControl: `0x${string}`
      legoBook: `0x${string}`
      switchboard: `0x${string}`
      hatchery: `0x${string}`
      lootDistributor: `0x${string}`
      appraiser: `0x${string}`
      walletBackpack: `0x${string}`
      billing: `0x${string}`
    }>
    getUndyHq: () => Promise<`0x${string}`>
    canMintUndy: () => Promise<boolean>
    isPaused: () => Promise<boolean>
    aaveV3: () => Promise<`0x${string}`>
    aaveV3Id: () => Promise<bigint>
    compoundV3: () => Promise<`0x${string}`>
    compoundV3Id: () => Promise<bigint>
    euler: () => Promise<`0x${string}`>
    eulerId: () => Promise<bigint>
    fluid: () => Promise<`0x${string}`>
    fluidId: () => Promise<bigint>
    moonwell: () => Promise<`0x${string}`>
    moonwellId: () => Promise<bigint>
    morpho: () => Promise<`0x${string}`>
    morphoId: () => Promise<bigint>
    uniswapV2: () => Promise<`0x${string}`>
    uniswapV2Id: () => Promise<bigint>
    uniswapV3: () => Promise<`0x${string}`>
    uniswapV3Id: () => Promise<bigint>
    aerodrome: () => Promise<`0x${string}`>
    aerodromeId: () => Promise<bigint>
    aerodromeSlipstream: () => Promise<`0x${string}`>
    aerodromeSlipstreamId: () => Promise<bigint>
    curve: () => Promise<`0x${string}`>
    curveId: () => Promise<bigint>
    getUnderlyingAsset: (vaultToken: `0x${string}`, legoBook?: `0x${string}`) => Promise<`0x${string}`>
    getUnderlyingForUser: (user: `0x${string}`, asset: `0x${string}`, legoBook?: `0x${string}`) => Promise<bigint>
    getVaultTokensForUser: (
      user: `0x${string}`,
      asset: `0x${string}`,
      legoBook?: `0x${string}`,
    ) => Promise<{ legoId: bigint; vaultToken: `0x${string}` }[]>
    isVaultToken: (vaultToken: `0x${string}`, legoBook?: `0x${string}`) => Promise<boolean>
    getVaultTokenAmount: (
      asset: `0x${string}`,
      assetAmount: bigint,
      vaultToken: `0x${string}`,
      legoBook?: `0x${string}`,
    ) => Promise<bigint>
    getLegoInfoFromVaultToken: (
      vaultToken: `0x${string}`,
      legoBook?: `0x${string}`,
    ) => Promise<[bigint, `0x${string}`, string]>
    getUnderlyingData: (
      asset: `0x${string}`,
      amount: bigint,
      legoBook?: `0x${string}`,
    ) => Promise<{
      asset: `0x${string}`
      amount: bigint
      usdValue: bigint
      legoId: bigint
      legoAddr: `0x${string}`
      legoDesc: string
    }>
    ROUTER_TOKENA: () => Promise<`0x${string}`>
    ROUTER_TOKENB: () => Promise<`0x${string}`>
    AAVE_V3_ID: () => Promise<bigint>
    COMPOUND_V3_ID: () => Promise<bigint>
    EULER_ID: () => Promise<bigint>
    FLUID_ID: () => Promise<bigint>
    MOONWELL_ID: () => Promise<bigint>
    MORPHO_ID: () => Promise<bigint>
    UNISWAP_V2_ID: () => Promise<bigint>
    UNISWAP_V3_ID: () => Promise<bigint>
    AERODROME_ID: () => Promise<bigint>
    AERODROME_SLIPSTREAM_ID: () => Promise<bigint>
    CURVE_ID: () => Promise<bigint>
  }
  mutations: {
    pause: (shouldPause: boolean) => Promise<void>
    recoverFunds: (recipient: `0x${string}`, asset: `0x${string}`) => Promise<void>
    recoverFundsMany: (recipient: `0x${string}`, assets: `0x${string}`[]) => Promise<void>
    getRoutesAndSwapInstructionsAmountOut: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn: bigint,
      slippage: bigint,
      includeLegoIds?: bigint[],
    ) => Promise<
      {
        legoId: bigint
        amountIn: bigint
        minAmountOut: bigint
        tokenPath: `0x${string}`[]
        poolPath: `0x${string}`[]
      }[]
    >
    getRoutesAndSwapInstructionsAmountIn: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountOut: bigint,
      amountInAvailable: bigint,
      slippage: bigint,
      includeLegoIds?: bigint[],
    ) => Promise<
      {
        legoId: bigint
        amountIn: bigint
        minAmountOut: bigint
        tokenPath: `0x${string}`[]
        poolPath: `0x${string}`[]
      }[]
    >
    prepareSwapInstructionsAmountOut: (
      slippage: bigint,
      routes: {
        legoId: bigint
        pool: `0x${string}`
        tokenIn: `0x${string}`
        tokenOut: `0x${string}`
        amountIn: bigint
        amountOut: bigint
      }[],
    ) => Promise<
      {
        legoId: bigint
        amountIn: bigint
        minAmountOut: bigint
        tokenPath: `0x${string}`[]
        poolPath: `0x${string}`[]
      }[]
    >
    getBestSwapRoutesAmountOut: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn: bigint,
      includeLegoIds?: bigint[],
    ) => Promise<
      {
        legoId: bigint
        pool: `0x${string}`
        tokenIn: `0x${string}`
        tokenOut: `0x${string}`
        amountIn: bigint
        amountOut: bigint
      }[]
    >
    getBestSwapAmountOutWithRouterPool: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn: bigint,
      includeLegoIds?: bigint[],
    ) => Promise<
      [
        bigint,
        {
          legoId: bigint
          pool: `0x${string}`
          tokenIn: `0x${string}`
          tokenOut: `0x${string}`
          amountIn: bigint
          amountOut: bigint
        }[],
      ]
    >
    getBestSwapAmountOutSinglePool: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn: bigint,
      includeLegoIds?: bigint[],
    ) => Promise<{
      legoId: bigint
      pool: `0x${string}`
      tokenIn: `0x${string}`
      tokenOut: `0x${string}`
      amountIn: bigint
      amountOut: bigint
    }>
    getSwapAmountOutViaRouterPool: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn: bigint,
      includeLegoIds?: bigint[],
    ) => Promise<{
      legoId: bigint
      pool: `0x${string}`
      tokenIn: `0x${string}`
      tokenOut: `0x${string}`
      amountIn: bigint
      amountOut: bigint
    }>
    getBestSwapRoutesAmountIn: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountOut: bigint,
      includeLegoIds?: bigint[],
    ) => Promise<
      {
        legoId: bigint
        pool: `0x${string}`
        tokenIn: `0x${string}`
        tokenOut: `0x${string}`
        amountIn: bigint
        amountOut: bigint
      }[]
    >
    getBestSwapAmountInWithRouterPool: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountOut: bigint,
      includeLegoIds?: bigint[],
    ) => Promise<
      [
        bigint,
        {
          legoId: bigint
          pool: `0x${string}`
          tokenIn: `0x${string}`
          tokenOut: `0x${string}`
          amountIn: bigint
          amountOut: bigint
        }[],
      ]
    >
    getBestSwapAmountInSinglePool: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountOut: bigint,
      includeLegoIds?: bigint[],
    ) => Promise<{
      legoId: bigint
      pool: `0x${string}`
      tokenIn: `0x${string}`
      tokenOut: `0x${string}`
      amountIn: bigint
      amountOut: bigint
    }>
    getSwapAmountInViaRouterPool: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountOut: bigint,
      includeLegoIds?: bigint[],
    ) => Promise<{
      legoId: bigint
      pool: `0x${string}`
      tokenIn: `0x${string}`
      tokenOut: `0x${string}`
      amountIn: bigint
      amountOut: bigint
    }>
  }
  events: {
    DepartmentPauseModified: (isPaused: boolean) => Promise<void>
    DepartmentFundsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, balance: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'LegoTools'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'LegoTools' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => getRequest('getAddys', args),
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => getRequest('getUndyHq', args),
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => getRequest('canMintUndy', args),
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => getRequest('isPaused', args),
  aaveV3: (...args: ExtractArgs<Contract['calls']['aaveV3']>) => getRequest('aaveV3', args),
  aaveV3Id: (...args: ExtractArgs<Contract['calls']['aaveV3Id']>) => getRequest('aaveV3Id', args),
  compoundV3: (...args: ExtractArgs<Contract['calls']['compoundV3']>) => getRequest('compoundV3', args),
  compoundV3Id: (...args: ExtractArgs<Contract['calls']['compoundV3Id']>) => getRequest('compoundV3Id', args),
  euler: (...args: ExtractArgs<Contract['calls']['euler']>) => getRequest('euler', args),
  eulerId: (...args: ExtractArgs<Contract['calls']['eulerId']>) => getRequest('eulerId', args),
  fluid: (...args: ExtractArgs<Contract['calls']['fluid']>) => getRequest('fluid', args),
  fluidId: (...args: ExtractArgs<Contract['calls']['fluidId']>) => getRequest('fluidId', args),
  moonwell: (...args: ExtractArgs<Contract['calls']['moonwell']>) => getRequest('moonwell', args),
  moonwellId: (...args: ExtractArgs<Contract['calls']['moonwellId']>) => getRequest('moonwellId', args),
  morpho: (...args: ExtractArgs<Contract['calls']['morpho']>) => getRequest('morpho', args),
  morphoId: (...args: ExtractArgs<Contract['calls']['morphoId']>) => getRequest('morphoId', args),
  uniswapV2: (...args: ExtractArgs<Contract['calls']['uniswapV2']>) => getRequest('uniswapV2', args),
  uniswapV2Id: (...args: ExtractArgs<Contract['calls']['uniswapV2Id']>) => getRequest('uniswapV2Id', args),
  uniswapV3: (...args: ExtractArgs<Contract['calls']['uniswapV3']>) => getRequest('uniswapV3', args),
  uniswapV3Id: (...args: ExtractArgs<Contract['calls']['uniswapV3Id']>) => getRequest('uniswapV3Id', args),
  aerodrome: (...args: ExtractArgs<Contract['calls']['aerodrome']>) => getRequest('aerodrome', args),
  aerodromeId: (...args: ExtractArgs<Contract['calls']['aerodromeId']>) => getRequest('aerodromeId', args),
  aerodromeSlipstream: (...args: ExtractArgs<Contract['calls']['aerodromeSlipstream']>) =>
    getRequest('aerodromeSlipstream', args),
  aerodromeSlipstreamId: (...args: ExtractArgs<Contract['calls']['aerodromeSlipstreamId']>) =>
    getRequest('aerodromeSlipstreamId', args),
  curve: (...args: ExtractArgs<Contract['calls']['curve']>) => getRequest('curve', args),
  curveId: (...args: ExtractArgs<Contract['calls']['curveId']>) => getRequest('curveId', args),
  getUnderlyingAsset: (...args: ExtractArgs<Contract['calls']['getUnderlyingAsset']>) =>
    getRequest('getUnderlyingAsset', args),
  getUnderlyingForUser: (...args: ExtractArgs<Contract['calls']['getUnderlyingForUser']>) =>
    getRequest('getUnderlyingForUser', args),
  getVaultTokensForUser: (...args: ExtractArgs<Contract['calls']['getVaultTokensForUser']>) =>
    getRequest('getVaultTokensForUser', args),
  isVaultToken: (...args: ExtractArgs<Contract['calls']['isVaultToken']>) => getRequest('isVaultToken', args),
  getVaultTokenAmount: (...args: ExtractArgs<Contract['calls']['getVaultTokenAmount']>) =>
    getRequest('getVaultTokenAmount', args),
  getLegoInfoFromVaultToken: (...args: ExtractArgs<Contract['calls']['getLegoInfoFromVaultToken']>) =>
    getRequest('getLegoInfoFromVaultToken', args),
  getUnderlyingData: (...args: ExtractArgs<Contract['calls']['getUnderlyingData']>) =>
    getRequest('getUnderlyingData', args),
  ROUTER_TOKENA: (...args: ExtractArgs<Contract['calls']['ROUTER_TOKENA']>) => getRequest('ROUTER_TOKENA', args),
  ROUTER_TOKENB: (...args: ExtractArgs<Contract['calls']['ROUTER_TOKENB']>) => getRequest('ROUTER_TOKENB', args),
  AAVE_V3_ID: (...args: ExtractArgs<Contract['calls']['AAVE_V3_ID']>) => getRequest('AAVE_V3_ID', args),
  COMPOUND_V3_ID: (...args: ExtractArgs<Contract['calls']['COMPOUND_V3_ID']>) => getRequest('COMPOUND_V3_ID', args),
  EULER_ID: (...args: ExtractArgs<Contract['calls']['EULER_ID']>) => getRequest('EULER_ID', args),
  FLUID_ID: (...args: ExtractArgs<Contract['calls']['FLUID_ID']>) => getRequest('FLUID_ID', args),
  MOONWELL_ID: (...args: ExtractArgs<Contract['calls']['MOONWELL_ID']>) => getRequest('MOONWELL_ID', args),
  MORPHO_ID: (...args: ExtractArgs<Contract['calls']['MORPHO_ID']>) => getRequest('MORPHO_ID', args),
  UNISWAP_V2_ID: (...args: ExtractArgs<Contract['calls']['UNISWAP_V2_ID']>) => getRequest('UNISWAP_V2_ID', args),
  UNISWAP_V3_ID: (...args: ExtractArgs<Contract['calls']['UNISWAP_V3_ID']>) => getRequest('UNISWAP_V3_ID', args),
  AERODROME_ID: (...args: ExtractArgs<Contract['calls']['AERODROME_ID']>) => getRequest('AERODROME_ID', args),
  AERODROME_SLIPSTREAM_ID: (...args: ExtractArgs<Contract['calls']['AERODROME_SLIPSTREAM_ID']>) =>
    getRequest('AERODROME_SLIPSTREAM_ID', args),
  CURVE_ID: (...args: ExtractArgs<Contract['calls']['CURVE_ID']>) => getRequest('CURVE_ID', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'LegoTools' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'LegoTools'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  pause: getMutation('pause'),
  recoverFunds: getMutation('recoverFunds'),
  recoverFundsMany: getMutation('recoverFundsMany'),
  getRoutesAndSwapInstructionsAmountOut: getMutation('getRoutesAndSwapInstructionsAmountOut'),
  getRoutesAndSwapInstructionsAmountIn: getMutation('getRoutesAndSwapInstructionsAmountIn'),
  prepareSwapInstructionsAmountOut: getMutation('prepareSwapInstructionsAmountOut'),
  getBestSwapRoutesAmountOut: getMutation('getBestSwapRoutesAmountOut'),
  getBestSwapAmountOutWithRouterPool: getMutation('getBestSwapAmountOutWithRouterPool'),
  getBestSwapAmountOutSinglePool: getMutation('getBestSwapAmountOutSinglePool'),
  getSwapAmountOutViaRouterPool: getMutation('getSwapAmountOutViaRouterPool'),
  getBestSwapRoutesAmountIn: getMutation('getBestSwapRoutesAmountIn'),
  getBestSwapAmountInWithRouterPool: getMutation('getBestSwapAmountInWithRouterPool'),
  getBestSwapAmountInSinglePool: getMutation('getBestSwapAmountInSinglePool'),
  getSwapAmountInViaRouterPool: getMutation('getSwapAmountInViaRouterPool'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => Promise<CallReturn<'getAddys'>>
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => Promise<CallReturn<'getUndyHq'>>
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => Promise<CallReturn<'canMintUndy'>>
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => Promise<CallReturn<'isPaused'>>
  aaveV3: (...args: ExtractArgs<Contract['calls']['aaveV3']>) => Promise<CallReturn<'aaveV3'>>
  aaveV3Id: (...args: ExtractArgs<Contract['calls']['aaveV3Id']>) => Promise<CallReturn<'aaveV3Id'>>
  compoundV3: (...args: ExtractArgs<Contract['calls']['compoundV3']>) => Promise<CallReturn<'compoundV3'>>
  compoundV3Id: (...args: ExtractArgs<Contract['calls']['compoundV3Id']>) => Promise<CallReturn<'compoundV3Id'>>
  euler: (...args: ExtractArgs<Contract['calls']['euler']>) => Promise<CallReturn<'euler'>>
  eulerId: (...args: ExtractArgs<Contract['calls']['eulerId']>) => Promise<CallReturn<'eulerId'>>
  fluid: (...args: ExtractArgs<Contract['calls']['fluid']>) => Promise<CallReturn<'fluid'>>
  fluidId: (...args: ExtractArgs<Contract['calls']['fluidId']>) => Promise<CallReturn<'fluidId'>>
  moonwell: (...args: ExtractArgs<Contract['calls']['moonwell']>) => Promise<CallReturn<'moonwell'>>
  moonwellId: (...args: ExtractArgs<Contract['calls']['moonwellId']>) => Promise<CallReturn<'moonwellId'>>
  morpho: (...args: ExtractArgs<Contract['calls']['morpho']>) => Promise<CallReturn<'morpho'>>
  morphoId: (...args: ExtractArgs<Contract['calls']['morphoId']>) => Promise<CallReturn<'morphoId'>>
  uniswapV2: (...args: ExtractArgs<Contract['calls']['uniswapV2']>) => Promise<CallReturn<'uniswapV2'>>
  uniswapV2Id: (...args: ExtractArgs<Contract['calls']['uniswapV2Id']>) => Promise<CallReturn<'uniswapV2Id'>>
  uniswapV3: (...args: ExtractArgs<Contract['calls']['uniswapV3']>) => Promise<CallReturn<'uniswapV3'>>
  uniswapV3Id: (...args: ExtractArgs<Contract['calls']['uniswapV3Id']>) => Promise<CallReturn<'uniswapV3Id'>>
  aerodrome: (...args: ExtractArgs<Contract['calls']['aerodrome']>) => Promise<CallReturn<'aerodrome'>>
  aerodromeId: (...args: ExtractArgs<Contract['calls']['aerodromeId']>) => Promise<CallReturn<'aerodromeId'>>
  aerodromeSlipstream: (
    ...args: ExtractArgs<Contract['calls']['aerodromeSlipstream']>
  ) => Promise<CallReturn<'aerodromeSlipstream'>>
  aerodromeSlipstreamId: (
    ...args: ExtractArgs<Contract['calls']['aerodromeSlipstreamId']>
  ) => Promise<CallReturn<'aerodromeSlipstreamId'>>
  curve: (...args: ExtractArgs<Contract['calls']['curve']>) => Promise<CallReturn<'curve'>>
  curveId: (...args: ExtractArgs<Contract['calls']['curveId']>) => Promise<CallReturn<'curveId'>>
  getUnderlyingAsset: (
    ...args: ExtractArgs<Contract['calls']['getUnderlyingAsset']>
  ) => Promise<CallReturn<'getUnderlyingAsset'>>
  getUnderlyingForUser: (
    ...args: ExtractArgs<Contract['calls']['getUnderlyingForUser']>
  ) => Promise<CallReturn<'getUnderlyingForUser'>>
  getVaultTokensForUser: (
    ...args: ExtractArgs<Contract['calls']['getVaultTokensForUser']>
  ) => Promise<CallReturn<'getVaultTokensForUser'>>
  isVaultToken: (...args: ExtractArgs<Contract['calls']['isVaultToken']>) => Promise<CallReturn<'isVaultToken'>>
  getVaultTokenAmount: (
    ...args: ExtractArgs<Contract['calls']['getVaultTokenAmount']>
  ) => Promise<CallReturn<'getVaultTokenAmount'>>
  getLegoInfoFromVaultToken: (
    ...args: ExtractArgs<Contract['calls']['getLegoInfoFromVaultToken']>
  ) => Promise<CallReturn<'getLegoInfoFromVaultToken'>>
  getUnderlyingData: (
    ...args: ExtractArgs<Contract['calls']['getUnderlyingData']>
  ) => Promise<CallReturn<'getUnderlyingData'>>
  ROUTER_TOKENA: (...args: ExtractArgs<Contract['calls']['ROUTER_TOKENA']>) => Promise<CallReturn<'ROUTER_TOKENA'>>
  ROUTER_TOKENB: (...args: ExtractArgs<Contract['calls']['ROUTER_TOKENB']>) => Promise<CallReturn<'ROUTER_TOKENB'>>
  AAVE_V3_ID: (...args: ExtractArgs<Contract['calls']['AAVE_V3_ID']>) => Promise<CallReturn<'AAVE_V3_ID'>>
  COMPOUND_V3_ID: (...args: ExtractArgs<Contract['calls']['COMPOUND_V3_ID']>) => Promise<CallReturn<'COMPOUND_V3_ID'>>
  EULER_ID: (...args: ExtractArgs<Contract['calls']['EULER_ID']>) => Promise<CallReturn<'EULER_ID'>>
  FLUID_ID: (...args: ExtractArgs<Contract['calls']['FLUID_ID']>) => Promise<CallReturn<'FLUID_ID'>>
  MOONWELL_ID: (...args: ExtractArgs<Contract['calls']['MOONWELL_ID']>) => Promise<CallReturn<'MOONWELL_ID'>>
  MORPHO_ID: (...args: ExtractArgs<Contract['calls']['MORPHO_ID']>) => Promise<CallReturn<'MORPHO_ID'>>
  UNISWAP_V2_ID: (...args: ExtractArgs<Contract['calls']['UNISWAP_V2_ID']>) => Promise<CallReturn<'UNISWAP_V2_ID'>>
  UNISWAP_V3_ID: (...args: ExtractArgs<Contract['calls']['UNISWAP_V3_ID']>) => Promise<CallReturn<'UNISWAP_V3_ID'>>
  AERODROME_ID: (...args: ExtractArgs<Contract['calls']['AERODROME_ID']>) => Promise<CallReturn<'AERODROME_ID'>>
  AERODROME_SLIPSTREAM_ID: (
    ...args: ExtractArgs<Contract['calls']['AERODROME_SLIPSTREAM_ID']>
  ) => Promise<CallReturn<'AERODROME_SLIPSTREAM_ID'>>
  CURVE_ID: (...args: ExtractArgs<Contract['calls']['CURVE_ID']>) => Promise<CallReturn<'CURVE_ID'>>
  pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => Promise<Address>
  recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) => Promise<Address>
  recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) => Promise<Address>
  getRoutesAndSwapInstructionsAmountOut: (
    ...args: ExtractArgs<Contract['mutations']['getRoutesAndSwapInstructionsAmountOut']>
  ) => Promise<Address>
  getRoutesAndSwapInstructionsAmountIn: (
    ...args: ExtractArgs<Contract['mutations']['getRoutesAndSwapInstructionsAmountIn']>
  ) => Promise<Address>
  prepareSwapInstructionsAmountOut: (
    ...args: ExtractArgs<Contract['mutations']['prepareSwapInstructionsAmountOut']>
  ) => Promise<Address>
  getBestSwapRoutesAmountOut: (
    ...args: ExtractArgs<Contract['mutations']['getBestSwapRoutesAmountOut']>
  ) => Promise<Address>
  getBestSwapAmountOutWithRouterPool: (
    ...args: ExtractArgs<Contract['mutations']['getBestSwapAmountOutWithRouterPool']>
  ) => Promise<Address>
  getBestSwapAmountOutSinglePool: (
    ...args: ExtractArgs<Contract['mutations']['getBestSwapAmountOutSinglePool']>
  ) => Promise<Address>
  getSwapAmountOutViaRouterPool: (
    ...args: ExtractArgs<Contract['mutations']['getSwapAmountOutViaRouterPool']>
  ) => Promise<Address>
  getBestSwapRoutesAmountIn: (
    ...args: ExtractArgs<Contract['mutations']['getBestSwapRoutesAmountIn']>
  ) => Promise<Address>
  getBestSwapAmountInWithRouterPool: (
    ...args: ExtractArgs<Contract['mutations']['getBestSwapAmountInWithRouterPool']>
  ) => Promise<Address>
  getBestSwapAmountInSinglePool: (
    ...args: ExtractArgs<Contract['mutations']['getBestSwapAmountInSinglePool']>
  ) => Promise<Address>
  getSwapAmountInViaRouterPool: (
    ...args: ExtractArgs<Contract['mutations']['getSwapAmountInViaRouterPool']>
  ) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) =>
      singleQuery(publicClient!, call.getAddys(...args)) as Promise<CallReturn<'getAddys'>>,
    getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) =>
      singleQuery(publicClient!, call.getUndyHq(...args)) as Promise<CallReturn<'getUndyHq'>>,
    canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) =>
      singleQuery(publicClient!, call.canMintUndy(...args)) as Promise<CallReturn<'canMintUndy'>>,
    isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) =>
      singleQuery(publicClient!, call.isPaused(...args)) as Promise<CallReturn<'isPaused'>>,
    aaveV3: (...args: ExtractArgs<Contract['calls']['aaveV3']>) =>
      singleQuery(publicClient!, call.aaveV3(...args)) as Promise<CallReturn<'aaveV3'>>,
    aaveV3Id: (...args: ExtractArgs<Contract['calls']['aaveV3Id']>) =>
      singleQuery(publicClient!, call.aaveV3Id(...args)) as Promise<CallReturn<'aaveV3Id'>>,
    compoundV3: (...args: ExtractArgs<Contract['calls']['compoundV3']>) =>
      singleQuery(publicClient!, call.compoundV3(...args)) as Promise<CallReturn<'compoundV3'>>,
    compoundV3Id: (...args: ExtractArgs<Contract['calls']['compoundV3Id']>) =>
      singleQuery(publicClient!, call.compoundV3Id(...args)) as Promise<CallReturn<'compoundV3Id'>>,
    euler: (...args: ExtractArgs<Contract['calls']['euler']>) =>
      singleQuery(publicClient!, call.euler(...args)) as Promise<CallReturn<'euler'>>,
    eulerId: (...args: ExtractArgs<Contract['calls']['eulerId']>) =>
      singleQuery(publicClient!, call.eulerId(...args)) as Promise<CallReturn<'eulerId'>>,
    fluid: (...args: ExtractArgs<Contract['calls']['fluid']>) =>
      singleQuery(publicClient!, call.fluid(...args)) as Promise<CallReturn<'fluid'>>,
    fluidId: (...args: ExtractArgs<Contract['calls']['fluidId']>) =>
      singleQuery(publicClient!, call.fluidId(...args)) as Promise<CallReturn<'fluidId'>>,
    moonwell: (...args: ExtractArgs<Contract['calls']['moonwell']>) =>
      singleQuery(publicClient!, call.moonwell(...args)) as Promise<CallReturn<'moonwell'>>,
    moonwellId: (...args: ExtractArgs<Contract['calls']['moonwellId']>) =>
      singleQuery(publicClient!, call.moonwellId(...args)) as Promise<CallReturn<'moonwellId'>>,
    morpho: (...args: ExtractArgs<Contract['calls']['morpho']>) =>
      singleQuery(publicClient!, call.morpho(...args)) as Promise<CallReturn<'morpho'>>,
    morphoId: (...args: ExtractArgs<Contract['calls']['morphoId']>) =>
      singleQuery(publicClient!, call.morphoId(...args)) as Promise<CallReturn<'morphoId'>>,
    uniswapV2: (...args: ExtractArgs<Contract['calls']['uniswapV2']>) =>
      singleQuery(publicClient!, call.uniswapV2(...args)) as Promise<CallReturn<'uniswapV2'>>,
    uniswapV2Id: (...args: ExtractArgs<Contract['calls']['uniswapV2Id']>) =>
      singleQuery(publicClient!, call.uniswapV2Id(...args)) as Promise<CallReturn<'uniswapV2Id'>>,
    uniswapV3: (...args: ExtractArgs<Contract['calls']['uniswapV3']>) =>
      singleQuery(publicClient!, call.uniswapV3(...args)) as Promise<CallReturn<'uniswapV3'>>,
    uniswapV3Id: (...args: ExtractArgs<Contract['calls']['uniswapV3Id']>) =>
      singleQuery(publicClient!, call.uniswapV3Id(...args)) as Promise<CallReturn<'uniswapV3Id'>>,
    aerodrome: (...args: ExtractArgs<Contract['calls']['aerodrome']>) =>
      singleQuery(publicClient!, call.aerodrome(...args)) as Promise<CallReturn<'aerodrome'>>,
    aerodromeId: (...args: ExtractArgs<Contract['calls']['aerodromeId']>) =>
      singleQuery(publicClient!, call.aerodromeId(...args)) as Promise<CallReturn<'aerodromeId'>>,
    aerodromeSlipstream: (...args: ExtractArgs<Contract['calls']['aerodromeSlipstream']>) =>
      singleQuery(publicClient!, call.aerodromeSlipstream(...args)) as Promise<CallReturn<'aerodromeSlipstream'>>,
    aerodromeSlipstreamId: (...args: ExtractArgs<Contract['calls']['aerodromeSlipstreamId']>) =>
      singleQuery(publicClient!, call.aerodromeSlipstreamId(...args)) as Promise<CallReturn<'aerodromeSlipstreamId'>>,
    curve: (...args: ExtractArgs<Contract['calls']['curve']>) =>
      singleQuery(publicClient!, call.curve(...args)) as Promise<CallReturn<'curve'>>,
    curveId: (...args: ExtractArgs<Contract['calls']['curveId']>) =>
      singleQuery(publicClient!, call.curveId(...args)) as Promise<CallReturn<'curveId'>>,
    getUnderlyingAsset: (...args: ExtractArgs<Contract['calls']['getUnderlyingAsset']>) =>
      singleQuery(publicClient!, call.getUnderlyingAsset(...args)) as Promise<CallReturn<'getUnderlyingAsset'>>,
    getUnderlyingForUser: (...args: ExtractArgs<Contract['calls']['getUnderlyingForUser']>) =>
      singleQuery(publicClient!, call.getUnderlyingForUser(...args)) as Promise<CallReturn<'getUnderlyingForUser'>>,
    getVaultTokensForUser: (...args: ExtractArgs<Contract['calls']['getVaultTokensForUser']>) =>
      singleQuery(publicClient!, call.getVaultTokensForUser(...args)) as Promise<CallReturn<'getVaultTokensForUser'>>,
    isVaultToken: (...args: ExtractArgs<Contract['calls']['isVaultToken']>) =>
      singleQuery(publicClient!, call.isVaultToken(...args)) as Promise<CallReturn<'isVaultToken'>>,
    getVaultTokenAmount: (...args: ExtractArgs<Contract['calls']['getVaultTokenAmount']>) =>
      singleQuery(publicClient!, call.getVaultTokenAmount(...args)) as Promise<CallReturn<'getVaultTokenAmount'>>,
    getLegoInfoFromVaultToken: (...args: ExtractArgs<Contract['calls']['getLegoInfoFromVaultToken']>) =>
      singleQuery(publicClient!, call.getLegoInfoFromVaultToken(...args)) as Promise<
        CallReturn<'getLegoInfoFromVaultToken'>
      >,
    getUnderlyingData: (...args: ExtractArgs<Contract['calls']['getUnderlyingData']>) =>
      singleQuery(publicClient!, call.getUnderlyingData(...args)) as Promise<CallReturn<'getUnderlyingData'>>,
    ROUTER_TOKENA: (...args: ExtractArgs<Contract['calls']['ROUTER_TOKENA']>) =>
      singleQuery(publicClient!, call.ROUTER_TOKENA(...args)) as Promise<CallReturn<'ROUTER_TOKENA'>>,
    ROUTER_TOKENB: (...args: ExtractArgs<Contract['calls']['ROUTER_TOKENB']>) =>
      singleQuery(publicClient!, call.ROUTER_TOKENB(...args)) as Promise<CallReturn<'ROUTER_TOKENB'>>,
    AAVE_V3_ID: (...args: ExtractArgs<Contract['calls']['AAVE_V3_ID']>) =>
      singleQuery(publicClient!, call.AAVE_V3_ID(...args)) as Promise<CallReturn<'AAVE_V3_ID'>>,
    COMPOUND_V3_ID: (...args: ExtractArgs<Contract['calls']['COMPOUND_V3_ID']>) =>
      singleQuery(publicClient!, call.COMPOUND_V3_ID(...args)) as Promise<CallReturn<'COMPOUND_V3_ID'>>,
    EULER_ID: (...args: ExtractArgs<Contract['calls']['EULER_ID']>) =>
      singleQuery(publicClient!, call.EULER_ID(...args)) as Promise<CallReturn<'EULER_ID'>>,
    FLUID_ID: (...args: ExtractArgs<Contract['calls']['FLUID_ID']>) =>
      singleQuery(publicClient!, call.FLUID_ID(...args)) as Promise<CallReturn<'FLUID_ID'>>,
    MOONWELL_ID: (...args: ExtractArgs<Contract['calls']['MOONWELL_ID']>) =>
      singleQuery(publicClient!, call.MOONWELL_ID(...args)) as Promise<CallReturn<'MOONWELL_ID'>>,
    MORPHO_ID: (...args: ExtractArgs<Contract['calls']['MORPHO_ID']>) =>
      singleQuery(publicClient!, call.MORPHO_ID(...args)) as Promise<CallReturn<'MORPHO_ID'>>,
    UNISWAP_V2_ID: (...args: ExtractArgs<Contract['calls']['UNISWAP_V2_ID']>) =>
      singleQuery(publicClient!, call.UNISWAP_V2_ID(...args)) as Promise<CallReturn<'UNISWAP_V2_ID'>>,
    UNISWAP_V3_ID: (...args: ExtractArgs<Contract['calls']['UNISWAP_V3_ID']>) =>
      singleQuery(publicClient!, call.UNISWAP_V3_ID(...args)) as Promise<CallReturn<'UNISWAP_V3_ID'>>,
    AERODROME_ID: (...args: ExtractArgs<Contract['calls']['AERODROME_ID']>) =>
      singleQuery(publicClient!, call.AERODROME_ID(...args)) as Promise<CallReturn<'AERODROME_ID'>>,
    AERODROME_SLIPSTREAM_ID: (...args: ExtractArgs<Contract['calls']['AERODROME_SLIPSTREAM_ID']>) =>
      singleQuery(publicClient!, call.AERODROME_SLIPSTREAM_ID(...args)) as Promise<
        CallReturn<'AERODROME_SLIPSTREAM_ID'>
      >,
    CURVE_ID: (...args: ExtractArgs<Contract['calls']['CURVE_ID']>) =>
      singleQuery(publicClient!, call.CURVE_ID(...args)) as Promise<CallReturn<'CURVE_ID'>>,

    // Mutations
    pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => mutate(walletClient!, mutation.pause)(...args),
    recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) =>
      mutate(walletClient!, mutation.recoverFunds)(...args),
    recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) =>
      mutate(walletClient!, mutation.recoverFundsMany)(...args),
    getRoutesAndSwapInstructionsAmountOut: (
      ...args: ExtractArgs<Contract['mutations']['getRoutesAndSwapInstructionsAmountOut']>
    ) => mutate(walletClient!, mutation.getRoutesAndSwapInstructionsAmountOut)(...args),
    getRoutesAndSwapInstructionsAmountIn: (
      ...args: ExtractArgs<Contract['mutations']['getRoutesAndSwapInstructionsAmountIn']>
    ) => mutate(walletClient!, mutation.getRoutesAndSwapInstructionsAmountIn)(...args),
    prepareSwapInstructionsAmountOut: (
      ...args: ExtractArgs<Contract['mutations']['prepareSwapInstructionsAmountOut']>
    ) => mutate(walletClient!, mutation.prepareSwapInstructionsAmountOut)(...args),
    getBestSwapRoutesAmountOut: (...args: ExtractArgs<Contract['mutations']['getBestSwapRoutesAmountOut']>) =>
      mutate(walletClient!, mutation.getBestSwapRoutesAmountOut)(...args),
    getBestSwapAmountOutWithRouterPool: (
      ...args: ExtractArgs<Contract['mutations']['getBestSwapAmountOutWithRouterPool']>
    ) => mutate(walletClient!, mutation.getBestSwapAmountOutWithRouterPool)(...args),
    getBestSwapAmountOutSinglePool: (...args: ExtractArgs<Contract['mutations']['getBestSwapAmountOutSinglePool']>) =>
      mutate(walletClient!, mutation.getBestSwapAmountOutSinglePool)(...args),
    getSwapAmountOutViaRouterPool: (...args: ExtractArgs<Contract['mutations']['getSwapAmountOutViaRouterPool']>) =>
      mutate(walletClient!, mutation.getSwapAmountOutViaRouterPool)(...args),
    getBestSwapRoutesAmountIn: (...args: ExtractArgs<Contract['mutations']['getBestSwapRoutesAmountIn']>) =>
      mutate(walletClient!, mutation.getBestSwapRoutesAmountIn)(...args),
    getBestSwapAmountInWithRouterPool: (
      ...args: ExtractArgs<Contract['mutations']['getBestSwapAmountInWithRouterPool']>
    ) => mutate(walletClient!, mutation.getBestSwapAmountInWithRouterPool)(...args),
    getBestSwapAmountInSinglePool: (...args: ExtractArgs<Contract['mutations']['getBestSwapAmountInSinglePool']>) =>
      mutate(walletClient!, mutation.getBestSwapAmountInSinglePool)(...args),
    getSwapAmountInViaRouterPool: (...args: ExtractArgs<Contract['mutations']['getSwapAmountInViaRouterPool']>) =>
      mutate(walletClient!, mutation.getSwapAmountInViaRouterPool)(...args),
  }
}
