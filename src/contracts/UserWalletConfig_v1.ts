/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'agent',
        type: 'address',
      },
      {
        indexed: false,
        name: 'allowedAssets',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'allowedLegoIds',
        type: 'uint256',
      },
    ],
    name: 'AgentAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'agent',
        type: 'address',
      },
      {
        indexed: false,
        name: 'allowedAssets',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'allowedLegoIds',
        type: 'uint256',
      },
    ],
    name: 'AgentModified',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'agent',
        type: 'address',
      },
      {
        indexed: false,
        name: 'prevAllowedAssets',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'prevAllowedLegoIds',
        type: 'uint256',
      },
    ],
    name: 'AgentDisabled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'agent',
        type: 'address',
      },
      {
        indexed: true,
        name: 'legoId',
        type: 'uint256',
      },
    ],
    name: 'LegoIdAddedToAgent',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'agent',
        type: 'address',
      },
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
    ],
    name: 'AssetAddedToAgent',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'agent',
        type: 'address',
      },
      {
        indexed: false,
        name: 'canDeposit',
        type: 'bool',
      },
      {
        indexed: false,
        name: 'canWithdraw',
        type: 'bool',
      },
      {
        indexed: false,
        name: 'canRebalance',
        type: 'bool',
      },
      {
        indexed: false,
        name: 'canTransfer',
        type: 'bool',
      },
      {
        indexed: false,
        name: 'canSwap',
        type: 'bool',
      },
      {
        indexed: false,
        name: 'canConvert',
        type: 'bool',
      },
      {
        indexed: false,
        name: 'canAddLiq',
        type: 'bool',
      },
      {
        indexed: false,
        name: 'canRemoveLiq',
        type: 'bool',
      },
      {
        indexed: false,
        name: 'canClaimRewards',
        type: 'bool',
      },
      {
        indexed: false,
        name: 'canBorrow',
        type: 'bool',
      },
      {
        indexed: false,
        name: 'canRepay',
        type: 'bool',
      },
    ],
    name: 'AllowedActionsModified',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'WhitelistAddrPending',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'WhitelistAddrConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'WhitelistAddrCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'WhitelistAddrRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: false,
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'ReserveAssetSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevOwner',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newOwner',
        type: 'address',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'OwnershipChangeInitiated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevOwner',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newOwner',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'OwnershipChangeConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'cancelledOwner',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'OwnershipChangeCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'delayBlocks',
        type: 'uint256',
      },
    ],
    name: 'OwnershipChangeDelaySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: true,
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: false,
        name: 'balance',
        type: 'uint256',
      },
    ],
    name: 'FundsRecovered',
    type: 'event',
  },
  {
    inputs: [
      {
        name: '_wallet',
        type: 'address',
      },
      {
        name: '_addyRegistry',
        type: 'address',
      },
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_initialAgent',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'apiVersion',
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
    ],
    name: 'isAgentActive',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
      {
        name: '_action',
        type: 'uint256',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
      {
        name: '_legoIds',
        type: 'uint256[]',
      },
    ],
    name: 'canAgentAccess',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
    ],
    name: 'getAgentSubscriptionStatus',
    outputs: [
      {
        components: [
          {
            name: 'recipient',
            type: 'address',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'usdValue',
            type: 'uint256',
          },
          {
            name: 'paidThroughBlock',
            type: 'uint256',
          },
          {
            name: 'didChange',
            type: 'bool',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getProtocolSubscriptionStatus',
    outputs: [
      {
        components: [
          {
            name: 'recipient',
            type: 'address',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'usdValue',
            type: 'uint256',
          },
          {
            name: 'paidThroughBlock',
            type: 'uint256',
          },
          {
            name: 'didChange',
            type: 'bool',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
    ],
    name: 'canMakeSubscriptionPayments',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
      {
        name: '_action',
        type: 'uint256',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
      {
        name: '_legoIds',
        type: 'uint256[]',
      },
      {
        components: [
          {
            name: 'owner',
            type: 'address',
          },
          {
            name: 'wallet',
            type: 'address',
          },
          {
            name: 'walletConfig',
            type: 'address',
          },
          {
            name: 'addyRegistry',
            type: 'address',
          },
          {
            name: 'legoRegistry',
            type: 'address',
          },
          {
            name: 'priceSheets',
            type: 'address',
          },
          {
            name: 'oracleRegistry',
            type: 'address',
          },
          {
            name: 'trialFundsAsset',
            type: 'address',
          },
          {
            name: 'trialFundsInitialAmount',
            type: 'uint256',
          },
        ],
        name: '_cd',
        type: 'tuple',
      },
    ],
    name: 'handleSubscriptionsAndPermissions',
    outputs: [
      {
        components: [
          {
            name: 'recipient',
            type: 'address',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'usdValue',
            type: 'uint256',
          },
          {
            name: 'paidThroughBlock',
            type: 'uint256',
          },
          {
            name: 'didChange',
            type: 'bool',
          },
        ],
        name: '',
        type: 'tuple',
      },
      {
        components: [
          {
            name: 'recipient',
            type: 'address',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'usdValue',
            type: 'uint256',
          },
          {
            name: 'paidThroughBlock',
            type: 'uint256',
          },
          {
            name: 'didChange',
            type: 'bool',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_wantedAmount',
        type: 'uint256',
      },
      {
        name: '_shouldCheckTrialFunds',
        type: 'bool',
      },
    ],
    name: 'getAvailableTxAmount',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_wantedAmount',
        type: 'uint256',
      },
      {
        name: '_shouldCheckTrialFunds',
        type: 'bool',
      },
      {
        components: [
          {
            name: 'owner',
            type: 'address',
          },
          {
            name: 'wallet',
            type: 'address',
          },
          {
            name: 'walletConfig',
            type: 'address',
          },
          {
            name: 'addyRegistry',
            type: 'address',
          },
          {
            name: 'legoRegistry',
            type: 'address',
          },
          {
            name: 'priceSheets',
            type: 'address',
          },
          {
            name: 'oracleRegistry',
            type: 'address',
          },
          {
            name: 'trialFundsAsset',
            type: 'address',
          },
          {
            name: 'trialFundsInitialAmount',
            type: 'uint256',
          },
        ],
        name: '_cd',
        type: 'tuple',
      },
    ],
    name: 'getAvailableTxAmount',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
    ],
    name: 'addOrModifyAgent',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
    ],
    name: 'addOrModifyAgent',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
      {
        name: '_allowedLegoIds',
        type: 'uint256[]',
      },
    ],
    name: 'addOrModifyAgent',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
      {
        name: '_allowedLegoIds',
        type: 'uint256[]',
      },
      {
        components: [
          {
            name: 'isSet',
            type: 'bool',
          },
          {
            name: 'canDeposit',
            type: 'bool',
          },
          {
            name: 'canWithdraw',
            type: 'bool',
          },
          {
            name: 'canRebalance',
            type: 'bool',
          },
          {
            name: 'canTransfer',
            type: 'bool',
          },
          {
            name: 'canSwap',
            type: 'bool',
          },
          {
            name: 'canConvert',
            type: 'bool',
          },
          {
            name: 'canAddLiq',
            type: 'bool',
          },
          {
            name: 'canRemoveLiq',
            type: 'bool',
          },
          {
            name: 'canClaimRewards',
            type: 'bool',
          },
          {
            name: 'canBorrow',
            type: 'bool',
          },
          {
            name: 'canRepay',
            type: 'bool',
          },
        ],
        name: '_allowedActions',
        type: 'tuple',
      },
    ],
    name: 'addOrModifyAgent',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
    ],
    name: 'disableAgent',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    name: 'addLegoIdForAgent',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    name: 'addAssetForAgent',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
    ],
    name: 'modifyAllowedActions',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agent',
        type: 'address',
      },
      {
        components: [
          {
            name: 'isSet',
            type: 'bool',
          },
          {
            name: 'canDeposit',
            type: 'bool',
          },
          {
            name: 'canWithdraw',
            type: 'bool',
          },
          {
            name: 'canRebalance',
            type: 'bool',
          },
          {
            name: 'canTransfer',
            type: 'bool',
          },
          {
            name: 'canSwap',
            type: 'bool',
          },
          {
            name: 'canConvert',
            type: 'bool',
          },
          {
            name: 'canAddLiq',
            type: 'bool',
          },
          {
            name: 'canRemoveLiq',
            type: 'bool',
          },
          {
            name: 'canClaimRewards',
            type: 'bool',
          },
          {
            name: 'canBorrow',
            type: 'bool',
          },
          {
            name: 'canRepay',
            type: 'bool',
          },
        ],
        name: '_allowedActions',
        type: 'tuple',
      },
    ],
    name: 'modifyAllowedActions',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    name: 'canTransferToRecipient',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'addWhitelistAddr',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'confirmWhitelistAddr',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'cancelPendingWhitelistAddr',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'removeWhitelistAddr',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'setReserveAsset',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
        ],
        name: '_assets',
        type: 'tuple[]',
      },
    ],
    name: 'setManyReserveAssets',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasPendingOwnerChange',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newOwner',
        type: 'address',
      },
    ],
    name: 'changeOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmOwnershipChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelOwnershipChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    name: 'setOwnershipChangeDelay',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    name: 'recoverFunds',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'wallet',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [
      {
        components: [
          {
            name: 'newOwner',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ownershipChangeDelay',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'protocolSub',
    outputs: [
      {
        components: [
          {
            name: 'installBlock',
            type: 'uint256',
          },
          {
            name: 'paidThroughBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'reserveAssets',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'agentSettings',
    outputs: [
      {
        components: [
          {
            name: 'isActive',
            type: 'bool',
          },
          {
            name: 'installBlock',
            type: 'uint256',
          },
          {
            name: 'paidThroughBlock',
            type: 'uint256',
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
          {
            name: 'allowedLegoIds',
            type: 'uint256[]',
          },
          {
            components: [
              {
                name: 'isSet',
                type: 'bool',
              },
              {
                name: 'canDeposit',
                type: 'bool',
              },
              {
                name: 'canWithdraw',
                type: 'bool',
              },
              {
                name: 'canRebalance',
                type: 'bool',
              },
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canSwap',
                type: 'bool',
              },
              {
                name: 'canConvert',
                type: 'bool',
              },
              {
                name: 'canAddLiq',
                type: 'bool',
              },
              {
                name: 'canRemoveLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'canBorrow',
                type: 'bool',
              },
              {
                name: 'canRepay',
                type: 'bool',
              },
            ],
            name: 'allowedActions',
            type: 'tuple',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'isRecipientAllowed',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'pendingWhitelist',
    outputs: [
      {
        components: [
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'addyRegistry',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'initialized',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MIN_OWNER_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_OWNER_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_minOwnerChangeDelay',
        type: 'uint256',
      },
      {
        name: '_maxOwnerChangeDelay',
        type: 'uint256',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
] as const

export const deployAddress: Address | undefined = '0x45D1a9429Fd603c13Cdab685dc2540f4F57Df464'

export type Contract = {
  calls: {
    apiVersion: () => Promise<string>
    isAgentActive: (agent: `0x${string}`) => Promise<boolean>
    canAgentAccess: (
      agent: `0x${string}`,
      action: bigint,
      assets: `0x${string}`[],
      legoIds: bigint[],
    ) => Promise<boolean>
    getAgentSubscriptionStatus: (
      agent: `0x${string}`,
    ) => Promise<{
      recipient: `0x${string}`
      asset: `0x${string}`
      amount: bigint
      usdValue: bigint
      paidThroughBlock: bigint
      didChange: boolean
    }>
    getProtocolSubscriptionStatus: () => Promise<{
      recipient: `0x${string}`
      asset: `0x${string}`
      amount: bigint
      usdValue: bigint
      paidThroughBlock: bigint
      didChange: boolean
    }>
    canMakeSubscriptionPayments: (agent: `0x${string}`) => Promise<[boolean, boolean]>
    getAvailableTxAmount: (
      asset: `0x${string}`,
      wantedAmount: bigint,
      shouldCheckTrialFunds: boolean,
      cd?: {
        owner: `0x${string}`
        wallet: `0x${string}`
        walletConfig: `0x${string}`
        addyRegistry: `0x${string}`
        legoRegistry: `0x${string}`
        priceSheets: `0x${string}`
        oracleRegistry: `0x${string}`
        trialFundsAsset: `0x${string}`
        trialFundsInitialAmount: bigint
      },
    ) => Promise<bigint>
    canTransferToRecipient: (recipient: `0x${string}`) => Promise<boolean>
    hasPendingOwnerChange: () => Promise<boolean>
    wallet: () => Promise<`0x${string}`>
    owner: () => Promise<`0x${string}`>
    pendingOwner: () => Promise<{ newOwner: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    ownershipChangeDelay: () => Promise<bigint>
    protocolSub: () => Promise<{ installBlock: bigint; paidThroughBlock: bigint }>
    reserveAssets: (arg0: `0x${string}`) => Promise<bigint>
    agentSettings: (
      arg0: `0x${string}`,
    ) => Promise<{
      isActive: boolean
      installBlock: bigint
      paidThroughBlock: bigint
      allowedAssets: `0x${string}`[]
      allowedLegoIds: bigint[]
      allowedActions: {
        isSet: boolean
        canDeposit: boolean
        canWithdraw: boolean
        canRebalance: boolean
        canTransfer: boolean
        canSwap: boolean
        canConvert: boolean
        canAddLiq: boolean
        canRemoveLiq: boolean
        canClaimRewards: boolean
        canBorrow: boolean
        canRepay: boolean
      }
    }>
    isRecipientAllowed: (arg0: `0x${string}`) => Promise<boolean>
    pendingWhitelist: (arg0: `0x${string}`) => Promise<{ initiatedBlock: bigint; confirmBlock: bigint }>
    addyRegistry: () => Promise<`0x${string}`>
    initialized: () => Promise<boolean>
    MIN_OWNER_CHANGE_DELAY: () => Promise<bigint>
    MAX_OWNER_CHANGE_DELAY: () => Promise<bigint>
  }
  mutations: {
    initialize: (
      wallet: `0x${string}`,
      addyRegistry: `0x${string}`,
      owner: `0x${string}`,
      initialAgent: `0x${string}`,
    ) => Promise<boolean>
    handleSubscriptionsAndPermissions: (
      agent: `0x${string}`,
      action: bigint,
      assets: `0x${string}`[],
      legoIds: bigint[],
      cd: {
        owner: `0x${string}`
        wallet: `0x${string}`
        walletConfig: `0x${string}`
        addyRegistry: `0x${string}`
        legoRegistry: `0x${string}`
        priceSheets: `0x${string}`
        oracleRegistry: `0x${string}`
        trialFundsAsset: `0x${string}`
        trialFundsInitialAmount: bigint
      },
    ) => Promise<
      [
        {
          recipient: `0x${string}`
          asset: `0x${string}`
          amount: bigint
          usdValue: bigint
          paidThroughBlock: bigint
          didChange: boolean
        },
        {
          recipient: `0x${string}`
          asset: `0x${string}`
          amount: bigint
          usdValue: bigint
          paidThroughBlock: bigint
          didChange: boolean
        },
      ]
    >
    addOrModifyAgent: (
      agent: `0x${string}`,
      allowedAssets?: `0x${string}`[],
      allowedLegoIds?: bigint[],
      allowedActions?: {
        isSet: boolean
        canDeposit: boolean
        canWithdraw: boolean
        canRebalance: boolean
        canTransfer: boolean
        canSwap: boolean
        canConvert: boolean
        canAddLiq: boolean
        canRemoveLiq: boolean
        canClaimRewards: boolean
        canBorrow: boolean
        canRepay: boolean
      },
    ) => Promise<boolean>
    disableAgent: (agent: `0x${string}`) => Promise<boolean>
    addLegoIdForAgent: (agent: `0x${string}`, legoId: bigint) => Promise<boolean>
    addAssetForAgent: (agent: `0x${string}`, asset: `0x${string}`) => Promise<boolean>
    modifyAllowedActions: (
      agent: `0x${string}`,
      allowedActions?: {
        isSet: boolean
        canDeposit: boolean
        canWithdraw: boolean
        canRebalance: boolean
        canTransfer: boolean
        canSwap: boolean
        canConvert: boolean
        canAddLiq: boolean
        canRemoveLiq: boolean
        canClaimRewards: boolean
        canBorrow: boolean
        canRepay: boolean
      },
    ) => Promise<boolean>
    addWhitelistAddr: (addr: `0x${string}`) => Promise<void>
    confirmWhitelistAddr: (addr: `0x${string}`) => Promise<void>
    cancelPendingWhitelistAddr: (addr: `0x${string}`) => Promise<void>
    removeWhitelistAddr: (addr: `0x${string}`) => Promise<void>
    setReserveAsset: (asset: `0x${string}`, amount: bigint) => Promise<boolean>
    setManyReserveAssets: (assets: { asset: `0x${string}`; amount: bigint }[]) => Promise<boolean>
    changeOwnership: (newOwner: `0x${string}`) => Promise<void>
    confirmOwnershipChange: () => Promise<void>
    cancelOwnershipChange: () => Promise<void>
    setOwnershipChangeDelay: (numBlocks: bigint) => Promise<void>
    recoverFunds: (asset: `0x${string}`) => Promise<boolean>
  }
  events: {
    AgentAdded: (agent: `0x${string}`, allowedAssets: bigint, allowedLegoIds: bigint) => Promise<void>
    AgentModified: (agent: `0x${string}`, allowedAssets: bigint, allowedLegoIds: bigint) => Promise<void>
    AgentDisabled: (agent: `0x${string}`, prevAllowedAssets: bigint, prevAllowedLegoIds: bigint) => Promise<void>
    LegoIdAddedToAgent: (agent: `0x${string}`, legoId: bigint) => Promise<void>
    AssetAddedToAgent: (agent: `0x${string}`, asset: `0x${string}`) => Promise<void>
    AllowedActionsModified: (
      agent: `0x${string}`,
      canDeposit: boolean,
      canWithdraw: boolean,
      canRebalance: boolean,
      canTransfer: boolean,
      canSwap: boolean,
      canConvert: boolean,
      canAddLiq: boolean,
      canRemoveLiq: boolean,
      canClaimRewards: boolean,
      canBorrow: boolean,
      canRepay: boolean,
    ) => Promise<void>
    WhitelistAddrPending: (addr: `0x${string}`, confirmBlock: bigint) => Promise<void>
    WhitelistAddrConfirmed: (addr: `0x${string}`, initiatedBlock: bigint, confirmBlock: bigint) => Promise<void>
    WhitelistAddrCancelled: (addr: `0x${string}`, initiatedBlock: bigint, confirmBlock: bigint) => Promise<void>
    WhitelistAddrRemoved: (addr: `0x${string}`) => Promise<void>
    ReserveAssetSet: (asset: `0x${string}`, amount: bigint) => Promise<void>
    OwnershipChangeInitiated: (prevOwner: `0x${string}`, newOwner: `0x${string}`, confirmBlock: bigint) => Promise<void>
    OwnershipChangeConfirmed: (
      prevOwner: `0x${string}`,
      newOwner: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    OwnershipChangeCancelled: (
      cancelledOwner: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    OwnershipChangeDelaySet: (delayBlocks: bigint) => Promise<void>
    FundsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, balance: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'UserWalletConfig_v1'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'UserWalletConfig_v1' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) => getRequest('apiVersion', args),
  isAgentActive: (...args: ExtractArgs<Contract['calls']['isAgentActive']>) => getRequest('isAgentActive', args),
  canAgentAccess: (...args: ExtractArgs<Contract['calls']['canAgentAccess']>) => getRequest('canAgentAccess', args),
  getAgentSubscriptionStatus: (...args: ExtractArgs<Contract['calls']['getAgentSubscriptionStatus']>) =>
    getRequest('getAgentSubscriptionStatus', args),
  getProtocolSubscriptionStatus: (...args: ExtractArgs<Contract['calls']['getProtocolSubscriptionStatus']>) =>
    getRequest('getProtocolSubscriptionStatus', args),
  canMakeSubscriptionPayments: (...args: ExtractArgs<Contract['calls']['canMakeSubscriptionPayments']>) =>
    getRequest('canMakeSubscriptionPayments', args),
  getAvailableTxAmount: (...args: ExtractArgs<Contract['calls']['getAvailableTxAmount']>) =>
    getRequest('getAvailableTxAmount', args),
  canTransferToRecipient: (...args: ExtractArgs<Contract['calls']['canTransferToRecipient']>) =>
    getRequest('canTransferToRecipient', args),
  hasPendingOwnerChange: (...args: ExtractArgs<Contract['calls']['hasPendingOwnerChange']>) =>
    getRequest('hasPendingOwnerChange', args),
  wallet: (...args: ExtractArgs<Contract['calls']['wallet']>) => getRequest('wallet', args),
  owner: (...args: ExtractArgs<Contract['calls']['owner']>) => getRequest('owner', args),
  pendingOwner: (...args: ExtractArgs<Contract['calls']['pendingOwner']>) => getRequest('pendingOwner', args),
  ownershipChangeDelay: (...args: ExtractArgs<Contract['calls']['ownershipChangeDelay']>) =>
    getRequest('ownershipChangeDelay', args),
  protocolSub: (...args: ExtractArgs<Contract['calls']['protocolSub']>) => getRequest('protocolSub', args),
  reserveAssets: (...args: ExtractArgs<Contract['calls']['reserveAssets']>) => getRequest('reserveAssets', args),
  agentSettings: (...args: ExtractArgs<Contract['calls']['agentSettings']>) => getRequest('agentSettings', args),
  isRecipientAllowed: (...args: ExtractArgs<Contract['calls']['isRecipientAllowed']>) =>
    getRequest('isRecipientAllowed', args),
  pendingWhitelist: (...args: ExtractArgs<Contract['calls']['pendingWhitelist']>) =>
    getRequest('pendingWhitelist', args),
  addyRegistry: (...args: ExtractArgs<Contract['calls']['addyRegistry']>) => getRequest('addyRegistry', args),
  initialized: (...args: ExtractArgs<Contract['calls']['initialized']>) => getRequest('initialized', args),
  MIN_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>) =>
    getRequest('MIN_OWNER_CHANGE_DELAY', args),
  MAX_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>) =>
    getRequest('MAX_OWNER_CHANGE_DELAY', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'UserWalletConfig_v1' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'UserWalletConfig_v1'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  initialize: getMutation('initialize'),
  handleSubscriptionsAndPermissions: getMutation('handleSubscriptionsAndPermissions'),
  addOrModifyAgent: getMutation('addOrModifyAgent'),
  disableAgent: getMutation('disableAgent'),
  addLegoIdForAgent: getMutation('addLegoIdForAgent'),
  addAssetForAgent: getMutation('addAssetForAgent'),
  modifyAllowedActions: getMutation('modifyAllowedActions'),
  addWhitelistAddr: getMutation('addWhitelistAddr'),
  confirmWhitelistAddr: getMutation('confirmWhitelistAddr'),
  cancelPendingWhitelistAddr: getMutation('cancelPendingWhitelistAddr'),
  removeWhitelistAddr: getMutation('removeWhitelistAddr'),
  setReserveAsset: getMutation('setReserveAsset'),
  setManyReserveAssets: getMutation('setManyReserveAssets'),
  changeOwnership: getMutation('changeOwnership'),
  confirmOwnershipChange: getMutation('confirmOwnershipChange'),
  cancelOwnershipChange: getMutation('cancelOwnershipChange'),
  setOwnershipChangeDelay: getMutation('setOwnershipChangeDelay'),
  recoverFunds: getMutation('recoverFunds'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) => Promise<CallReturn<'apiVersion'>>
  isAgentActive: (...args: ExtractArgs<Contract['calls']['isAgentActive']>) => Promise<CallReturn<'isAgentActive'>>
  canAgentAccess: (...args: ExtractArgs<Contract['calls']['canAgentAccess']>) => Promise<CallReturn<'canAgentAccess'>>
  getAgentSubscriptionStatus: (
    ...args: ExtractArgs<Contract['calls']['getAgentSubscriptionStatus']>
  ) => Promise<CallReturn<'getAgentSubscriptionStatus'>>
  getProtocolSubscriptionStatus: (
    ...args: ExtractArgs<Contract['calls']['getProtocolSubscriptionStatus']>
  ) => Promise<CallReturn<'getProtocolSubscriptionStatus'>>
  canMakeSubscriptionPayments: (
    ...args: ExtractArgs<Contract['calls']['canMakeSubscriptionPayments']>
  ) => Promise<CallReturn<'canMakeSubscriptionPayments'>>
  getAvailableTxAmount: (
    ...args: ExtractArgs<Contract['calls']['getAvailableTxAmount']>
  ) => Promise<CallReturn<'getAvailableTxAmount'>>
  canTransferToRecipient: (
    ...args: ExtractArgs<Contract['calls']['canTransferToRecipient']>
  ) => Promise<CallReturn<'canTransferToRecipient'>>
  hasPendingOwnerChange: (
    ...args: ExtractArgs<Contract['calls']['hasPendingOwnerChange']>
  ) => Promise<CallReturn<'hasPendingOwnerChange'>>
  wallet: (...args: ExtractArgs<Contract['calls']['wallet']>) => Promise<CallReturn<'wallet'>>
  owner: (...args: ExtractArgs<Contract['calls']['owner']>) => Promise<CallReturn<'owner'>>
  pendingOwner: (...args: ExtractArgs<Contract['calls']['pendingOwner']>) => Promise<CallReturn<'pendingOwner'>>
  ownershipChangeDelay: (
    ...args: ExtractArgs<Contract['calls']['ownershipChangeDelay']>
  ) => Promise<CallReturn<'ownershipChangeDelay'>>
  protocolSub: (...args: ExtractArgs<Contract['calls']['protocolSub']>) => Promise<CallReturn<'protocolSub'>>
  reserveAssets: (...args: ExtractArgs<Contract['calls']['reserveAssets']>) => Promise<CallReturn<'reserveAssets'>>
  agentSettings: (...args: ExtractArgs<Contract['calls']['agentSettings']>) => Promise<CallReturn<'agentSettings'>>
  isRecipientAllowed: (
    ...args: ExtractArgs<Contract['calls']['isRecipientAllowed']>
  ) => Promise<CallReturn<'isRecipientAllowed'>>
  pendingWhitelist: (
    ...args: ExtractArgs<Contract['calls']['pendingWhitelist']>
  ) => Promise<CallReturn<'pendingWhitelist'>>
  addyRegistry: (...args: ExtractArgs<Contract['calls']['addyRegistry']>) => Promise<CallReturn<'addyRegistry'>>
  initialized: (...args: ExtractArgs<Contract['calls']['initialized']>) => Promise<CallReturn<'initialized'>>
  MIN_OWNER_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MIN_OWNER_CHANGE_DELAY'>>
  MAX_OWNER_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MAX_OWNER_CHANGE_DELAY'>>
  initialize: (...args: ExtractArgs<Contract['mutations']['initialize']>) => Promise<Address>
  handleSubscriptionsAndPermissions: (
    ...args: ExtractArgs<Contract['mutations']['handleSubscriptionsAndPermissions']>
  ) => Promise<Address>
  addOrModifyAgent: (...args: ExtractArgs<Contract['mutations']['addOrModifyAgent']>) => Promise<Address>
  disableAgent: (...args: ExtractArgs<Contract['mutations']['disableAgent']>) => Promise<Address>
  addLegoIdForAgent: (...args: ExtractArgs<Contract['mutations']['addLegoIdForAgent']>) => Promise<Address>
  addAssetForAgent: (...args: ExtractArgs<Contract['mutations']['addAssetForAgent']>) => Promise<Address>
  modifyAllowedActions: (...args: ExtractArgs<Contract['mutations']['modifyAllowedActions']>) => Promise<Address>
  addWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['addWhitelistAddr']>) => Promise<Address>
  confirmWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['confirmWhitelistAddr']>) => Promise<Address>
  cancelPendingWhitelistAddr: (
    ...args: ExtractArgs<Contract['mutations']['cancelPendingWhitelistAddr']>
  ) => Promise<Address>
  removeWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['removeWhitelistAddr']>) => Promise<Address>
  setReserveAsset: (...args: ExtractArgs<Contract['mutations']['setReserveAsset']>) => Promise<Address>
  setManyReserveAssets: (...args: ExtractArgs<Contract['mutations']['setManyReserveAssets']>) => Promise<Address>
  changeOwnership: (...args: ExtractArgs<Contract['mutations']['changeOwnership']>) => Promise<Address>
  confirmOwnershipChange: (...args: ExtractArgs<Contract['mutations']['confirmOwnershipChange']>) => Promise<Address>
  cancelOwnershipChange: (...args: ExtractArgs<Contract['mutations']['cancelOwnershipChange']>) => Promise<Address>
  setOwnershipChangeDelay: (...args: ExtractArgs<Contract['mutations']['setOwnershipChangeDelay']>) => Promise<Address>
  recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) => Promise<Address>
}

export function toSdk(deployAddress: Address, publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    apiVersion: (...args: ExtractArgs<Contract['calls']['apiVersion']>) =>
      singleQuery(publicClient!, call.apiVersion(...args).at(deployAddress)) as Promise<CallReturn<'apiVersion'>>,
    isAgentActive: (...args: ExtractArgs<Contract['calls']['isAgentActive']>) =>
      singleQuery(publicClient!, call.isAgentActive(...args).at(deployAddress)) as Promise<CallReturn<'isAgentActive'>>,
    canAgentAccess: (...args: ExtractArgs<Contract['calls']['canAgentAccess']>) =>
      singleQuery(publicClient!, call.canAgentAccess(...args).at(deployAddress)) as Promise<
        CallReturn<'canAgentAccess'>
      >,
    getAgentSubscriptionStatus: (...args: ExtractArgs<Contract['calls']['getAgentSubscriptionStatus']>) =>
      singleQuery(publicClient!, call.getAgentSubscriptionStatus(...args).at(deployAddress)) as Promise<
        CallReturn<'getAgentSubscriptionStatus'>
      >,
    getProtocolSubscriptionStatus: (...args: ExtractArgs<Contract['calls']['getProtocolSubscriptionStatus']>) =>
      singleQuery(publicClient!, call.getProtocolSubscriptionStatus(...args).at(deployAddress)) as Promise<
        CallReturn<'getProtocolSubscriptionStatus'>
      >,
    canMakeSubscriptionPayments: (...args: ExtractArgs<Contract['calls']['canMakeSubscriptionPayments']>) =>
      singleQuery(publicClient!, call.canMakeSubscriptionPayments(...args).at(deployAddress)) as Promise<
        CallReturn<'canMakeSubscriptionPayments'>
      >,
    getAvailableTxAmount: (...args: ExtractArgs<Contract['calls']['getAvailableTxAmount']>) =>
      singleQuery(publicClient!, call.getAvailableTxAmount(...args).at(deployAddress)) as Promise<
        CallReturn<'getAvailableTxAmount'>
      >,
    canTransferToRecipient: (...args: ExtractArgs<Contract['calls']['canTransferToRecipient']>) =>
      singleQuery(publicClient!, call.canTransferToRecipient(...args).at(deployAddress)) as Promise<
        CallReturn<'canTransferToRecipient'>
      >,
    hasPendingOwnerChange: (...args: ExtractArgs<Contract['calls']['hasPendingOwnerChange']>) =>
      singleQuery(publicClient!, call.hasPendingOwnerChange(...args).at(deployAddress)) as Promise<
        CallReturn<'hasPendingOwnerChange'>
      >,
    wallet: (...args: ExtractArgs<Contract['calls']['wallet']>) =>
      singleQuery(publicClient!, call.wallet(...args).at(deployAddress)) as Promise<CallReturn<'wallet'>>,
    owner: (...args: ExtractArgs<Contract['calls']['owner']>) =>
      singleQuery(publicClient!, call.owner(...args).at(deployAddress)) as Promise<CallReturn<'owner'>>,
    pendingOwner: (...args: ExtractArgs<Contract['calls']['pendingOwner']>) =>
      singleQuery(publicClient!, call.pendingOwner(...args).at(deployAddress)) as Promise<CallReturn<'pendingOwner'>>,
    ownershipChangeDelay: (...args: ExtractArgs<Contract['calls']['ownershipChangeDelay']>) =>
      singleQuery(publicClient!, call.ownershipChangeDelay(...args).at(deployAddress)) as Promise<
        CallReturn<'ownershipChangeDelay'>
      >,
    protocolSub: (...args: ExtractArgs<Contract['calls']['protocolSub']>) =>
      singleQuery(publicClient!, call.protocolSub(...args).at(deployAddress)) as Promise<CallReturn<'protocolSub'>>,
    reserveAssets: (...args: ExtractArgs<Contract['calls']['reserveAssets']>) =>
      singleQuery(publicClient!, call.reserveAssets(...args).at(deployAddress)) as Promise<CallReturn<'reserveAssets'>>,
    agentSettings: (...args: ExtractArgs<Contract['calls']['agentSettings']>) =>
      singleQuery(publicClient!, call.agentSettings(...args).at(deployAddress)) as Promise<CallReturn<'agentSettings'>>,
    isRecipientAllowed: (...args: ExtractArgs<Contract['calls']['isRecipientAllowed']>) =>
      singleQuery(publicClient!, call.isRecipientAllowed(...args).at(deployAddress)) as Promise<
        CallReturn<'isRecipientAllowed'>
      >,
    pendingWhitelist: (...args: ExtractArgs<Contract['calls']['pendingWhitelist']>) =>
      singleQuery(publicClient!, call.pendingWhitelist(...args).at(deployAddress)) as Promise<
        CallReturn<'pendingWhitelist'>
      >,
    addyRegistry: (...args: ExtractArgs<Contract['calls']['addyRegistry']>) =>
      singleQuery(publicClient!, call.addyRegistry(...args).at(deployAddress)) as Promise<CallReturn<'addyRegistry'>>,
    initialized: (...args: ExtractArgs<Contract['calls']['initialized']>) =>
      singleQuery(publicClient!, call.initialized(...args).at(deployAddress)) as Promise<CallReturn<'initialized'>>,
    MIN_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MIN_OWNER_CHANGE_DELAY(...args).at(deployAddress)) as Promise<
        CallReturn<'MIN_OWNER_CHANGE_DELAY'>
      >,
    MAX_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MAX_OWNER_CHANGE_DELAY(...args).at(deployAddress)) as Promise<
        CallReturn<'MAX_OWNER_CHANGE_DELAY'>
      >,

    // Mutations
    initialize: (...args: ExtractArgs<Contract['mutations']['initialize']>) =>
      mutate(walletClient!, mutation.initialize, { address: deployAddress })(...args),
    handleSubscriptionsAndPermissions: (
      ...args: ExtractArgs<Contract['mutations']['handleSubscriptionsAndPermissions']>
    ) => mutate(walletClient!, mutation.handleSubscriptionsAndPermissions, { address: deployAddress })(...args),
    addOrModifyAgent: (...args: ExtractArgs<Contract['mutations']['addOrModifyAgent']>) =>
      mutate(walletClient!, mutation.addOrModifyAgent, { address: deployAddress })(...args),
    disableAgent: (...args: ExtractArgs<Contract['mutations']['disableAgent']>) =>
      mutate(walletClient!, mutation.disableAgent, { address: deployAddress })(...args),
    addLegoIdForAgent: (...args: ExtractArgs<Contract['mutations']['addLegoIdForAgent']>) =>
      mutate(walletClient!, mutation.addLegoIdForAgent, { address: deployAddress })(...args),
    addAssetForAgent: (...args: ExtractArgs<Contract['mutations']['addAssetForAgent']>) =>
      mutate(walletClient!, mutation.addAssetForAgent, { address: deployAddress })(...args),
    modifyAllowedActions: (...args: ExtractArgs<Contract['mutations']['modifyAllowedActions']>) =>
      mutate(walletClient!, mutation.modifyAllowedActions, { address: deployAddress })(...args),
    addWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['addWhitelistAddr']>) =>
      mutate(walletClient!, mutation.addWhitelistAddr, { address: deployAddress })(...args),
    confirmWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['confirmWhitelistAddr']>) =>
      mutate(walletClient!, mutation.confirmWhitelistAddr, { address: deployAddress })(...args),
    cancelPendingWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['cancelPendingWhitelistAddr']>) =>
      mutate(walletClient!, mutation.cancelPendingWhitelistAddr, { address: deployAddress })(...args),
    removeWhitelistAddr: (...args: ExtractArgs<Contract['mutations']['removeWhitelistAddr']>) =>
      mutate(walletClient!, mutation.removeWhitelistAddr, { address: deployAddress })(...args),
    setReserveAsset: (...args: ExtractArgs<Contract['mutations']['setReserveAsset']>) =>
      mutate(walletClient!, mutation.setReserveAsset, { address: deployAddress })(...args),
    setManyReserveAssets: (...args: ExtractArgs<Contract['mutations']['setManyReserveAssets']>) =>
      mutate(walletClient!, mutation.setManyReserveAssets, { address: deployAddress })(...args),
    changeOwnership: (...args: ExtractArgs<Contract['mutations']['changeOwnership']>) =>
      mutate(walletClient!, mutation.changeOwnership, { address: deployAddress })(...args),
    confirmOwnershipChange: (...args: ExtractArgs<Contract['mutations']['confirmOwnershipChange']>) =>
      mutate(walletClient!, mutation.confirmOwnershipChange, { address: deployAddress })(...args),
    cancelOwnershipChange: (...args: ExtractArgs<Contract['mutations']['cancelOwnershipChange']>) =>
      mutate(walletClient!, mutation.cancelOwnershipChange, { address: deployAddress })(...args),
    setOwnershipChangeDelay: (...args: ExtractArgs<Contract['mutations']['setOwnershipChangeDelay']>) =>
      mutate(walletClient!, mutation.setOwnershipChangeDelay, { address: deployAddress })(...args),
    recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) =>
      mutate(walletClient!, mutation.recoverFunds, { address: deployAddress })(...args),
  }
}
