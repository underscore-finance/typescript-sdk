/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'ChequeCreated',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdValue',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unlockBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expiryBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'canManagerPay',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canBePulled',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'creator',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ChequeCancelled',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'usdValue',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unlockBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expiryBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'canManagerPay',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canBePulled',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'cancelledBy',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ChequeSettingsModified',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxNumActiveCheques',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxChequeUsdValue',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'instantUsdThreshold',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'perPeriodPaidUsdCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxNumChequesPaidPerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'payCooldownBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'perPeriodCreatedUsdCap',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxNumChequesCreatedPerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'createCooldownBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'periodLength',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expensiveDelayBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultExpiryBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'canManagersCreateCheques',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canManagerPay',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canBePulled',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'createCheque',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_unlockNumBlocks',
        type: 'uint256',
      },
      {
        name: '_expiryNumBlocks',
        type: 'uint256',
      },
      {
        name: '_canManagerPay',
        type: 'bool',
      },
      {
        name: '_canBePulled',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canCreateCheque',
    inputs: [
      {
        name: '_isCreatorOwner',
        type: 'bool',
      },
      {
        name: '_isCreatorManager',
        type: 'bool',
      },
      {
        name: '_canManagersCreateCheques',
        type: 'bool',
      },
      {
        name: '_managerSettings',
        type: 'tuple',
        components: [
          {
            name: 'startBlock',
            type: 'uint256',
          },
          {
            name: 'expiryBlock',
            type: 'uint256',
          },
          {
            name: 'limits',
            type: 'tuple',
            components: [
              {
                name: 'maxUsdValuePerTx',
                type: 'uint256',
              },
              {
                name: 'maxUsdValuePerPeriod',
                type: 'uint256',
              },
              {
                name: 'maxUsdValueLifetime',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
            ],
          },
          {
            name: 'legoPerms',
            type: 'tuple',
            components: [
              {
                name: 'canManageYield',
                type: 'bool',
              },
              {
                name: 'canBuyAndSell',
                type: 'bool',
              },
              {
                name: 'canManageDebt',
                type: 'bool',
              },
              {
                name: 'canManageLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'allowedLegos',
                type: 'uint256[]',
              },
            ],
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'transferPerms',
            type: 'tuple',
            components: [
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canCreateCheque',
                type: 'bool',
              },
              {
                name: 'canAddPendingPayee',
                type: 'bool',
              },
              {
                name: 'allowedPayees',
                type: 'address[]',
              },
            ],
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
          {
            name: 'canClaimLoot',
            type: 'bool',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidNewCheque',
    inputs: [
      {
        name: '_wallet',
        type: 'address',
      },
      {
        name: '_walletConfig',
        type: 'address',
      },
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_isRecipientOnWhitelist',
        type: 'bool',
      },
      {
        name: '_chequeSettings',
        type: 'tuple',
        components: [
          {
            name: 'maxNumActiveCheques',
            type: 'uint256',
          },
          {
            name: 'maxChequeUsdValue',
            type: 'uint256',
          },
          {
            name: 'instantUsdThreshold',
            type: 'uint256',
          },
          {
            name: 'perPeriodPaidUsdCap',
            type: 'uint256',
          },
          {
            name: 'maxNumChequesPaidPerPeriod',
            type: 'uint256',
          },
          {
            name: 'payCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'perPeriodCreatedUsdCap',
            type: 'uint256',
          },
          {
            name: 'maxNumChequesCreatedPerPeriod',
            type: 'uint256',
          },
          {
            name: 'createCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'periodLength',
            type: 'uint256',
          },
          {
            name: 'expensiveDelayBlocks',
            type: 'uint256',
          },
          {
            name: 'defaultExpiryBlocks',
            type: 'uint256',
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
          {
            name: 'canManagersCreateCheques',
            type: 'bool',
          },
          {
            name: 'canManagerPay',
            type: 'bool',
          },
          {
            name: 'canBePulled',
            type: 'bool',
          },
        ],
      },
      {
        name: '_chequeData',
        type: 'tuple',
        components: [
          {
            name: 'numChequesPaidInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValuePaidInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumChequesPaid',
            type: 'uint256',
          },
          {
            name: 'totalUsdValuePaid',
            type: 'uint256',
          },
          {
            name: 'lastChequePaidBlock',
            type: 'uint256',
          },
          {
            name: 'numChequesCreatedInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueCreatedInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumChequesCreated',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueCreated',
            type: 'uint256',
          },
          {
            name: 'lastChequeCreatedBlock',
            type: 'uint256',
          },
          {
            name: 'periodStartBlock',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_isExistingCheque',
        type: 'bool',
      },
      {
        name: '_numActiveCheques',
        type: 'uint256',
      },
      {
        name: '_timeLock',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_unlockNumBlocks',
        type: 'uint256',
      },
      {
        name: '_expiryNumBlocks',
        type: 'uint256',
      },
      {
        name: '_canManagerPay',
        type: 'bool',
      },
      {
        name: '_canBePulled',
        type: 'bool',
      },
      {
        name: '_creator',
        type: 'address',
      },
      {
        name: '_usdValue',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelCheque',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setChequeSettings',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_maxNumActiveCheques',
        type: 'uint256',
      },
      {
        name: '_maxChequeUsdValue',
        type: 'uint256',
      },
      {
        name: '_instantUsdThreshold',
        type: 'uint256',
      },
      {
        name: '_perPeriodPaidUsdCap',
        type: 'uint256',
      },
      {
        name: '_maxNumChequesPaidPerPeriod',
        type: 'uint256',
      },
      {
        name: '_payCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_perPeriodCreatedUsdCap',
        type: 'uint256',
      },
      {
        name: '_maxNumChequesCreatedPerPeriod',
        type: 'uint256',
      },
      {
        name: '_createCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_expensiveDelayBlocks',
        type: 'uint256',
      },
      {
        name: '_defaultExpiryBlocks',
        type: 'uint256',
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
      {
        name: '_canManagersCreateCheques',
        type: 'bool',
      },
      {
        name: '_canManagerPay',
        type: 'bool',
      },
      {
        name: '_canBePulled',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidChequeSettings',
    inputs: [
      {
        name: '_maxNumActiveCheques',
        type: 'uint256',
      },
      {
        name: '_maxChequeUsdValue',
        type: 'uint256',
      },
      {
        name: '_instantUsdThreshold',
        type: 'uint256',
      },
      {
        name: '_perPeriodPaidUsdCap',
        type: 'uint256',
      },
      {
        name: '_maxNumChequesPaidPerPeriod',
        type: 'uint256',
      },
      {
        name: '_payCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_perPeriodCreatedUsdCap',
        type: 'uint256',
      },
      {
        name: '_maxNumChequesCreatedPerPeriod',
        type: 'uint256',
      },
      {
        name: '_createCooldownBlocks',
        type: 'uint256',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_expensiveDelayBlocks',
        type: 'uint256',
      },
      {
        name: '_defaultExpiryBlocks',
        type: 'uint256',
      },
      {
        name: '_timeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getChequeConfig',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_creator',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'wallet',
            type: 'address',
          },
          {
            name: 'walletConfig',
            type: 'address',
          },
          {
            name: 'owner',
            type: 'address',
          },
          {
            name: 'isRecipientOnWhitelist',
            type: 'bool',
          },
          {
            name: 'isCreatorManager',
            type: 'bool',
          },
          {
            name: 'managerSettings',
            type: 'tuple',
            components: [
              {
                name: 'startBlock',
                type: 'uint256',
              },
              {
                name: 'expiryBlock',
                type: 'uint256',
              },
              {
                name: 'limits',
                type: 'tuple',
                components: [
                  {
                    name: 'maxUsdValuePerTx',
                    type: 'uint256',
                  },
                  {
                    name: 'maxUsdValuePerPeriod',
                    type: 'uint256',
                  },
                  {
                    name: 'maxUsdValueLifetime',
                    type: 'uint256',
                  },
                  {
                    name: 'maxNumTxsPerPeriod',
                    type: 'uint256',
                  },
                  {
                    name: 'txCooldownBlocks',
                    type: 'uint256',
                  },
                  {
                    name: 'failOnZeroPrice',
                    type: 'bool',
                  },
                ],
              },
              {
                name: 'legoPerms',
                type: 'tuple',
                components: [
                  {
                    name: 'canManageYield',
                    type: 'bool',
                  },
                  {
                    name: 'canBuyAndSell',
                    type: 'bool',
                  },
                  {
                    name: 'canManageDebt',
                    type: 'bool',
                  },
                  {
                    name: 'canManageLiq',
                    type: 'bool',
                  },
                  {
                    name: 'canClaimRewards',
                    type: 'bool',
                  },
                  {
                    name: 'allowedLegos',
                    type: 'uint256[]',
                  },
                ],
              },
              {
                name: 'whitelistPerms',
                type: 'tuple',
                components: [
                  {
                    name: 'canAddPending',
                    type: 'bool',
                  },
                  {
                    name: 'canConfirm',
                    type: 'bool',
                  },
                  {
                    name: 'canCancel',
                    type: 'bool',
                  },
                  {
                    name: 'canRemove',
                    type: 'bool',
                  },
                ],
              },
              {
                name: 'transferPerms',
                type: 'tuple',
                components: [
                  {
                    name: 'canTransfer',
                    type: 'bool',
                  },
                  {
                    name: 'canCreateCheque',
                    type: 'bool',
                  },
                  {
                    name: 'canAddPendingPayee',
                    type: 'bool',
                  },
                  {
                    name: 'allowedPayees',
                    type: 'address[]',
                  },
                ],
              },
              {
                name: 'allowedAssets',
                type: 'address[]',
              },
              {
                name: 'canClaimLoot',
                type: 'bool',
              },
            ],
          },
          {
            name: 'chequeSettings',
            type: 'tuple',
            components: [
              {
                name: 'maxNumActiveCheques',
                type: 'uint256',
              },
              {
                name: 'maxChequeUsdValue',
                type: 'uint256',
              },
              {
                name: 'instantUsdThreshold',
                type: 'uint256',
              },
              {
                name: 'perPeriodPaidUsdCap',
                type: 'uint256',
              },
              {
                name: 'maxNumChequesPaidPerPeriod',
                type: 'uint256',
              },
              {
                name: 'payCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'perPeriodCreatedUsdCap',
                type: 'uint256',
              },
              {
                name: 'maxNumChequesCreatedPerPeriod',
                type: 'uint256',
              },
              {
                name: 'createCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'periodLength',
                type: 'uint256',
              },
              {
                name: 'expensiveDelayBlocks',
                type: 'uint256',
              },
              {
                name: 'defaultExpiryBlocks',
                type: 'uint256',
              },
              {
                name: 'allowedAssets',
                type: 'address[]',
              },
              {
                name: 'canManagersCreateCheques',
                type: 'bool',
              },
              {
                name: 'canManagerPay',
                type: 'bool',
              },
              {
                name: 'canBePulled',
                type: 'bool',
              },
            ],
          },
          {
            name: 'chequeData',
            type: 'tuple',
            components: [
              {
                name: 'numChequesPaidInPeriod',
                type: 'uint256',
              },
              {
                name: 'totalUsdValuePaidInPeriod',
                type: 'uint256',
              },
              {
                name: 'totalNumChequesPaid',
                type: 'uint256',
              },
              {
                name: 'totalUsdValuePaid',
                type: 'uint256',
              },
              {
                name: 'lastChequePaidBlock',
                type: 'uint256',
              },
              {
                name: 'numChequesCreatedInPeriod',
                type: 'uint256',
              },
              {
                name: 'totalUsdValueCreatedInPeriod',
                type: 'uint256',
              },
              {
                name: 'totalNumChequesCreated',
                type: 'uint256',
              },
              {
                name: 'totalUsdValueCreated',
                type: 'uint256',
              },
              {
                name: 'lastChequeCreatedBlock',
                type: 'uint256',
              },
              {
                name: 'periodStartBlock',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'isExistingCheque',
            type: 'bool',
          },
          {
            name: 'numActiveCheques',
            type: 'uint256',
          },
          {
            name: 'timeLock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'createDefaultChequeSettings',
    inputs: [
      {
        name: '_maxNumActiveCheques',
        type: 'uint256',
      },
      {
        name: '_instantUsdThreshold',
        type: 'uint256',
      },
      {
        name: '_periodLength',
        type: 'uint256',
      },
      {
        name: '_expensiveDelayBlocks',
        type: 'uint256',
      },
      {
        name: '_defaultExpiryBlocks',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'maxNumActiveCheques',
            type: 'uint256',
          },
          {
            name: 'maxChequeUsdValue',
            type: 'uint256',
          },
          {
            name: 'instantUsdThreshold',
            type: 'uint256',
          },
          {
            name: 'perPeriodPaidUsdCap',
            type: 'uint256',
          },
          {
            name: 'maxNumChequesPaidPerPeriod',
            type: 'uint256',
          },
          {
            name: 'payCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'perPeriodCreatedUsdCap',
            type: 'uint256',
          },
          {
            name: 'maxNumChequesCreatedPerPeriod',
            type: 'uint256',
          },
          {
            name: 'createCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'periodLength',
            type: 'uint256',
          },
          {
            name: 'expensiveDelayBlocks',
            type: 'uint256',
          },
          {
            name: 'defaultExpiryBlocks',
            type: 'uint256',
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
          {
            name: 'canManagersCreateCheques',
            type: 'bool',
          },
          {
            name: 'canManagerPay',
            type: 'bool',
          },
          {
            name: 'canBePulled',
            type: 'bool',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'UNDY_HQ',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MIN_CHEQUE_PERIOD',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MAX_CHEQUE_PERIOD',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MIN_EXPENSIVE_CHEQUE_DELAY',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MAX_UNLOCK_BLOCKS',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MAX_EXPIRY_BLOCKS',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_minChequePeriod',
        type: 'uint256',
      },
      {
        name: '_maxChequePeriod',
        type: 'uint256',
      },
      {
        name: '_minExpensiveChequeDelay',
        type: 'uint256',
      },
      {
        name: '_maxUnlockBlocks',
        type: 'uint256',
      },
      {
        name: '_maxExpiryBlocks',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0x27F769D5eFaddB6f3beb5b51A7F083144a55aE5D'

export type Contract = {
  calls: {
    canCreateCheque: (
      isCreatorOwner: boolean,
      isCreatorManager: boolean,
      canManagersCreateCheques: boolean,
      managerSettings: {
        startBlock: bigint
        expiryBlock: bigint
        limits: {
          maxUsdValuePerTx: bigint
          maxUsdValuePerPeriod: bigint
          maxUsdValueLifetime: bigint
          maxNumTxsPerPeriod: bigint
          txCooldownBlocks: bigint
          failOnZeroPrice: boolean
        }
        legoPerms: {
          canManageYield: boolean
          canBuyAndSell: boolean
          canManageDebt: boolean
          canManageLiq: boolean
          canClaimRewards: boolean
          allowedLegos: bigint[]
        }
        whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean }
        transferPerms: {
          canTransfer: boolean
          canCreateCheque: boolean
          canAddPendingPayee: boolean
          allowedPayees: `0x${string}`[]
        }
        allowedAssets: `0x${string}`[]
        canClaimLoot: boolean
      },
    ) => Promise<boolean>
    isValidNewCheque: (
      wallet: `0x${string}`,
      walletConfig: `0x${string}`,
      owner: `0x${string}`,
      isRecipientOnWhitelist: boolean,
      chequeSettings: {
        maxNumActiveCheques: bigint
        maxChequeUsdValue: bigint
        instantUsdThreshold: bigint
        perPeriodPaidUsdCap: bigint
        maxNumChequesPaidPerPeriod: bigint
        payCooldownBlocks: bigint
        perPeriodCreatedUsdCap: bigint
        maxNumChequesCreatedPerPeriod: bigint
        createCooldownBlocks: bigint
        periodLength: bigint
        expensiveDelayBlocks: bigint
        defaultExpiryBlocks: bigint
        allowedAssets: `0x${string}`[]
        canManagersCreateCheques: boolean
        canManagerPay: boolean
        canBePulled: boolean
      },
      chequeData: {
        numChequesPaidInPeriod: bigint
        totalUsdValuePaidInPeriod: bigint
        totalNumChequesPaid: bigint
        totalUsdValuePaid: bigint
        lastChequePaidBlock: bigint
        numChequesCreatedInPeriod: bigint
        totalUsdValueCreatedInPeriod: bigint
        totalNumChequesCreated: bigint
        totalUsdValueCreated: bigint
        lastChequeCreatedBlock: bigint
        periodStartBlock: bigint
      },
      isExistingCheque: boolean,
      numActiveCheques: bigint,
      timeLock: bigint,
      recipient: `0x${string}`,
      asset: `0x${string}`,
      amount: bigint,
      unlockNumBlocks: bigint,
      expiryNumBlocks: bigint,
      canManagerPay: boolean,
      canBePulled: boolean,
      creator: `0x${string}`,
      usdValue: bigint,
    ) => Promise<boolean>
    isValidChequeSettings: (
      maxNumActiveCheques: bigint,
      maxChequeUsdValue: bigint,
      instantUsdThreshold: bigint,
      perPeriodPaidUsdCap: bigint,
      maxNumChequesPaidPerPeriod: bigint,
      payCooldownBlocks: bigint,
      perPeriodCreatedUsdCap: bigint,
      maxNumChequesCreatedPerPeriod: bigint,
      createCooldownBlocks: bigint,
      periodLength: bigint,
      expensiveDelayBlocks: bigint,
      defaultExpiryBlocks: bigint,
      timeLock: bigint,
    ) => Promise<boolean>
    getChequeConfig: (
      userWallet: `0x${string}`,
      creator: `0x${string}`,
      recipient: `0x${string}`,
    ) => Promise<{
      wallet: `0x${string}`
      walletConfig: `0x${string}`
      owner: `0x${string}`
      isRecipientOnWhitelist: boolean
      isCreatorManager: boolean
      managerSettings: {
        startBlock: bigint
        expiryBlock: bigint
        limits: {
          maxUsdValuePerTx: bigint
          maxUsdValuePerPeriod: bigint
          maxUsdValueLifetime: bigint
          maxNumTxsPerPeriod: bigint
          txCooldownBlocks: bigint
          failOnZeroPrice: boolean
        }
        legoPerms: {
          canManageYield: boolean
          canBuyAndSell: boolean
          canManageDebt: boolean
          canManageLiq: boolean
          canClaimRewards: boolean
          allowedLegos: bigint[]
        }
        whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean }
        transferPerms: {
          canTransfer: boolean
          canCreateCheque: boolean
          canAddPendingPayee: boolean
          allowedPayees: `0x${string}`[]
        }
        allowedAssets: `0x${string}`[]
        canClaimLoot: boolean
      }
      chequeSettings: {
        maxNumActiveCheques: bigint
        maxChequeUsdValue: bigint
        instantUsdThreshold: bigint
        perPeriodPaidUsdCap: bigint
        maxNumChequesPaidPerPeriod: bigint
        payCooldownBlocks: bigint
        perPeriodCreatedUsdCap: bigint
        maxNumChequesCreatedPerPeriod: bigint
        createCooldownBlocks: bigint
        periodLength: bigint
        expensiveDelayBlocks: bigint
        defaultExpiryBlocks: bigint
        allowedAssets: `0x${string}`[]
        canManagersCreateCheques: boolean
        canManagerPay: boolean
        canBePulled: boolean
      }
      chequeData: {
        numChequesPaidInPeriod: bigint
        totalUsdValuePaidInPeriod: bigint
        totalNumChequesPaid: bigint
        totalUsdValuePaid: bigint
        lastChequePaidBlock: bigint
        numChequesCreatedInPeriod: bigint
        totalUsdValueCreatedInPeriod: bigint
        totalNumChequesCreated: bigint
        totalUsdValueCreated: bigint
        lastChequeCreatedBlock: bigint
        periodStartBlock: bigint
      }
      isExistingCheque: boolean
      numActiveCheques: bigint
      timeLock: bigint
    }>
    createDefaultChequeSettings: (
      maxNumActiveCheques: bigint,
      instantUsdThreshold: bigint,
      periodLength: bigint,
      expensiveDelayBlocks: bigint,
      defaultExpiryBlocks: bigint,
    ) => Promise<{
      maxNumActiveCheques: bigint
      maxChequeUsdValue: bigint
      instantUsdThreshold: bigint
      perPeriodPaidUsdCap: bigint
      maxNumChequesPaidPerPeriod: bigint
      payCooldownBlocks: bigint
      perPeriodCreatedUsdCap: bigint
      maxNumChequesCreatedPerPeriod: bigint
      createCooldownBlocks: bigint
      periodLength: bigint
      expensiveDelayBlocks: bigint
      defaultExpiryBlocks: bigint
      allowedAssets: `0x${string}`[]
      canManagersCreateCheques: boolean
      canManagerPay: boolean
      canBePulled: boolean
    }>
    UNDY_HQ: () => Promise<`0x${string}`>
    MIN_CHEQUE_PERIOD: () => Promise<bigint>
    MAX_CHEQUE_PERIOD: () => Promise<bigint>
    MIN_EXPENSIVE_CHEQUE_DELAY: () => Promise<bigint>
    MAX_UNLOCK_BLOCKS: () => Promise<bigint>
    MAX_EXPIRY_BLOCKS: () => Promise<bigint>
  }
  mutations: {
    createCheque: (
      userWallet: `0x${string}`,
      recipient: `0x${string}`,
      asset: `0x${string}`,
      amount: bigint,
      unlockNumBlocks: bigint,
      expiryNumBlocks: bigint,
      canManagerPay: boolean,
      canBePulled: boolean,
    ) => Promise<boolean>
    cancelCheque: (userWallet: `0x${string}`, recipient: `0x${string}`) => Promise<boolean>
    setChequeSettings: (
      userWallet: `0x${string}`,
      maxNumActiveCheques: bigint,
      maxChequeUsdValue: bigint,
      instantUsdThreshold: bigint,
      perPeriodPaidUsdCap: bigint,
      maxNumChequesPaidPerPeriod: bigint,
      payCooldownBlocks: bigint,
      perPeriodCreatedUsdCap: bigint,
      maxNumChequesCreatedPerPeriod: bigint,
      createCooldownBlocks: bigint,
      periodLength: bigint,
      expensiveDelayBlocks: bigint,
      defaultExpiryBlocks: bigint,
      allowedAssets: `0x${string}`[],
      canManagersCreateCheques: boolean,
      canManagerPay: boolean,
      canBePulled: boolean,
    ) => Promise<boolean>
  }
  events: {
    ChequeCreated: (
      user: `0x${string}`,
      recipient: `0x${string}`,
      asset: `0x${string}`,
      amount: bigint,
      usdValue: bigint,
      unlockBlock: bigint,
      expiryBlock: bigint,
      canManagerPay: boolean,
      canBePulled: boolean,
      creator: `0x${string}`,
    ) => Promise<void>
    ChequeCancelled: (
      user: `0x${string}`,
      recipient: `0x${string}`,
      asset: `0x${string}`,
      amount: bigint,
      usdValue: bigint,
      unlockBlock: bigint,
      expiryBlock: bigint,
      canManagerPay: boolean,
      canBePulled: boolean,
      cancelledBy: `0x${string}`,
    ) => Promise<void>
    ChequeSettingsModified: (
      user: `0x${string}`,
      maxNumActiveCheques: bigint,
      maxChequeUsdValue: bigint,
      instantUsdThreshold: bigint,
      perPeriodPaidUsdCap: bigint,
      maxNumChequesPaidPerPeriod: bigint,
      payCooldownBlocks: bigint,
      perPeriodCreatedUsdCap: bigint,
      maxNumChequesCreatedPerPeriod: bigint,
      createCooldownBlocks: bigint,
      periodLength: bigint,
      expensiveDelayBlocks: bigint,
      defaultExpiryBlocks: bigint,
      canManagersCreateCheques: boolean,
      canManagerPay: boolean,
      canBePulled: boolean,
    ) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'ChequeBook'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'ChequeBook' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  canCreateCheque: (...args: ExtractArgs<Contract['calls']['canCreateCheque']>) => getRequest('canCreateCheque', args),
  isValidNewCheque: (...args: ExtractArgs<Contract['calls']['isValidNewCheque']>) =>
    getRequest('isValidNewCheque', args),
  isValidChequeSettings: (...args: ExtractArgs<Contract['calls']['isValidChequeSettings']>) =>
    getRequest('isValidChequeSettings', args),
  getChequeConfig: (...args: ExtractArgs<Contract['calls']['getChequeConfig']>) => getRequest('getChequeConfig', args),
  createDefaultChequeSettings: (...args: ExtractArgs<Contract['calls']['createDefaultChequeSettings']>) =>
    getRequest('createDefaultChequeSettings', args),
  UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) => getRequest('UNDY_HQ', args),
  MIN_CHEQUE_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_CHEQUE_PERIOD']>) =>
    getRequest('MIN_CHEQUE_PERIOD', args),
  MAX_CHEQUE_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_CHEQUE_PERIOD']>) =>
    getRequest('MAX_CHEQUE_PERIOD', args),
  MIN_EXPENSIVE_CHEQUE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_EXPENSIVE_CHEQUE_DELAY']>) =>
    getRequest('MIN_EXPENSIVE_CHEQUE_DELAY', args),
  MAX_UNLOCK_BLOCKS: (...args: ExtractArgs<Contract['calls']['MAX_UNLOCK_BLOCKS']>) =>
    getRequest('MAX_UNLOCK_BLOCKS', args),
  MAX_EXPIRY_BLOCKS: (...args: ExtractArgs<Contract['calls']['MAX_EXPIRY_BLOCKS']>) =>
    getRequest('MAX_EXPIRY_BLOCKS', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'ChequeBook' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'ChequeBook'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  createCheque: getMutation('createCheque'),
  cancelCheque: getMutation('cancelCheque'),
  setChequeSettings: getMutation('setChequeSettings'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  canCreateCheque: (
    ...args: ExtractArgs<Contract['calls']['canCreateCheque']>
  ) => Promise<CallReturn<'canCreateCheque'>>
  isValidNewCheque: (
    ...args: ExtractArgs<Contract['calls']['isValidNewCheque']>
  ) => Promise<CallReturn<'isValidNewCheque'>>
  isValidChequeSettings: (
    ...args: ExtractArgs<Contract['calls']['isValidChequeSettings']>
  ) => Promise<CallReturn<'isValidChequeSettings'>>
  getChequeConfig: (
    ...args: ExtractArgs<Contract['calls']['getChequeConfig']>
  ) => Promise<CallReturn<'getChequeConfig'>>
  createDefaultChequeSettings: (
    ...args: ExtractArgs<Contract['calls']['createDefaultChequeSettings']>
  ) => Promise<CallReturn<'createDefaultChequeSettings'>>
  UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) => Promise<CallReturn<'UNDY_HQ'>>
  MIN_CHEQUE_PERIOD: (
    ...args: ExtractArgs<Contract['calls']['MIN_CHEQUE_PERIOD']>
  ) => Promise<CallReturn<'MIN_CHEQUE_PERIOD'>>
  MAX_CHEQUE_PERIOD: (
    ...args: ExtractArgs<Contract['calls']['MAX_CHEQUE_PERIOD']>
  ) => Promise<CallReturn<'MAX_CHEQUE_PERIOD'>>
  MIN_EXPENSIVE_CHEQUE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MIN_EXPENSIVE_CHEQUE_DELAY']>
  ) => Promise<CallReturn<'MIN_EXPENSIVE_CHEQUE_DELAY'>>
  MAX_UNLOCK_BLOCKS: (
    ...args: ExtractArgs<Contract['calls']['MAX_UNLOCK_BLOCKS']>
  ) => Promise<CallReturn<'MAX_UNLOCK_BLOCKS'>>
  MAX_EXPIRY_BLOCKS: (
    ...args: ExtractArgs<Contract['calls']['MAX_EXPIRY_BLOCKS']>
  ) => Promise<CallReturn<'MAX_EXPIRY_BLOCKS'>>
  createCheque: (...args: ExtractArgs<Contract['mutations']['createCheque']>) => Promise<Address>
  cancelCheque: (...args: ExtractArgs<Contract['mutations']['cancelCheque']>) => Promise<Address>
  setChequeSettings: (...args: ExtractArgs<Contract['mutations']['setChequeSettings']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    canCreateCheque: (...args: ExtractArgs<Contract['calls']['canCreateCheque']>) =>
      singleQuery(publicClient!, call.canCreateCheque(...args)) as Promise<CallReturn<'canCreateCheque'>>,
    isValidNewCheque: (...args: ExtractArgs<Contract['calls']['isValidNewCheque']>) =>
      singleQuery(publicClient!, call.isValidNewCheque(...args)) as Promise<CallReturn<'isValidNewCheque'>>,
    isValidChequeSettings: (...args: ExtractArgs<Contract['calls']['isValidChequeSettings']>) =>
      singleQuery(publicClient!, call.isValidChequeSettings(...args)) as Promise<CallReturn<'isValidChequeSettings'>>,
    getChequeConfig: (...args: ExtractArgs<Contract['calls']['getChequeConfig']>) =>
      singleQuery(publicClient!, call.getChequeConfig(...args)) as Promise<CallReturn<'getChequeConfig'>>,
    createDefaultChequeSettings: (...args: ExtractArgs<Contract['calls']['createDefaultChequeSettings']>) =>
      singleQuery(publicClient!, call.createDefaultChequeSettings(...args)) as Promise<
        CallReturn<'createDefaultChequeSettings'>
      >,
    UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) =>
      singleQuery(publicClient!, call.UNDY_HQ(...args)) as Promise<CallReturn<'UNDY_HQ'>>,
    MIN_CHEQUE_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_CHEQUE_PERIOD']>) =>
      singleQuery(publicClient!, call.MIN_CHEQUE_PERIOD(...args)) as Promise<CallReturn<'MIN_CHEQUE_PERIOD'>>,
    MAX_CHEQUE_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_CHEQUE_PERIOD']>) =>
      singleQuery(publicClient!, call.MAX_CHEQUE_PERIOD(...args)) as Promise<CallReturn<'MAX_CHEQUE_PERIOD'>>,
    MIN_EXPENSIVE_CHEQUE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_EXPENSIVE_CHEQUE_DELAY']>) =>
      singleQuery(publicClient!, call.MIN_EXPENSIVE_CHEQUE_DELAY(...args)) as Promise<
        CallReturn<'MIN_EXPENSIVE_CHEQUE_DELAY'>
      >,
    MAX_UNLOCK_BLOCKS: (...args: ExtractArgs<Contract['calls']['MAX_UNLOCK_BLOCKS']>) =>
      singleQuery(publicClient!, call.MAX_UNLOCK_BLOCKS(...args)) as Promise<CallReturn<'MAX_UNLOCK_BLOCKS'>>,
    MAX_EXPIRY_BLOCKS: (...args: ExtractArgs<Contract['calls']['MAX_EXPIRY_BLOCKS']>) =>
      singleQuery(publicClient!, call.MAX_EXPIRY_BLOCKS(...args)) as Promise<CallReturn<'MAX_EXPIRY_BLOCKS'>>,

    // Mutations
    createCheque: (...args: ExtractArgs<Contract['mutations']['createCheque']>) =>
      mutate(walletClient!, mutation.createCheque)(...args),
    cancelCheque: (...args: ExtractArgs<Contract['mutations']['cancelCheque']>) =>
      mutate(walletClient!, mutation.cancelCheque)(...args),
    setChequeSettings: (...args: ExtractArgs<Contract['mutations']['setChequeSettings']>) =>
      mutate(walletClient!, mutation.setChequeSettings)(...args),
  }
}
