/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'GlobalManagerSettingsModified',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'managerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'startDelay',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'activationLength',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'canOwnerManage',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'maxUsdValuePerTx',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxUsdValuePerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxUsdValueLifetime',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxNumTxsPerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txCooldownBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'failOnZeroPrice',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canManageYield',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canBuyAndSell',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canManageDebt',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canManageLiq',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canClaimRewards',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'numAllowedLegos',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'canAddPendingWhitelist',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canConfirmWhitelist',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canCancelWhitelist',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canRemoveWhitelist',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canTransfer',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canCreateCheque',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canAddPendingPayee',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'numAllowedRecipients',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'numAllowedAssets',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ManagerSettingsModified',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'manager',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expiryBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxUsdValuePerTx',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxUsdValuePerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxUsdValueLifetime',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'maxNumTxsPerPeriod',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'txCooldownBlocks',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'failOnZeroPrice',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canManageYield',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canBuyAndSell',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canManageDebt',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canManageLiq',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canClaimRewards',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'numAllowedLegos',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'canAddPendingWhitelist',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canConfirmWhitelist',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canCancelWhitelist',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canRemoveWhitelist',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canTransfer',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canCreateCheque',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'canAddPendingPayee',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'numAllowedRecipients',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'numAllowedAssets',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'canClaimLoot',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ManagerRemoved',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'manager',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ManagerActivationLengthAdjusted',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'manager',
        type: 'address',
        indexed: true,
      },
      {
        name: 'activationLength',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'didRestart',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addManager',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_manager',
        type: 'address',
      },
      {
        name: '_limits',
        type: 'tuple',
        components: [
          {
            name: 'maxUsdValuePerTx',
            type: 'uint256',
          },
          {
            name: 'maxUsdValuePerPeriod',
            type: 'uint256',
          },
          {
            name: 'maxUsdValueLifetime',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
        ],
      },
      {
        name: '_legoPerms',
        type: 'tuple',
        components: [
          {
            name: 'canManageYield',
            type: 'bool',
          },
          {
            name: 'canBuyAndSell',
            type: 'bool',
          },
          {
            name: 'canManageDebt',
            type: 'bool',
          },
          {
            name: 'canManageLiq',
            type: 'bool',
          },
          {
            name: 'canClaimRewards',
            type: 'bool',
          },
          {
            name: 'allowedLegos',
            type: 'uint256[]',
          },
        ],
      },
      {
        name: '_whitelistPerms',
        type: 'tuple',
        components: [
          {
            name: 'canAddPending',
            type: 'bool',
          },
          {
            name: 'canConfirm',
            type: 'bool',
          },
          {
            name: 'canCancel',
            type: 'bool',
          },
          {
            name: 'canRemove',
            type: 'bool',
          },
        ],
      },
      {
        name: '_transferPerms',
        type: 'tuple',
        components: [
          {
            name: 'canTransfer',
            type: 'bool',
          },
          {
            name: 'canCreateCheque',
            type: 'bool',
          },
          {
            name: 'canAddPendingPayee',
            type: 'bool',
          },
          {
            name: 'allowedPayees',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
      {
        name: '_canClaimLoot',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addManager',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_manager',
        type: 'address',
      },
      {
        name: '_limits',
        type: 'tuple',
        components: [
          {
            name: 'maxUsdValuePerTx',
            type: 'uint256',
          },
          {
            name: 'maxUsdValuePerPeriod',
            type: 'uint256',
          },
          {
            name: 'maxUsdValueLifetime',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
        ],
      },
      {
        name: '_legoPerms',
        type: 'tuple',
        components: [
          {
            name: 'canManageYield',
            type: 'bool',
          },
          {
            name: 'canBuyAndSell',
            type: 'bool',
          },
          {
            name: 'canManageDebt',
            type: 'bool',
          },
          {
            name: 'canManageLiq',
            type: 'bool',
          },
          {
            name: 'canClaimRewards',
            type: 'bool',
          },
          {
            name: 'allowedLegos',
            type: 'uint256[]',
          },
        ],
      },
      {
        name: '_whitelistPerms',
        type: 'tuple',
        components: [
          {
            name: 'canAddPending',
            type: 'bool',
          },
          {
            name: 'canConfirm',
            type: 'bool',
          },
          {
            name: 'canCancel',
            type: 'bool',
          },
          {
            name: 'canRemove',
            type: 'bool',
          },
        ],
      },
      {
        name: '_transferPerms',
        type: 'tuple',
        components: [
          {
            name: 'canTransfer',
            type: 'bool',
          },
          {
            name: 'canCreateCheque',
            type: 'bool',
          },
          {
            name: 'canAddPendingPayee',
            type: 'bool',
          },
          {
            name: 'allowedPayees',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
      {
        name: '_canClaimLoot',
        type: 'bool',
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addManager',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_manager',
        type: 'address',
      },
      {
        name: '_limits',
        type: 'tuple',
        components: [
          {
            name: 'maxUsdValuePerTx',
            type: 'uint256',
          },
          {
            name: 'maxUsdValuePerPeriod',
            type: 'uint256',
          },
          {
            name: 'maxUsdValueLifetime',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
        ],
      },
      {
        name: '_legoPerms',
        type: 'tuple',
        components: [
          {
            name: 'canManageYield',
            type: 'bool',
          },
          {
            name: 'canBuyAndSell',
            type: 'bool',
          },
          {
            name: 'canManageDebt',
            type: 'bool',
          },
          {
            name: 'canManageLiq',
            type: 'bool',
          },
          {
            name: 'canClaimRewards',
            type: 'bool',
          },
          {
            name: 'allowedLegos',
            type: 'uint256[]',
          },
        ],
      },
      {
        name: '_whitelistPerms',
        type: 'tuple',
        components: [
          {
            name: 'canAddPending',
            type: 'bool',
          },
          {
            name: 'canConfirm',
            type: 'bool',
          },
          {
            name: 'canCancel',
            type: 'bool',
          },
          {
            name: 'canRemove',
            type: 'bool',
          },
        ],
      },
      {
        name: '_transferPerms',
        type: 'tuple',
        components: [
          {
            name: 'canTransfer',
            type: 'bool',
          },
          {
            name: 'canCreateCheque',
            type: 'bool',
          },
          {
            name: 'canAddPendingPayee',
            type: 'bool',
          },
          {
            name: 'allowedPayees',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
      {
        name: '_canClaimLoot',
        type: 'bool',
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'updateManager',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_manager',
        type: 'address',
      },
      {
        name: '_limits',
        type: 'tuple',
        components: [
          {
            name: 'maxUsdValuePerTx',
            type: 'uint256',
          },
          {
            name: 'maxUsdValuePerPeriod',
            type: 'uint256',
          },
          {
            name: 'maxUsdValueLifetime',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
        ],
      },
      {
        name: '_legoPerms',
        type: 'tuple',
        components: [
          {
            name: 'canManageYield',
            type: 'bool',
          },
          {
            name: 'canBuyAndSell',
            type: 'bool',
          },
          {
            name: 'canManageDebt',
            type: 'bool',
          },
          {
            name: 'canManageLiq',
            type: 'bool',
          },
          {
            name: 'canClaimRewards',
            type: 'bool',
          },
          {
            name: 'allowedLegos',
            type: 'uint256[]',
          },
        ],
      },
      {
        name: '_whitelistPerms',
        type: 'tuple',
        components: [
          {
            name: 'canAddPending',
            type: 'bool',
          },
          {
            name: 'canConfirm',
            type: 'bool',
          },
          {
            name: 'canCancel',
            type: 'bool',
          },
          {
            name: 'canRemove',
            type: 'bool',
          },
        ],
      },
      {
        name: '_transferPerms',
        type: 'tuple',
        components: [
          {
            name: 'canTransfer',
            type: 'bool',
          },
          {
            name: 'canCreateCheque',
            type: 'bool',
          },
          {
            name: 'canAddPendingPayee',
            type: 'bool',
          },
          {
            name: 'allowedPayees',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
      {
        name: '_canClaimLoot',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeManager',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_manager',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'adjustManagerActivationLength',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_manager',
        type: 'address',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'adjustManagerActivationLength',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_manager',
        type: 'address',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
      {
        name: '_shouldResetStartBlock',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setGlobalManagerSettings',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_managerPeriod',
        type: 'uint256',
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
      {
        name: '_canOwnerManage',
        type: 'bool',
      },
      {
        name: '_limits',
        type: 'tuple',
        components: [
          {
            name: 'maxUsdValuePerTx',
            type: 'uint256',
          },
          {
            name: 'maxUsdValuePerPeriod',
            type: 'uint256',
          },
          {
            name: 'maxUsdValueLifetime',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
        ],
      },
      {
        name: '_legoPerms',
        type: 'tuple',
        components: [
          {
            name: 'canManageYield',
            type: 'bool',
          },
          {
            name: 'canBuyAndSell',
            type: 'bool',
          },
          {
            name: 'canManageDebt',
            type: 'bool',
          },
          {
            name: 'canManageLiq',
            type: 'bool',
          },
          {
            name: 'canClaimRewards',
            type: 'bool',
          },
          {
            name: 'allowedLegos',
            type: 'uint256[]',
          },
        ],
      },
      {
        name: '_whitelistPerms',
        type: 'tuple',
        components: [
          {
            name: 'canAddPending',
            type: 'bool',
          },
          {
            name: 'canConfirm',
            type: 'bool',
          },
          {
            name: 'canCancel',
            type: 'bool',
          },
          {
            name: 'canRemove',
            type: 'bool',
          },
        ],
      },
      {
        name: '_transferPerms',
        type: 'tuple',
        components: [
          {
            name: 'canTransfer',
            type: 'bool',
          },
          {
            name: 'canCreateCheque',
            type: 'bool',
          },
          {
            name: 'canAddPendingPayee',
            type: 'bool',
          },
          {
            name: 'allowedPayees',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidNewManager',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_manager',
        type: 'address',
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
      {
        name: '_limits',
        type: 'tuple',
        components: [
          {
            name: 'maxUsdValuePerTx',
            type: 'uint256',
          },
          {
            name: 'maxUsdValuePerPeriod',
            type: 'uint256',
          },
          {
            name: 'maxUsdValueLifetime',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
        ],
      },
      {
        name: '_legoPerms',
        type: 'tuple',
        components: [
          {
            name: 'canManageYield',
            type: 'bool',
          },
          {
            name: 'canBuyAndSell',
            type: 'bool',
          },
          {
            name: 'canManageDebt',
            type: 'bool',
          },
          {
            name: 'canManageLiq',
            type: 'bool',
          },
          {
            name: 'canClaimRewards',
            type: 'bool',
          },
          {
            name: 'allowedLegos',
            type: 'uint256[]',
          },
        ],
      },
      {
        name: '_whitelistPerms',
        type: 'tuple',
        components: [
          {
            name: 'canAddPending',
            type: 'bool',
          },
          {
            name: 'canConfirm',
            type: 'bool',
          },
          {
            name: 'canCancel',
            type: 'bool',
          },
          {
            name: 'canRemove',
            type: 'bool',
          },
        ],
      },
      {
        name: '_transferPerms',
        type: 'tuple',
        components: [
          {
            name: 'canTransfer',
            type: 'bool',
          },
          {
            name: 'canCreateCheque',
            type: 'bool',
          },
          {
            name: 'canAddPendingPayee',
            type: 'bool',
          },
          {
            name: 'allowedPayees',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
      {
        name: '_canClaimLoot',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'validateManagerOnUpdate',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_manager',
        type: 'address',
      },
      {
        name: '_limits',
        type: 'tuple',
        components: [
          {
            name: 'maxUsdValuePerTx',
            type: 'uint256',
          },
          {
            name: 'maxUsdValuePerPeriod',
            type: 'uint256',
          },
          {
            name: 'maxUsdValueLifetime',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
        ],
      },
      {
        name: '_legoPerms',
        type: 'tuple',
        components: [
          {
            name: 'canManageYield',
            type: 'bool',
          },
          {
            name: 'canBuyAndSell',
            type: 'bool',
          },
          {
            name: 'canManageDebt',
            type: 'bool',
          },
          {
            name: 'canManageLiq',
            type: 'bool',
          },
          {
            name: 'canClaimRewards',
            type: 'bool',
          },
          {
            name: 'allowedLegos',
            type: 'uint256[]',
          },
        ],
      },
      {
        name: '_whitelistPerms',
        type: 'tuple',
        components: [
          {
            name: 'canAddPending',
            type: 'bool',
          },
          {
            name: 'canConfirm',
            type: 'bool',
          },
          {
            name: 'canCancel',
            type: 'bool',
          },
          {
            name: 'canRemove',
            type: 'bool',
          },
        ],
      },
      {
        name: '_transferPerms',
        type: 'tuple',
        components: [
          {
            name: 'canTransfer',
            type: 'bool',
          },
          {
            name: 'canCreateCheque',
            type: 'bool',
          },
          {
            name: 'canAddPendingPayee',
            type: 'bool',
          },
          {
            name: 'allowedPayees',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
      {
        name: '_canClaimLoot',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'validateGlobalManagerSettings',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_managerPeriod',
        type: 'uint256',
      },
      {
        name: '_startDelay',
        type: 'uint256',
      },
      {
        name: '_activationLength',
        type: 'uint256',
      },
      {
        name: '_canOwnerManage',
        type: 'bool',
      },
      {
        name: '_limits',
        type: 'tuple',
        components: [
          {
            name: 'maxUsdValuePerTx',
            type: 'uint256',
          },
          {
            name: 'maxUsdValuePerPeriod',
            type: 'uint256',
          },
          {
            name: 'maxUsdValueLifetime',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
        ],
      },
      {
        name: '_legoPerms',
        type: 'tuple',
        components: [
          {
            name: 'canManageYield',
            type: 'bool',
          },
          {
            name: 'canBuyAndSell',
            type: 'bool',
          },
          {
            name: 'canManageDebt',
            type: 'bool',
          },
          {
            name: 'canManageLiq',
            type: 'bool',
          },
          {
            name: 'canClaimRewards',
            type: 'bool',
          },
          {
            name: 'allowedLegos',
            type: 'uint256[]',
          },
        ],
      },
      {
        name: '_whitelistPerms',
        type: 'tuple',
        components: [
          {
            name: 'canAddPending',
            type: 'bool',
          },
          {
            name: 'canConfirm',
            type: 'bool',
          },
          {
            name: 'canCancel',
            type: 'bool',
          },
          {
            name: 'canRemove',
            type: 'bool',
          },
        ],
      },
      {
        name: '_transferPerms',
        type: 'tuple',
        components: [
          {
            name: 'canTransfer',
            type: 'bool',
          },
          {
            name: 'canCreateCheque',
            type: 'bool',
          },
          {
            name: 'canAddPendingPayee',
            type: 'bool',
          },
          {
            name: 'allowedPayees',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_allowedAssets',
        type: 'address[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'createDefaultGlobalManagerSettings',
    inputs: [
      {
        name: '_managerPeriod',
        type: 'uint256',
      },
      {
        name: '_minTimeLock',
        type: 'uint256',
      },
      {
        name: '_defaultActivationLength',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'managerPeriod',
            type: 'uint256',
          },
          {
            name: 'startDelay',
            type: 'uint256',
          },
          {
            name: 'activationLength',
            type: 'uint256',
          },
          {
            name: 'canOwnerManage',
            type: 'bool',
          },
          {
            name: 'limits',
            type: 'tuple',
            components: [
              {
                name: 'maxUsdValuePerTx',
                type: 'uint256',
              },
              {
                name: 'maxUsdValuePerPeriod',
                type: 'uint256',
              },
              {
                name: 'maxUsdValueLifetime',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
            ],
          },
          {
            name: 'legoPerms',
            type: 'tuple',
            components: [
              {
                name: 'canManageYield',
                type: 'bool',
              },
              {
                name: 'canBuyAndSell',
                type: 'bool',
              },
              {
                name: 'canManageDebt',
                type: 'bool',
              },
              {
                name: 'canManageLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'allowedLegos',
                type: 'uint256[]',
              },
            ],
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'transferPerms',
            type: 'tuple',
            components: [
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canCreateCheque',
                type: 'bool',
              },
              {
                name: 'canAddPendingPayee',
                type: 'bool',
              },
              {
                name: 'allowedPayees',
                type: 'address[]',
              },
            ],
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'createStarterAgentSettings',
    inputs: [
      {
        name: '_startingAgentActivationLength',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'startBlock',
            type: 'uint256',
          },
          {
            name: 'expiryBlock',
            type: 'uint256',
          },
          {
            name: 'limits',
            type: 'tuple',
            components: [
              {
                name: 'maxUsdValuePerTx',
                type: 'uint256',
              },
              {
                name: 'maxUsdValuePerPeriod',
                type: 'uint256',
              },
              {
                name: 'maxUsdValueLifetime',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
            ],
          },
          {
            name: 'legoPerms',
            type: 'tuple',
            components: [
              {
                name: 'canManageYield',
                type: 'bool',
              },
              {
                name: 'canBuyAndSell',
                type: 'bool',
              },
              {
                name: 'canManageDebt',
                type: 'bool',
              },
              {
                name: 'canManageLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'allowedLegos',
                type: 'uint256[]',
              },
            ],
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'transferPerms',
            type: 'tuple',
            components: [
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canCreateCheque',
                type: 'bool',
              },
              {
                name: 'canAddPendingPayee',
                type: 'bool',
              },
              {
                name: 'allowedPayees',
                type: 'address[]',
              },
            ],
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
          {
            name: 'canClaimLoot',
            type: 'bool',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getManagerSettingsBundle',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_manager',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'owner',
            type: 'address',
          },
          {
            name: 'isManager',
            type: 'bool',
          },
          {
            name: 'timeLock',
            type: 'uint256',
          },
          {
            name: 'walletConfig',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'globalManagerSettings',
            type: 'tuple',
            components: [
              {
                name: 'managerPeriod',
                type: 'uint256',
              },
              {
                name: 'startDelay',
                type: 'uint256',
              },
              {
                name: 'activationLength',
                type: 'uint256',
              },
              {
                name: 'canOwnerManage',
                type: 'bool',
              },
              {
                name: 'limits',
                type: 'tuple',
                components: [
                  {
                    name: 'maxUsdValuePerTx',
                    type: 'uint256',
                  },
                  {
                    name: 'maxUsdValuePerPeriod',
                    type: 'uint256',
                  },
                  {
                    name: 'maxUsdValueLifetime',
                    type: 'uint256',
                  },
                  {
                    name: 'maxNumTxsPerPeriod',
                    type: 'uint256',
                  },
                  {
                    name: 'txCooldownBlocks',
                    type: 'uint256',
                  },
                  {
                    name: 'failOnZeroPrice',
                    type: 'bool',
                  },
                ],
              },
              {
                name: 'legoPerms',
                type: 'tuple',
                components: [
                  {
                    name: 'canManageYield',
                    type: 'bool',
                  },
                  {
                    name: 'canBuyAndSell',
                    type: 'bool',
                  },
                  {
                    name: 'canManageDebt',
                    type: 'bool',
                  },
                  {
                    name: 'canManageLiq',
                    type: 'bool',
                  },
                  {
                    name: 'canClaimRewards',
                    type: 'bool',
                  },
                  {
                    name: 'allowedLegos',
                    type: 'uint256[]',
                  },
                ],
              },
              {
                name: 'whitelistPerms',
                type: 'tuple',
                components: [
                  {
                    name: 'canAddPending',
                    type: 'bool',
                  },
                  {
                    name: 'canConfirm',
                    type: 'bool',
                  },
                  {
                    name: 'canCancel',
                    type: 'bool',
                  },
                  {
                    name: 'canRemove',
                    type: 'bool',
                  },
                ],
              },
              {
                name: 'transferPerms',
                type: 'tuple',
                components: [
                  {
                    name: 'canTransfer',
                    type: 'bool',
                  },
                  {
                    name: 'canCreateCheque',
                    type: 'bool',
                  },
                  {
                    name: 'canAddPendingPayee',
                    type: 'bool',
                  },
                  {
                    name: 'allowedPayees',
                    type: 'address[]',
                  },
                ],
              },
              {
                name: 'allowedAssets',
                type: 'address[]',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'UNDY_HQ',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MIN_MANAGER_PERIOD',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MAX_MANAGER_PERIOD',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MAX_START_DELAY',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MIN_ACTIVATION_LENGTH',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MAX_ACTIVATION_LENGTH',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_minManagerPeriod',
        type: 'uint256',
      },
      {
        name: '_maxManagerPeriod',
        type: 'uint256',
      },
      {
        name: '_minActivationLength',
        type: 'uint256',
      },
      {
        name: '_maxActivationLength',
        type: 'uint256',
      },
      {
        name: '_maxStartDelay',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0xD13E72Dea7a32f487be9a3c6d0B640472Eccb4C8'

export type Contract = {
  calls: {
    isValidNewManager: (
      userWallet: `0x${string}`,
      manager: `0x${string}`,
      startDelay: bigint,
      activationLength: bigint,
      limits: {
        maxUsdValuePerTx: bigint
        maxUsdValuePerPeriod: bigint
        maxUsdValueLifetime: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
      },
      legoPerms: {
        canManageYield: boolean
        canBuyAndSell: boolean
        canManageDebt: boolean
        canManageLiq: boolean
        canClaimRewards: boolean
        allowedLegos: bigint[]
      },
      whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean },
      transferPerms: {
        canTransfer: boolean
        canCreateCheque: boolean
        canAddPendingPayee: boolean
        allowedPayees: `0x${string}`[]
      },
      allowedAssets: `0x${string}`[],
      canClaimLoot: boolean,
    ) => Promise<boolean>
    validateManagerOnUpdate: (
      userWallet: `0x${string}`,
      manager: `0x${string}`,
      limits: {
        maxUsdValuePerTx: bigint
        maxUsdValuePerPeriod: bigint
        maxUsdValueLifetime: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
      },
      legoPerms: {
        canManageYield: boolean
        canBuyAndSell: boolean
        canManageDebt: boolean
        canManageLiq: boolean
        canClaimRewards: boolean
        allowedLegos: bigint[]
      },
      whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean },
      transferPerms: {
        canTransfer: boolean
        canCreateCheque: boolean
        canAddPendingPayee: boolean
        allowedPayees: `0x${string}`[]
      },
      allowedAssets: `0x${string}`[],
      canClaimLoot: boolean,
    ) => Promise<boolean>
    validateGlobalManagerSettings: (
      userWallet: `0x${string}`,
      managerPeriod: bigint,
      startDelay: bigint,
      activationLength: bigint,
      canOwnerManage: boolean,
      limits: {
        maxUsdValuePerTx: bigint
        maxUsdValuePerPeriod: bigint
        maxUsdValueLifetime: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
      },
      legoPerms: {
        canManageYield: boolean
        canBuyAndSell: boolean
        canManageDebt: boolean
        canManageLiq: boolean
        canClaimRewards: boolean
        allowedLegos: bigint[]
      },
      whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean },
      transferPerms: {
        canTransfer: boolean
        canCreateCheque: boolean
        canAddPendingPayee: boolean
        allowedPayees: `0x${string}`[]
      },
      allowedAssets: `0x${string}`[],
    ) => Promise<boolean>
    createDefaultGlobalManagerSettings: (
      managerPeriod: bigint,
      minTimeLock: bigint,
      defaultActivationLength: bigint,
    ) => Promise<{
      managerPeriod: bigint
      startDelay: bigint
      activationLength: bigint
      canOwnerManage: boolean
      limits: {
        maxUsdValuePerTx: bigint
        maxUsdValuePerPeriod: bigint
        maxUsdValueLifetime: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
      }
      legoPerms: {
        canManageYield: boolean
        canBuyAndSell: boolean
        canManageDebt: boolean
        canManageLiq: boolean
        canClaimRewards: boolean
        allowedLegos: bigint[]
      }
      whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean }
      transferPerms: {
        canTransfer: boolean
        canCreateCheque: boolean
        canAddPendingPayee: boolean
        allowedPayees: `0x${string}`[]
      }
      allowedAssets: `0x${string}`[]
    }>
    createStarterAgentSettings: (
      startingAgentActivationLength: bigint,
    ) => Promise<{
      startBlock: bigint
      expiryBlock: bigint
      limits: {
        maxUsdValuePerTx: bigint
        maxUsdValuePerPeriod: bigint
        maxUsdValueLifetime: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
      }
      legoPerms: {
        canManageYield: boolean
        canBuyAndSell: boolean
        canManageDebt: boolean
        canManageLiq: boolean
        canClaimRewards: boolean
        allowedLegos: bigint[]
      }
      whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean }
      transferPerms: {
        canTransfer: boolean
        canCreateCheque: boolean
        canAddPendingPayee: boolean
        allowedPayees: `0x${string}`[]
      }
      allowedAssets: `0x${string}`[]
      canClaimLoot: boolean
    }>
    getManagerSettingsBundle: (
      userWallet: `0x${string}`,
      manager: `0x${string}`,
    ) => Promise<{
      owner: `0x${string}`
      isManager: boolean
      timeLock: bigint
      walletConfig: `0x${string}`
      legoBook: `0x${string}`
      globalManagerSettings: {
        managerPeriod: bigint
        startDelay: bigint
        activationLength: bigint
        canOwnerManage: boolean
        limits: {
          maxUsdValuePerTx: bigint
          maxUsdValuePerPeriod: bigint
          maxUsdValueLifetime: bigint
          maxNumTxsPerPeriod: bigint
          txCooldownBlocks: bigint
          failOnZeroPrice: boolean
        }
        legoPerms: {
          canManageYield: boolean
          canBuyAndSell: boolean
          canManageDebt: boolean
          canManageLiq: boolean
          canClaimRewards: boolean
          allowedLegos: bigint[]
        }
        whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean }
        transferPerms: {
          canTransfer: boolean
          canCreateCheque: boolean
          canAddPendingPayee: boolean
          allowedPayees: `0x${string}`[]
        }
        allowedAssets: `0x${string}`[]
      }
    }>
    UNDY_HQ: () => Promise<`0x${string}`>
    MIN_MANAGER_PERIOD: () => Promise<bigint>
    MAX_MANAGER_PERIOD: () => Promise<bigint>
    MAX_START_DELAY: () => Promise<bigint>
    MIN_ACTIVATION_LENGTH: () => Promise<bigint>
    MAX_ACTIVATION_LENGTH: () => Promise<bigint>
  }
  mutations: {
    addManager: (
      userWallet: `0x${string}`,
      manager: `0x${string}`,
      limits: {
        maxUsdValuePerTx: bigint
        maxUsdValuePerPeriod: bigint
        maxUsdValueLifetime: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
      },
      legoPerms: {
        canManageYield: boolean
        canBuyAndSell: boolean
        canManageDebt: boolean
        canManageLiq: boolean
        canClaimRewards: boolean
        allowedLegos: bigint[]
      },
      whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean },
      transferPerms: {
        canTransfer: boolean
        canCreateCheque: boolean
        canAddPendingPayee: boolean
        allowedPayees: `0x${string}`[]
      },
      allowedAssets: `0x${string}`[],
      canClaimLoot: boolean,
      startDelay?: bigint,
      activationLength?: bigint,
    ) => Promise<boolean>
    updateManager: (
      userWallet: `0x${string}`,
      manager: `0x${string}`,
      limits: {
        maxUsdValuePerTx: bigint
        maxUsdValuePerPeriod: bigint
        maxUsdValueLifetime: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
      },
      legoPerms: {
        canManageYield: boolean
        canBuyAndSell: boolean
        canManageDebt: boolean
        canManageLiq: boolean
        canClaimRewards: boolean
        allowedLegos: bigint[]
      },
      whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean },
      transferPerms: {
        canTransfer: boolean
        canCreateCheque: boolean
        canAddPendingPayee: boolean
        allowedPayees: `0x${string}`[]
      },
      allowedAssets: `0x${string}`[],
      canClaimLoot: boolean,
    ) => Promise<boolean>
    removeManager: (userWallet: `0x${string}`, manager: `0x${string}`) => Promise<boolean>
    adjustManagerActivationLength: (
      userWallet: `0x${string}`,
      manager: `0x${string}`,
      activationLength: bigint,
      shouldResetStartBlock?: boolean,
    ) => Promise<boolean>
    setGlobalManagerSettings: (
      userWallet: `0x${string}`,
      managerPeriod: bigint,
      startDelay: bigint,
      activationLength: bigint,
      canOwnerManage: boolean,
      limits: {
        maxUsdValuePerTx: bigint
        maxUsdValuePerPeriod: bigint
        maxUsdValueLifetime: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
      },
      legoPerms: {
        canManageYield: boolean
        canBuyAndSell: boolean
        canManageDebt: boolean
        canManageLiq: boolean
        canClaimRewards: boolean
        allowedLegos: bigint[]
      },
      whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean },
      transferPerms: {
        canTransfer: boolean
        canCreateCheque: boolean
        canAddPendingPayee: boolean
        allowedPayees: `0x${string}`[]
      },
      allowedAssets: `0x${string}`[],
    ) => Promise<boolean>
  }
  events: {
    GlobalManagerSettingsModified: (
      user: `0x${string}`,
      managerPeriod: bigint,
      startDelay: bigint,
      activationLength: bigint,
      canOwnerManage: boolean,
      maxUsdValuePerTx: bigint,
      maxUsdValuePerPeriod: bigint,
      maxUsdValueLifetime: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      canManageYield: boolean,
      canBuyAndSell: boolean,
      canManageDebt: boolean,
      canManageLiq: boolean,
      canClaimRewards: boolean,
      numAllowedLegos: bigint,
      canAddPendingWhitelist: boolean,
      canConfirmWhitelist: boolean,
      canCancelWhitelist: boolean,
      canRemoveWhitelist: boolean,
      canTransfer: boolean,
      canCreateCheque: boolean,
      canAddPendingPayee: boolean,
      numAllowedRecipients: bigint,
      numAllowedAssets: bigint,
    ) => Promise<void>
    ManagerSettingsModified: (
      user: `0x${string}`,
      manager: `0x${string}`,
      startBlock: bigint,
      expiryBlock: bigint,
      maxUsdValuePerTx: bigint,
      maxUsdValuePerPeriod: bigint,
      maxUsdValueLifetime: bigint,
      maxNumTxsPerPeriod: bigint,
      txCooldownBlocks: bigint,
      failOnZeroPrice: boolean,
      canManageYield: boolean,
      canBuyAndSell: boolean,
      canManageDebt: boolean,
      canManageLiq: boolean,
      canClaimRewards: boolean,
      numAllowedLegos: bigint,
      canAddPendingWhitelist: boolean,
      canConfirmWhitelist: boolean,
      canCancelWhitelist: boolean,
      canRemoveWhitelist: boolean,
      canTransfer: boolean,
      canCreateCheque: boolean,
      canAddPendingPayee: boolean,
      numAllowedRecipients: bigint,
      numAllowedAssets: bigint,
      canClaimLoot: boolean,
    ) => Promise<void>
    ManagerRemoved: (user: `0x${string}`, manager: `0x${string}`) => Promise<void>
    ManagerActivationLengthAdjusted: (
      user: `0x${string}`,
      manager: `0x${string}`,
      activationLength: bigint,
      didRestart: boolean,
    ) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'HighCommand'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'HighCommand' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  isValidNewManager: (...args: ExtractArgs<Contract['calls']['isValidNewManager']>) =>
    getRequest('isValidNewManager', args),
  validateManagerOnUpdate: (...args: ExtractArgs<Contract['calls']['validateManagerOnUpdate']>) =>
    getRequest('validateManagerOnUpdate', args),
  validateGlobalManagerSettings: (...args: ExtractArgs<Contract['calls']['validateGlobalManagerSettings']>) =>
    getRequest('validateGlobalManagerSettings', args),
  createDefaultGlobalManagerSettings: (...args: ExtractArgs<Contract['calls']['createDefaultGlobalManagerSettings']>) =>
    getRequest('createDefaultGlobalManagerSettings', args),
  createStarterAgentSettings: (...args: ExtractArgs<Contract['calls']['createStarterAgentSettings']>) =>
    getRequest('createStarterAgentSettings', args),
  getManagerSettingsBundle: (...args: ExtractArgs<Contract['calls']['getManagerSettingsBundle']>) =>
    getRequest('getManagerSettingsBundle', args),
  UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) => getRequest('UNDY_HQ', args),
  MIN_MANAGER_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_MANAGER_PERIOD']>) =>
    getRequest('MIN_MANAGER_PERIOD', args),
  MAX_MANAGER_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_MANAGER_PERIOD']>) =>
    getRequest('MAX_MANAGER_PERIOD', args),
  MAX_START_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_START_DELAY']>) => getRequest('MAX_START_DELAY', args),
  MIN_ACTIVATION_LENGTH: (...args: ExtractArgs<Contract['calls']['MIN_ACTIVATION_LENGTH']>) =>
    getRequest('MIN_ACTIVATION_LENGTH', args),
  MAX_ACTIVATION_LENGTH: (...args: ExtractArgs<Contract['calls']['MAX_ACTIVATION_LENGTH']>) =>
    getRequest('MAX_ACTIVATION_LENGTH', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'HighCommand' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'HighCommand'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  addManager: getMutation('addManager'),
  updateManager: getMutation('updateManager'),
  removeManager: getMutation('removeManager'),
  adjustManagerActivationLength: getMutation('adjustManagerActivationLength'),
  setGlobalManagerSettings: getMutation('setGlobalManagerSettings'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  isValidNewManager: (
    ...args: ExtractArgs<Contract['calls']['isValidNewManager']>
  ) => Promise<CallReturn<'isValidNewManager'>>
  validateManagerOnUpdate: (
    ...args: ExtractArgs<Contract['calls']['validateManagerOnUpdate']>
  ) => Promise<CallReturn<'validateManagerOnUpdate'>>
  validateGlobalManagerSettings: (
    ...args: ExtractArgs<Contract['calls']['validateGlobalManagerSettings']>
  ) => Promise<CallReturn<'validateGlobalManagerSettings'>>
  createDefaultGlobalManagerSettings: (
    ...args: ExtractArgs<Contract['calls']['createDefaultGlobalManagerSettings']>
  ) => Promise<CallReturn<'createDefaultGlobalManagerSettings'>>
  createStarterAgentSettings: (
    ...args: ExtractArgs<Contract['calls']['createStarterAgentSettings']>
  ) => Promise<CallReturn<'createStarterAgentSettings'>>
  getManagerSettingsBundle: (
    ...args: ExtractArgs<Contract['calls']['getManagerSettingsBundle']>
  ) => Promise<CallReturn<'getManagerSettingsBundle'>>
  UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) => Promise<CallReturn<'UNDY_HQ'>>
  MIN_MANAGER_PERIOD: (
    ...args: ExtractArgs<Contract['calls']['MIN_MANAGER_PERIOD']>
  ) => Promise<CallReturn<'MIN_MANAGER_PERIOD'>>
  MAX_MANAGER_PERIOD: (
    ...args: ExtractArgs<Contract['calls']['MAX_MANAGER_PERIOD']>
  ) => Promise<CallReturn<'MAX_MANAGER_PERIOD'>>
  MAX_START_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MAX_START_DELAY']>
  ) => Promise<CallReturn<'MAX_START_DELAY'>>
  MIN_ACTIVATION_LENGTH: (
    ...args: ExtractArgs<Contract['calls']['MIN_ACTIVATION_LENGTH']>
  ) => Promise<CallReturn<'MIN_ACTIVATION_LENGTH'>>
  MAX_ACTIVATION_LENGTH: (
    ...args: ExtractArgs<Contract['calls']['MAX_ACTIVATION_LENGTH']>
  ) => Promise<CallReturn<'MAX_ACTIVATION_LENGTH'>>
  addManager: (...args: ExtractArgs<Contract['mutations']['addManager']>) => Promise<Address>
  updateManager: (...args: ExtractArgs<Contract['mutations']['updateManager']>) => Promise<Address>
  removeManager: (...args: ExtractArgs<Contract['mutations']['removeManager']>) => Promise<Address>
  adjustManagerActivationLength: (
    ...args: ExtractArgs<Contract['mutations']['adjustManagerActivationLength']>
  ) => Promise<Address>
  setGlobalManagerSettings: (
    ...args: ExtractArgs<Contract['mutations']['setGlobalManagerSettings']>
  ) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    isValidNewManager: (...args: ExtractArgs<Contract['calls']['isValidNewManager']>) =>
      singleQuery(publicClient!, call.isValidNewManager(...args)) as Promise<CallReturn<'isValidNewManager'>>,
    validateManagerOnUpdate: (...args: ExtractArgs<Contract['calls']['validateManagerOnUpdate']>) =>
      singleQuery(publicClient!, call.validateManagerOnUpdate(...args)) as Promise<
        CallReturn<'validateManagerOnUpdate'>
      >,
    validateGlobalManagerSettings: (...args: ExtractArgs<Contract['calls']['validateGlobalManagerSettings']>) =>
      singleQuery(publicClient!, call.validateGlobalManagerSettings(...args)) as Promise<
        CallReturn<'validateGlobalManagerSettings'>
      >,
    createDefaultGlobalManagerSettings: (
      ...args: ExtractArgs<Contract['calls']['createDefaultGlobalManagerSettings']>
    ) =>
      singleQuery(publicClient!, call.createDefaultGlobalManagerSettings(...args)) as Promise<
        CallReturn<'createDefaultGlobalManagerSettings'>
      >,
    createStarterAgentSettings: (...args: ExtractArgs<Contract['calls']['createStarterAgentSettings']>) =>
      singleQuery(publicClient!, call.createStarterAgentSettings(...args)) as Promise<
        CallReturn<'createStarterAgentSettings'>
      >,
    getManagerSettingsBundle: (...args: ExtractArgs<Contract['calls']['getManagerSettingsBundle']>) =>
      singleQuery(publicClient!, call.getManagerSettingsBundle(...args)) as Promise<
        CallReturn<'getManagerSettingsBundle'>
      >,
    UNDY_HQ: (...args: ExtractArgs<Contract['calls']['UNDY_HQ']>) =>
      singleQuery(publicClient!, call.UNDY_HQ(...args)) as Promise<CallReturn<'UNDY_HQ'>>,
    MIN_MANAGER_PERIOD: (...args: ExtractArgs<Contract['calls']['MIN_MANAGER_PERIOD']>) =>
      singleQuery(publicClient!, call.MIN_MANAGER_PERIOD(...args)) as Promise<CallReturn<'MIN_MANAGER_PERIOD'>>,
    MAX_MANAGER_PERIOD: (...args: ExtractArgs<Contract['calls']['MAX_MANAGER_PERIOD']>) =>
      singleQuery(publicClient!, call.MAX_MANAGER_PERIOD(...args)) as Promise<CallReturn<'MAX_MANAGER_PERIOD'>>,
    MAX_START_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_START_DELAY']>) =>
      singleQuery(publicClient!, call.MAX_START_DELAY(...args)) as Promise<CallReturn<'MAX_START_DELAY'>>,
    MIN_ACTIVATION_LENGTH: (...args: ExtractArgs<Contract['calls']['MIN_ACTIVATION_LENGTH']>) =>
      singleQuery(publicClient!, call.MIN_ACTIVATION_LENGTH(...args)) as Promise<CallReturn<'MIN_ACTIVATION_LENGTH'>>,
    MAX_ACTIVATION_LENGTH: (...args: ExtractArgs<Contract['calls']['MAX_ACTIVATION_LENGTH']>) =>
      singleQuery(publicClient!, call.MAX_ACTIVATION_LENGTH(...args)) as Promise<CallReturn<'MAX_ACTIVATION_LENGTH'>>,

    // Mutations
    addManager: (...args: ExtractArgs<Contract['mutations']['addManager']>) =>
      mutate(walletClient!, mutation.addManager)(...args),
    updateManager: (...args: ExtractArgs<Contract['mutations']['updateManager']>) =>
      mutate(walletClient!, mutation.updateManager)(...args),
    removeManager: (...args: ExtractArgs<Contract['mutations']['removeManager']>) =>
      mutate(walletClient!, mutation.removeManager)(...args),
    adjustManagerActivationLength: (...args: ExtractArgs<Contract['mutations']['adjustManagerActivationLength']>) =>
      mutate(walletClient!, mutation.adjustManagerActivationLength)(...args),
    setGlobalManagerSettings: (...args: ExtractArgs<Contract['mutations']['setGlobalManagerSettings']>) =>
      mutate(walletClient!, mutation.setGlobalManagerSettings)(...args),
  }
}
