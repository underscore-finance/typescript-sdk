/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPrice',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPrice',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_staleTime',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPrice',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_staleTime',
        type: 'uint256',
      },
      {
        name: '_oracleRegistry',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPriceAndHasFeed',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPriceAndHasFeed',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_staleTime',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPriceAndHasFeed',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_staleTime',
        type: 'uint256',
      },
      {
        name: '_oracleRegistry',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasPriceFeed',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'oraclePartnerId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setOraclePartnerId',
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getConfiguredAssets',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address[]',
      },
    ],
  },
] as const

export const deployAddress: Address | undefined = undefined

export type Contract = {
  calls: {
    getPrice: (asset: `0x${string}`, staleTime?: bigint, oracleRegistry?: `0x${string}`) => Promise<bigint>
    getPriceAndHasFeed: (
      asset: `0x${string}`,
      staleTime?: bigint,
      oracleRegistry?: `0x${string}`,
    ) => Promise<[bigint, boolean]>
    hasPriceFeed: (asset: `0x${string}`) => Promise<boolean>
    oraclePartnerId: () => Promise<bigint>
    getConfiguredAssets: () => Promise<`0x${string}`[]>
  }
  mutations: {
    setOraclePartnerId: (oracleId: bigint) => Promise<boolean>
  }
  events: {}
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'v0_3_OracleParser'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'v0_3_OracleParser' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) => getRequest('getPrice', args),
  getPriceAndHasFeed: (...args: ExtractArgs<Contract['calls']['getPriceAndHasFeed']>) =>
    getRequest('getPriceAndHasFeed', args),
  hasPriceFeed: (...args: ExtractArgs<Contract['calls']['hasPriceFeed']>) => getRequest('hasPriceFeed', args),
  oraclePartnerId: (...args: ExtractArgs<Contract['calls']['oraclePartnerId']>) => getRequest('oraclePartnerId', args),
  getConfiguredAssets: (...args: ExtractArgs<Contract['calls']['getConfiguredAssets']>) =>
    getRequest('getConfiguredAssets', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'v0_3_OracleParser' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'v0_3_OracleParser'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  setOraclePartnerId: getMutation('setOraclePartnerId'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) => Promise<CallReturn<'getPrice'>>
  getPriceAndHasFeed: (
    ...args: ExtractArgs<Contract['calls']['getPriceAndHasFeed']>
  ) => Promise<CallReturn<'getPriceAndHasFeed'>>
  hasPriceFeed: (...args: ExtractArgs<Contract['calls']['hasPriceFeed']>) => Promise<CallReturn<'hasPriceFeed'>>
  oraclePartnerId: (
    ...args: ExtractArgs<Contract['calls']['oraclePartnerId']>
  ) => Promise<CallReturn<'oraclePartnerId'>>
  getConfiguredAssets: (
    ...args: ExtractArgs<Contract['calls']['getConfiguredAssets']>
  ) => Promise<CallReturn<'getConfiguredAssets'>>
  setOraclePartnerId: (...args: ExtractArgs<Contract['mutations']['setOraclePartnerId']>) => Promise<Address>
}

export function toSdk(deployAddress: Address, publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) =>
      singleQuery(publicClient!, call.getPrice(...args).at(deployAddress)) as Promise<CallReturn<'getPrice'>>,
    getPriceAndHasFeed: (...args: ExtractArgs<Contract['calls']['getPriceAndHasFeed']>) =>
      singleQuery(publicClient!, call.getPriceAndHasFeed(...args).at(deployAddress)) as Promise<
        CallReturn<'getPriceAndHasFeed'>
      >,
    hasPriceFeed: (...args: ExtractArgs<Contract['calls']['hasPriceFeed']>) =>
      singleQuery(publicClient!, call.hasPriceFeed(...args).at(deployAddress)) as Promise<CallReturn<'hasPriceFeed'>>,
    oraclePartnerId: (...args: ExtractArgs<Contract['calls']['oraclePartnerId']>) =>
      singleQuery(publicClient!, call.oraclePartnerId(...args).at(deployAddress)) as Promise<
        CallReturn<'oraclePartnerId'>
      >,
    getConfiguredAssets: (...args: ExtractArgs<Contract['calls']['getConfiguredAssets']>) =>
      singleQuery(publicClient!, call.getConfiguredAssets(...args).at(deployAddress)) as Promise<
        CallReturn<'getConfiguredAssets'>
      >,

    // Mutations
    setOraclePartnerId: (...args: ExtractArgs<Contract['mutations']['setOraclePartnerId']>) =>
      mutate(walletClient!, mutation.setOraclePartnerId, { address: deployAddress })(...args),
  }
}
