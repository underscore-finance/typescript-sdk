/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'NonceIncremented',
    inputs: [
      {
        name: 'oldNonce',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newNonce',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'OwnershipChangeInitiated',
    inputs: [
      {
        name: 'prevOwner',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'OwnershipChangeConfirmed',
    inputs: [
      {
        name: 'prevOwner',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'OwnershipChangeCancelled',
    inputs: [
      {
        name: 'cancelledOwner',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cancelledBy',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'OwnershipTimeLockSet',
    inputs: [
      {
        name: 'numBlocks',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'changeOwnership',
    inputs: [
      {
        name: '_newOwner',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmOwnershipChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelOwnershipChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasPendingOwnerChange',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setOwnershipTimeLock',
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'owner',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'ownershipTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingOwner',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'newOwner',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MIN_OWNERSHIP_TIMELOCK',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'MAX_OWNERSHIP_TIMELOCK',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transferFunds',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transferFunds',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transferFunds',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transferFunds',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_isCheque',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'transferFunds',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_isCheque',
        type: 'bool',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'depositForYield',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_vaultAddr',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'withdrawFromYield',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_vaultToken',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'rebalanceYieldPosition',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'rebalanceYieldPosition',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVaultAddr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'rebalanceYieldPosition',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVaultAddr',
        type: 'address',
      },
      {
        name: '_fromVaultAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'rebalanceYieldPosition',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVaultAddr',
        type: 'address',
      },
      {
        name: '_fromVaultAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'rebalanceYieldPosition',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_fromLegoId',
        type: 'uint256',
      },
      {
        name: '_fromVaultToken',
        type: 'address',
      },
      {
        name: '_toLegoId',
        type: 'uint256',
      },
      {
        name: '_toVaultAddr',
        type: 'address',
      },
      {
        name: '_fromVaultAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'swapTokens',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_swapInstructions',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'swapTokens',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_swapInstructions',
        type: 'tuple[]',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'amountIn',
            type: 'uint256',
          },
          {
            name: 'minAmountOut',
            type: 'uint256',
          },
          {
            name: 'tokenPath',
            type: 'address[]',
          },
          {
            name: 'poolPath',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mintOrRedeemAsset',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mintOrRedeemAsset',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mintOrRedeemAsset',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_minAmountOut',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mintOrRedeemAsset',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_minAmountOut',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'mintOrRedeemAsset',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_minAmountOut',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmMintOrRedeemAsset',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmMintOrRedeemAsset',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmMintOrRedeemAsset',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addCollateral',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addCollateral',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addCollateral',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addCollateral',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeCollateral',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeCollateral',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeCollateral',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeCollateral',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'borrow',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'borrow',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'borrow',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'borrow',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_borrowAsset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'repayDebt',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'repayDebt',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
      {
        name: '_paymentAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'repayDebt',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
      {
        name: '_paymentAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'repayDebt',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_paymentAsset',
        type: 'address',
      },
      {
        name: '_paymentAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimRewards',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_rewardToken',
        type: 'address',
      },
      {
        name: '_rewardAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'convertWethToEth',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'convertWethToEth',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'convertWethToEth',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'convertEthToWeth',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'convertEthToWeth',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'convertEthToWeth',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidityConcentrated',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_legoId',
        type: 'uint256',
      },
      {
        name: '_nftAddr',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_extraData',
        type: 'bytes32',
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'performBatchActions',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_instructions',
        type: 'tuple[]',
        components: [
          {
            name: 'usePrevAmountOut',
            type: 'bool',
          },
          {
            name: 'action',
            type: 'uint8',
          },
          {
            name: 'legoId',
            type: 'uint16',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'target',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'asset2',
            type: 'address',
          },
          {
            name: 'amount2',
            type: 'uint256',
          },
          {
            name: 'minOut1',
            type: 'uint256',
          },
          {
            name: 'minOut2',
            type: 'uint256',
          },
          {
            name: 'tickLower',
            type: 'int24',
          },
          {
            name: 'tickUpper',
            type: 'int24',
          },
          {
            name: 'extraData',
            type: 'bytes32',
          },
          {
            name: 'auxData',
            type: 'bytes32',
          },
          {
            name: 'swapInstructions',
            type: 'tuple[]',
            components: [
              {
                name: 'legoId',
                type: 'uint256',
              },
              {
                name: 'amountIn',
                type: 'uint256',
              },
              {
                name: 'minAmountOut',
                type: 'uint256',
              },
              {
                name: 'tokenPath',
                type: 'address[]',
              },
              {
                name: 'poolPath',
                type: 'address[]',
              },
            ],
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'performBatchActions',
    inputs: [
      {
        name: '_userWallet',
        type: 'address',
      },
      {
        name: '_instructions',
        type: 'tuple[]',
        components: [
          {
            name: 'usePrevAmountOut',
            type: 'bool',
          },
          {
            name: 'action',
            type: 'uint8',
          },
          {
            name: 'legoId',
            type: 'uint16',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'target',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'asset2',
            type: 'address',
          },
          {
            name: 'amount2',
            type: 'uint256',
          },
          {
            name: 'minOut1',
            type: 'uint256',
          },
          {
            name: 'minOut2',
            type: 'uint256',
          },
          {
            name: 'tickLower',
            type: 'int24',
          },
          {
            name: 'tickUpper',
            type: 'int24',
          },
          {
            name: 'extraData',
            type: 'bytes32',
          },
          {
            name: 'auxData',
            type: 'bytes32',
          },
          {
            name: 'swapInstructions',
            type: 'tuple[]',
            components: [
              {
                name: 'legoId',
                type: 'uint256',
              },
              {
                name: 'amountIn',
                type: 'uint256',
              },
              {
                name: 'minAmountOut',
                type: 'uint256',
              },
              {
                name: 'tokenPath',
                type: 'address[]',
              },
              {
                name: 'poolPath',
                type: 'address[]',
              },
            ],
          },
        ],
      },
      {
        name: '_sig',
        type: 'tuple',
        components: [
          {
            name: 'signature',
            type: 'bytes',
          },
          {
            name: 'nonce',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'incrementNonce',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getNonce',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'groupId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'currentNonce',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_groupId',
        type: 'uint256',
      },
      {
        name: '_minTimeLock',
        type: 'uint256',
      },
      {
        name: '_maxTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0x882336D186774FcFaB4812f1B5C81747C4e37aA3'

export type Contract = {
  calls: {
    hasPendingOwnerChange: () => Promise<boolean>
    owner: () => Promise<`0x${string}`>
    ownershipTimeLock: () => Promise<bigint>
    pendingOwner: () => Promise<{ newOwner: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    MIN_OWNERSHIP_TIMELOCK: () => Promise<bigint>
    MAX_OWNERSHIP_TIMELOCK: () => Promise<bigint>
    getNonce: () => Promise<bigint>
    groupId: () => Promise<bigint>
    currentNonce: () => Promise<bigint>
  }
  mutations: {
    changeOwnership: (newOwner: `0x${string}`) => Promise<void>
    confirmOwnershipChange: () => Promise<void>
    cancelOwnershipChange: () => Promise<void>
    setOwnershipTimeLock: (numBlocks: bigint) => Promise<void>
    transferFunds: (
      userWallet: `0x${string}`,
      recipient: `0x${string}`,
      asset?: `0x${string}`,
      amount?: bigint,
      isCheque?: boolean,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint]>
    depositForYield: (
      userWallet: `0x${string}`,
      legoId: bigint,
      asset: `0x${string}`,
      vaultAddr?: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    withdrawFromYield: (
      userWallet: `0x${string}`,
      legoId: bigint,
      vaultToken: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    rebalanceYieldPosition: (
      userWallet: `0x${string}`,
      fromLegoId: bigint,
      fromVaultToken: `0x${string}`,
      toLegoId: bigint,
      toVaultAddr?: `0x${string}`,
      fromVaultAmount?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, `0x${string}`, bigint, bigint]>
    swapTokens: (
      userWallet: `0x${string}`,
      swapInstructions: {
        legoId: bigint
        amountIn: bigint
        minAmountOut: bigint
        tokenPath: `0x${string}`[]
        poolPath: `0x${string}`[]
      }[],
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[`0x${string}`, bigint, `0x${string}`, bigint, bigint]>
    mintOrRedeemAsset: (
      userWallet: `0x${string}`,
      legoId: bigint,
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn?: bigint,
      minAmountOut?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint, boolean, bigint]>
    confirmMintOrRedeemAsset: (
      userWallet: `0x${string}`,
      legoId: bigint,
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint]>
    addCollateral: (
      userWallet: `0x${string}`,
      legoId: bigint,
      asset: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint]>
    removeCollateral: (
      userWallet: `0x${string}`,
      legoId: bigint,
      asset: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint]>
    borrow: (
      userWallet: `0x${string}`,
      legoId: bigint,
      borrowAsset: `0x${string}`,
      amount?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint]>
    repayDebt: (
      userWallet: `0x${string}`,
      legoId: bigint,
      paymentAsset: `0x${string}`,
      paymentAmount?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint]>
    claimRewards: (
      userWallet: `0x${string}`,
      legoId: bigint,
      rewardToken?: `0x${string}`,
      rewardAmount?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint]>
    convertWethToEth: (
      userWallet: `0x${string}`,
      amount?: bigint,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint]>
    convertEthToWeth: (
      userWallet: `0x${string}`,
      amount?: bigint,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint]>
    addLiquidity: (
      userWallet: `0x${string}`,
      legoId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      amountA?: bigint,
      amountB?: bigint,
      minAmountA?: bigint,
      minAmountB?: bigint,
      minLpAmount?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint, bigint, bigint]>
    removeLiquidity: (
      userWallet: `0x${string}`,
      legoId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      lpToken: `0x${string}`,
      lpAmount?: bigint,
      minAmountA?: bigint,
      minAmountB?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint, bigint, bigint]>
    addLiquidityConcentrated: (
      userWallet: `0x${string}`,
      legoId: bigint,
      nftAddr: `0x${string}`,
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      amountA?: bigint,
      amountB?: bigint,
      tickLower?: unknown,
      tickUpper?: unknown,
      minAmountA?: bigint,
      minAmountB?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint, bigint, bigint, bigint]>
    removeLiquidityConcentrated: (
      userWallet: `0x${string}`,
      legoId: bigint,
      nftAddr: `0x${string}`,
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      liqToRemove?: bigint,
      minAmountA?: bigint,
      minAmountB?: bigint,
      extraData?: `0x${string}`,
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<[bigint, bigint, bigint, bigint]>
    performBatchActions: (
      userWallet: `0x${string}`,
      instructions: {
        usePrevAmountOut: boolean
        action: number
        legoId: number
        asset: `0x${string}`
        target: `0x${string}`
        amount: bigint
        asset2: `0x${string}`
        amount2: bigint
        minOut1: bigint
        minOut2: bigint
        tickLower: unknown
        tickUpper: unknown
        extraData: `0x${string}`
        auxData: `0x${string}`
        swapInstructions: {
          legoId: bigint
          amountIn: bigint
          minAmountOut: bigint
          tokenPath: `0x${string}`[]
          poolPath: `0x${string}`[]
        }[]
      }[],
      sig?: { signature: `0x${string}`; nonce: bigint; expiration: bigint },
    ) => Promise<boolean>
    incrementNonce: () => Promise<void>
  }
  events: {
    NonceIncremented: (oldNonce: bigint, newNonce: bigint) => Promise<void>
    OwnershipChangeInitiated: (prevOwner: `0x${string}`, newOwner: `0x${string}`, confirmBlock: bigint) => Promise<void>
    OwnershipChangeConfirmed: (
      prevOwner: `0x${string}`,
      newOwner: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    OwnershipChangeCancelled: (
      cancelledOwner: `0x${string}`,
      cancelledBy: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    OwnershipTimeLockSet: (numBlocks: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'Agent'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'Agent' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  hasPendingOwnerChange: (...args: ExtractArgs<Contract['calls']['hasPendingOwnerChange']>) =>
    getRequest('hasPendingOwnerChange', args),
  owner: (...args: ExtractArgs<Contract['calls']['owner']>) => getRequest('owner', args),
  ownershipTimeLock: (...args: ExtractArgs<Contract['calls']['ownershipTimeLock']>) =>
    getRequest('ownershipTimeLock', args),
  pendingOwner: (...args: ExtractArgs<Contract['calls']['pendingOwner']>) => getRequest('pendingOwner', args),
  MIN_OWNERSHIP_TIMELOCK: (...args: ExtractArgs<Contract['calls']['MIN_OWNERSHIP_TIMELOCK']>) =>
    getRequest('MIN_OWNERSHIP_TIMELOCK', args),
  MAX_OWNERSHIP_TIMELOCK: (...args: ExtractArgs<Contract['calls']['MAX_OWNERSHIP_TIMELOCK']>) =>
    getRequest('MAX_OWNERSHIP_TIMELOCK', args),
  getNonce: (...args: ExtractArgs<Contract['calls']['getNonce']>) => getRequest('getNonce', args),
  groupId: (...args: ExtractArgs<Contract['calls']['groupId']>) => getRequest('groupId', args),
  currentNonce: (...args: ExtractArgs<Contract['calls']['currentNonce']>) => getRequest('currentNonce', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'Agent' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'Agent'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  changeOwnership: getMutation('changeOwnership'),
  confirmOwnershipChange: getMutation('confirmOwnershipChange'),
  cancelOwnershipChange: getMutation('cancelOwnershipChange'),
  setOwnershipTimeLock: getMutation('setOwnershipTimeLock'),
  transferFunds: getMutation('transferFunds'),
  depositForYield: getMutation('depositForYield'),
  withdrawFromYield: getMutation('withdrawFromYield'),
  rebalanceYieldPosition: getMutation('rebalanceYieldPosition'),
  swapTokens: getMutation('swapTokens'),
  mintOrRedeemAsset: getMutation('mintOrRedeemAsset'),
  confirmMintOrRedeemAsset: getMutation('confirmMintOrRedeemAsset'),
  addCollateral: getMutation('addCollateral'),
  removeCollateral: getMutation('removeCollateral'),
  borrow: getMutation('borrow'),
  repayDebt: getMutation('repayDebt'),
  claimRewards: getMutation('claimRewards'),
  convertWethToEth: getMutation('convertWethToEth'),
  convertEthToWeth: getMutation('convertEthToWeth'),
  addLiquidity: getMutation('addLiquidity'),
  removeLiquidity: getMutation('removeLiquidity'),
  addLiquidityConcentrated: getMutation('addLiquidityConcentrated'),
  removeLiquidityConcentrated: getMutation('removeLiquidityConcentrated'),
  performBatchActions: getMutation('performBatchActions'),
  incrementNonce: getMutation('incrementNonce'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  hasPendingOwnerChange: (
    ...args: ExtractArgs<Contract['calls']['hasPendingOwnerChange']>
  ) => Promise<CallReturn<'hasPendingOwnerChange'>>
  owner: (...args: ExtractArgs<Contract['calls']['owner']>) => Promise<CallReturn<'owner'>>
  ownershipTimeLock: (
    ...args: ExtractArgs<Contract['calls']['ownershipTimeLock']>
  ) => Promise<CallReturn<'ownershipTimeLock'>>
  pendingOwner: (...args: ExtractArgs<Contract['calls']['pendingOwner']>) => Promise<CallReturn<'pendingOwner'>>
  MIN_OWNERSHIP_TIMELOCK: (
    ...args: ExtractArgs<Contract['calls']['MIN_OWNERSHIP_TIMELOCK']>
  ) => Promise<CallReturn<'MIN_OWNERSHIP_TIMELOCK'>>
  MAX_OWNERSHIP_TIMELOCK: (
    ...args: ExtractArgs<Contract['calls']['MAX_OWNERSHIP_TIMELOCK']>
  ) => Promise<CallReturn<'MAX_OWNERSHIP_TIMELOCK'>>
  getNonce: (...args: ExtractArgs<Contract['calls']['getNonce']>) => Promise<CallReturn<'getNonce'>>
  groupId: (...args: ExtractArgs<Contract['calls']['groupId']>) => Promise<CallReturn<'groupId'>>
  currentNonce: (...args: ExtractArgs<Contract['calls']['currentNonce']>) => Promise<CallReturn<'currentNonce'>>
  changeOwnership: (...args: ExtractArgs<Contract['mutations']['changeOwnership']>) => Promise<Address>
  confirmOwnershipChange: (...args: ExtractArgs<Contract['mutations']['confirmOwnershipChange']>) => Promise<Address>
  cancelOwnershipChange: (...args: ExtractArgs<Contract['mutations']['cancelOwnershipChange']>) => Promise<Address>
  setOwnershipTimeLock: (...args: ExtractArgs<Contract['mutations']['setOwnershipTimeLock']>) => Promise<Address>
  transferFunds: (...args: ExtractArgs<Contract['mutations']['transferFunds']>) => Promise<Address>
  depositForYield: (...args: ExtractArgs<Contract['mutations']['depositForYield']>) => Promise<Address>
  withdrawFromYield: (...args: ExtractArgs<Contract['mutations']['withdrawFromYield']>) => Promise<Address>
  rebalanceYieldPosition: (...args: ExtractArgs<Contract['mutations']['rebalanceYieldPosition']>) => Promise<Address>
  swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) => Promise<Address>
  mintOrRedeemAsset: (...args: ExtractArgs<Contract['mutations']['mintOrRedeemAsset']>) => Promise<Address>
  confirmMintOrRedeemAsset: (
    ...args: ExtractArgs<Contract['mutations']['confirmMintOrRedeemAsset']>
  ) => Promise<Address>
  addCollateral: (...args: ExtractArgs<Contract['mutations']['addCollateral']>) => Promise<Address>
  removeCollateral: (...args: ExtractArgs<Contract['mutations']['removeCollateral']>) => Promise<Address>
  borrow: (...args: ExtractArgs<Contract['mutations']['borrow']>) => Promise<Address>
  repayDebt: (...args: ExtractArgs<Contract['mutations']['repayDebt']>) => Promise<Address>
  claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) => Promise<Address>
  convertWethToEth: (...args: ExtractArgs<Contract['mutations']['convertWethToEth']>) => Promise<Address>
  convertEthToWeth: (...args: ExtractArgs<Contract['mutations']['convertEthToWeth']>) => Promise<Address>
  addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) => Promise<Address>
  removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) => Promise<Address>
  addLiquidityConcentrated: (
    ...args: ExtractArgs<Contract['mutations']['addLiquidityConcentrated']>
  ) => Promise<Address>
  removeLiquidityConcentrated: (
    ...args: ExtractArgs<Contract['mutations']['removeLiquidityConcentrated']>
  ) => Promise<Address>
  performBatchActions: (...args: ExtractArgs<Contract['mutations']['performBatchActions']>) => Promise<Address>
  incrementNonce: (...args: ExtractArgs<Contract['mutations']['incrementNonce']>) => Promise<Address>
}

export function toSdk(deployAddress: Address, publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    hasPendingOwnerChange: (...args: ExtractArgs<Contract['calls']['hasPendingOwnerChange']>) =>
      singleQuery(publicClient!, call.hasPendingOwnerChange(...args).at(deployAddress)) as Promise<
        CallReturn<'hasPendingOwnerChange'>
      >,
    owner: (...args: ExtractArgs<Contract['calls']['owner']>) =>
      singleQuery(publicClient!, call.owner(...args).at(deployAddress)) as Promise<CallReturn<'owner'>>,
    ownershipTimeLock: (...args: ExtractArgs<Contract['calls']['ownershipTimeLock']>) =>
      singleQuery(publicClient!, call.ownershipTimeLock(...args).at(deployAddress)) as Promise<
        CallReturn<'ownershipTimeLock'>
      >,
    pendingOwner: (...args: ExtractArgs<Contract['calls']['pendingOwner']>) =>
      singleQuery(publicClient!, call.pendingOwner(...args).at(deployAddress)) as Promise<CallReturn<'pendingOwner'>>,
    MIN_OWNERSHIP_TIMELOCK: (...args: ExtractArgs<Contract['calls']['MIN_OWNERSHIP_TIMELOCK']>) =>
      singleQuery(publicClient!, call.MIN_OWNERSHIP_TIMELOCK(...args).at(deployAddress)) as Promise<
        CallReturn<'MIN_OWNERSHIP_TIMELOCK'>
      >,
    MAX_OWNERSHIP_TIMELOCK: (...args: ExtractArgs<Contract['calls']['MAX_OWNERSHIP_TIMELOCK']>) =>
      singleQuery(publicClient!, call.MAX_OWNERSHIP_TIMELOCK(...args).at(deployAddress)) as Promise<
        CallReturn<'MAX_OWNERSHIP_TIMELOCK'>
      >,
    getNonce: (...args: ExtractArgs<Contract['calls']['getNonce']>) =>
      singleQuery(publicClient!, call.getNonce(...args).at(deployAddress)) as Promise<CallReturn<'getNonce'>>,
    groupId: (...args: ExtractArgs<Contract['calls']['groupId']>) =>
      singleQuery(publicClient!, call.groupId(...args).at(deployAddress)) as Promise<CallReturn<'groupId'>>,
    currentNonce: (...args: ExtractArgs<Contract['calls']['currentNonce']>) =>
      singleQuery(publicClient!, call.currentNonce(...args).at(deployAddress)) as Promise<CallReturn<'currentNonce'>>,

    // Mutations
    changeOwnership: (...args: ExtractArgs<Contract['mutations']['changeOwnership']>) =>
      mutate(walletClient!, mutation.changeOwnership, { address: deployAddress })(...args),
    confirmOwnershipChange: (...args: ExtractArgs<Contract['mutations']['confirmOwnershipChange']>) =>
      mutate(walletClient!, mutation.confirmOwnershipChange, { address: deployAddress })(...args),
    cancelOwnershipChange: (...args: ExtractArgs<Contract['mutations']['cancelOwnershipChange']>) =>
      mutate(walletClient!, mutation.cancelOwnershipChange, { address: deployAddress })(...args),
    setOwnershipTimeLock: (...args: ExtractArgs<Contract['mutations']['setOwnershipTimeLock']>) =>
      mutate(walletClient!, mutation.setOwnershipTimeLock, { address: deployAddress })(...args),
    transferFunds: (...args: ExtractArgs<Contract['mutations']['transferFunds']>) =>
      mutate(walletClient!, mutation.transferFunds, { address: deployAddress })(...args),
    depositForYield: (...args: ExtractArgs<Contract['mutations']['depositForYield']>) =>
      mutate(walletClient!, mutation.depositForYield, { address: deployAddress })(...args),
    withdrawFromYield: (...args: ExtractArgs<Contract['mutations']['withdrawFromYield']>) =>
      mutate(walletClient!, mutation.withdrawFromYield, { address: deployAddress })(...args),
    rebalanceYieldPosition: (...args: ExtractArgs<Contract['mutations']['rebalanceYieldPosition']>) =>
      mutate(walletClient!, mutation.rebalanceYieldPosition, { address: deployAddress })(...args),
    swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) =>
      mutate(walletClient!, mutation.swapTokens, { address: deployAddress })(...args),
    mintOrRedeemAsset: (...args: ExtractArgs<Contract['mutations']['mintOrRedeemAsset']>) =>
      mutate(walletClient!, mutation.mintOrRedeemAsset, { address: deployAddress })(...args),
    confirmMintOrRedeemAsset: (...args: ExtractArgs<Contract['mutations']['confirmMintOrRedeemAsset']>) =>
      mutate(walletClient!, mutation.confirmMintOrRedeemAsset, { address: deployAddress })(...args),
    addCollateral: (...args: ExtractArgs<Contract['mutations']['addCollateral']>) =>
      mutate(walletClient!, mutation.addCollateral, { address: deployAddress })(...args),
    removeCollateral: (...args: ExtractArgs<Contract['mutations']['removeCollateral']>) =>
      mutate(walletClient!, mutation.removeCollateral, { address: deployAddress })(...args),
    borrow: (...args: ExtractArgs<Contract['mutations']['borrow']>) =>
      mutate(walletClient!, mutation.borrow, { address: deployAddress })(...args),
    repayDebt: (...args: ExtractArgs<Contract['mutations']['repayDebt']>) =>
      mutate(walletClient!, mutation.repayDebt, { address: deployAddress })(...args),
    claimRewards: (...args: ExtractArgs<Contract['mutations']['claimRewards']>) =>
      mutate(walletClient!, mutation.claimRewards, { address: deployAddress })(...args),
    convertWethToEth: (...args: ExtractArgs<Contract['mutations']['convertWethToEth']>) =>
      mutate(walletClient!, mutation.convertWethToEth, { address: deployAddress })(...args),
    convertEthToWeth: (...args: ExtractArgs<Contract['mutations']['convertEthToWeth']>) =>
      mutate(walletClient!, mutation.convertEthToWeth, { address: deployAddress })(...args),
    addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) =>
      mutate(walletClient!, mutation.addLiquidity, { address: deployAddress })(...args),
    removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) =>
      mutate(walletClient!, mutation.removeLiquidity, { address: deployAddress })(...args),
    addLiquidityConcentrated: (...args: ExtractArgs<Contract['mutations']['addLiquidityConcentrated']>) =>
      mutate(walletClient!, mutation.addLiquidityConcentrated, { address: deployAddress })(...args),
    removeLiquidityConcentrated: (...args: ExtractArgs<Contract['mutations']['removeLiquidityConcentrated']>) =>
      mutate(walletClient!, mutation.removeLiquidityConcentrated, { address: deployAddress })(...args),
    performBatchActions: (...args: ExtractArgs<Contract['mutations']['performBatchActions']>) =>
      mutate(walletClient!, mutation.performBatchActions, { address: deployAddress })(...args),
    incrementNonce: (...args: ExtractArgs<Contract['mutations']['incrementNonce']>) =>
      mutate(walletClient!, mutation.incrementNonce, { address: deployAddress })(...args),
  }
}
