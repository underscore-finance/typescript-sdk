/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'mainAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'configAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'owner',
        type: 'address',
      },
      {
        indexed: false,
        name: 'agent',
        type: 'address',
      },
      {
        indexed: false,
        name: 'ambassador',
        type: 'address',
      },
      {
        indexed: false,
        name: 'creator',
        type: 'address',
      },
    ],
    name: 'UserWalletCreated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'agent',
        type: 'address',
      },
      {
        indexed: true,
        name: 'owner',
        type: 'address',
      },
      {
        indexed: false,
        name: 'creator',
        type: 'address',
      },
    ],
    name: 'AgentCreated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'addressType',
        type: 'uint256',
      },
    ],
    name: 'AddressUpdateInitiated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'addressType',
        type: 'uint256',
      },
    ],
    name: 'AddressUpdateConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'cancelledTemplate',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'addressType',
        type: 'uint256',
      },
    ],
    name: 'AddressUpdateCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'delayBlocks',
        type: 'uint256',
      },
    ],
    name: 'AddressChangeDelaySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'shouldWhitelist',
        type: 'bool',
      },
    ],
    name: 'WhitelistSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'shouldEnforce',
        type: 'bool',
      },
    ],
    name: 'ShouldEnforceWhitelistSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'numAllowed',
        type: 'uint256',
      },
    ],
    name: 'NumUserWalletsAllowedSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'numAllowed',
        type: 'uint256',
      },
    ],
    name: 'NumAgentsAllowedSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'agentAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'shouldBlacklist',
        type: 'bool',
      },
    ],
    name: 'AgentBlacklistSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'canCancel',
        type: 'bool',
      },
    ],
    name: 'CanCriticalCancelSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: false,
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'TrialFundsDataSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'user',
        type: 'address',
      },
      {
        indexed: true,
        name: 'ambassador',
        type: 'address',
      },
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: false,
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'ratio',
        type: 'uint256',
      },
    ],
    name: 'AmbassadorYieldBonusPaid',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'ratio',
        type: 'uint256',
      },
    ],
    name: 'AmbassadorBonusRatioSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'asset',
        type: 'address',
      },
      {
        indexed: true,
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: false,
        name: 'balance',
        type: 'uint256',
      },
    ],
    name: 'AgentFactoryFundsRecovered',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'isActivated',
        type: 'bool',
      },
    ],
    name: 'AgentFactoryActivated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevGov',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeInitiated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevGov',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'cancelledGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'delayBlocks',
        type: 'uint256',
      },
    ],
    name: 'GovChangeDelaySet',
    type: 'event',
  },
  {
    inputs: [
      {
        name: '_address',
        type: 'address',
      },
    ],
    name: 'canGovern',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasPendingGovChange',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    name: 'changeGovernance',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmGovernanceChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelGovernanceChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    name: 'setGovernanceChangeDelay',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'governance',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingGov',
    outputs: [
      {
        components: [
          {
            name: 'newGov',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'govChangeDelay',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MIN_GOV_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_GOV_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'isUserWallet',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'createUserWallet',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
    ],
    name: 'createUserWallet',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_ambassador',
        type: 'address',
      },
    ],
    name: 'createUserWallet',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_ambassador',
        type: 'address',
      },
      {
        name: '_shouldUseTrialFunds',
        type: 'bool',
      },
    ],
    name: 'createUserWallet',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'isAgent',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'createAgent',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
    ],
    name: 'createAgent',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    name: 'initiateUserWalletTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmUserWalletTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelUserWalletTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getUserWalletTemplateAddr',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getUserWalletTemplateInfo',
    outputs: [
      {
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPendingUserWalletTemplateUpdate',
    outputs: [
      {
        components: [
          {
            name: 'newAddr',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasPendingUserWalletTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    name: 'initiateUserWalletConfigTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmUserWalletConfigTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelUserWalletConfigTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getUserWalletConfigTemplateAddr',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getUserWalletConfigTemplateInfo',
    outputs: [
      {
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPendingUserWalletConfigTemplateUpdate',
    outputs: [
      {
        components: [
          {
            name: 'newAddr',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasPendingUserWalletConfigTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    name: 'initiateAgentTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmAgentTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelAgentTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAgentTemplateAddr',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAgentTemplateInfo',
    outputs: [
      {
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPendingAgentTemplateUpdate',
    outputs: [
      {
        components: [
          {
            name: 'newAddr',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasPendingAgentTemplateUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    name: 'setAddressChangeDelay',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
      {
        name: '_shouldWhitelist',
        type: 'bool',
      },
    ],
    name: 'setWhitelist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_shouldEnforce',
        type: 'bool',
      },
    ],
    name: 'setShouldEnforceWhitelist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'setNumUserWalletsAllowed',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numAllowed',
        type: 'uint256',
      },
    ],
    name: 'setNumUserWalletsAllowed',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'setNumAgentsAllowed',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numAllowed',
        type: 'uint256',
      },
    ],
    name: 'setNumAgentsAllowed',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_agentAddr',
        type: 'address',
      },
      {
        name: '_shouldBlacklist',
        type: 'bool',
      },
    ],
    name: 'setAgentBlacklist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'canCancelCriticalAction',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
      {
        name: '_canCancel',
        type: 'bool',
      },
    ],
    name: 'setCanCriticalCancel',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'setTrialFundsData',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_wallets',
        type: 'address[]',
      },
    ],
    name: 'clawBackTrialFunds',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            name: 'wallet',
            type: 'address',
          },
          {
            components: [
              {
                name: 'legoId',
                type: 'uint256',
              },
              {
                name: 'vaultToken',
                type: 'address',
              },
            ],
            name: 'opportunities',
            type: 'tuple[]',
          },
        ],
        name: '_recoveries',
        type: 'tuple[]',
      },
    ],
    name: 'clawBackTrialFundsLegacy',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_ambassador',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'payAmbassadorYieldBonus',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_bonusRatio',
        type: 'uint256',
      },
    ],
    name: 'setAmbassadorBonusRatio',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    name: 'initiateDefaultAgentUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmDefaultAgentUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelDefaultAgentUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getDefaultAgentAddr',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getDefaultAgentInfo',
    outputs: [
      {
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPendingDefaultAgentUpdate',
    outputs: [
      {
        components: [
          {
            name: 'newAddr',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasPendingDefaultAgentUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    name: 'recoverFundsFromAgentFactory',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_shouldActivate',
        type: 'bool',
      },
    ],
    name: 'activate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'isUserWalletLocal',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'numUserWallets',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'isAgentLocal',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'numAgents',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    name: 'addressInfo',
    outputs: [
      {
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    name: 'pendingAddress',
    outputs: [
      {
        components: [
          {
            name: 'newAddr',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'addressChangeDelay',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ambassadorBonusRatio',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'trialFundsData',
    outputs: [
      {
        components: [
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'numUserWalletsAllowed',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'numAgentsAllowed',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'whitelist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'shouldEnforceWhitelist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'agentBlacklist',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'canCriticalCancel',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'isActivated',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ADDY_REGISTRY',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'WETH_ADDR',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MIN_OWNER_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_OWNER_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MIN_ADDRESS_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_ADDRESS_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addyRegistry',
        type: 'address',
      },
      {
        name: '_wethAddr',
        type: 'address',
      },
      {
        name: '_userWalletTemplate',
        type: 'address',
      },
      {
        name: '_userConfigTemplate',
        type: 'address',
      },
      {
        name: '_agentTemplate',
        type: 'address',
      },
      {
        name: '_defaultAgent',
        type: 'address',
      },
      {
        name: '_minChangeDelay',
        type: 'uint256',
      },
      {
        name: '_maxChangeDelay',
        type: 'uint256',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
] as const

export const deployAddress: Address | undefined = '0x7C4be37a65E8410c0fb03d62059E3cB04f78c565'

export type Contract = {
  calls: {
    canGovern: (address: `0x${string}`) => Promise<boolean>
    hasPendingGovChange: () => Promise<boolean>
    governance: () => Promise<`0x${string}`>
    pendingGov: () => Promise<{ newGov: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    govChangeDelay: () => Promise<bigint>
    MIN_GOV_CHANGE_DELAY: () => Promise<bigint>
    MAX_GOV_CHANGE_DELAY: () => Promise<bigint>
    isUserWallet: (addr: `0x${string}`) => Promise<boolean>
    isAgent: (addr: `0x${string}`) => Promise<boolean>
    getUserWalletTemplateAddr: () => Promise<`0x${string}`>
    getUserWalletTemplateInfo: () => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint }>
    getPendingUserWalletTemplateUpdate: () => Promise<{
      newAddr: `0x${string}`
      initiatedBlock: bigint
      confirmBlock: bigint
    }>
    hasPendingUserWalletTemplateUpdate: () => Promise<boolean>
    getUserWalletConfigTemplateAddr: () => Promise<`0x${string}`>
    getUserWalletConfigTemplateInfo: () => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint }>
    getPendingUserWalletConfigTemplateUpdate: () => Promise<{
      newAddr: `0x${string}`
      initiatedBlock: bigint
      confirmBlock: bigint
    }>
    hasPendingUserWalletConfigTemplateUpdate: () => Promise<boolean>
    getAgentTemplateAddr: () => Promise<`0x${string}`>
    getAgentTemplateInfo: () => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint }>
    getPendingAgentTemplateUpdate: () => Promise<{
      newAddr: `0x${string}`
      initiatedBlock: bigint
      confirmBlock: bigint
    }>
    hasPendingAgentTemplateUpdate: () => Promise<boolean>
    canCancelCriticalAction: (addr: `0x${string}`) => Promise<boolean>
    getDefaultAgentAddr: () => Promise<`0x${string}`>
    getDefaultAgentInfo: () => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint }>
    getPendingDefaultAgentUpdate: () => Promise<{
      newAddr: `0x${string}`
      initiatedBlock: bigint
      confirmBlock: bigint
    }>
    hasPendingDefaultAgentUpdate: () => Promise<boolean>
    isUserWalletLocal: (arg0: `0x${string}`) => Promise<boolean>
    numUserWallets: () => Promise<bigint>
    isAgentLocal: (arg0: `0x${string}`) => Promise<boolean>
    numAgents: () => Promise<bigint>
    addressInfo: (arg0: bigint) => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint }>
    pendingAddress: (arg0: bigint) => Promise<{ newAddr: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    addressChangeDelay: () => Promise<bigint>
    ambassadorBonusRatio: () => Promise<bigint>
    trialFundsData: () => Promise<{ asset: `0x${string}`; amount: bigint }>
    numUserWalletsAllowed: () => Promise<bigint>
    numAgentsAllowed: () => Promise<bigint>
    whitelist: (arg0: `0x${string}`) => Promise<boolean>
    shouldEnforceWhitelist: () => Promise<boolean>
    agentBlacklist: (arg0: `0x${string}`) => Promise<boolean>
    canCriticalCancel: (arg0: `0x${string}`) => Promise<boolean>
    isActivated: () => Promise<boolean>
    ADDY_REGISTRY: () => Promise<`0x${string}`>
    WETH_ADDR: () => Promise<`0x${string}`>
    MIN_OWNER_CHANGE_DELAY: () => Promise<bigint>
    MAX_OWNER_CHANGE_DELAY: () => Promise<bigint>
    MIN_ADDRESS_CHANGE_DELAY: () => Promise<bigint>
    MAX_ADDRESS_CHANGE_DELAY: () => Promise<bigint>
  }
  mutations: {
    changeGovernance: (newGov: `0x${string}`) => Promise<void>
    confirmGovernanceChange: () => Promise<void>
    cancelGovernanceChange: () => Promise<void>
    setGovernanceChangeDelay: (numBlocks: bigint) => Promise<void>
    createUserWallet: (
      owner?: `0x${string}`,
      ambassador?: `0x${string}`,
      shouldUseTrialFunds?: boolean,
    ) => Promise<`0x${string}`>
    createAgent: (owner?: `0x${string}`) => Promise<`0x${string}`>
    initiateUserWalletTemplateUpdate: (newAddr: `0x${string}`) => Promise<boolean>
    confirmUserWalletTemplateUpdate: () => Promise<boolean>
    cancelUserWalletTemplateUpdate: () => Promise<boolean>
    initiateUserWalletConfigTemplateUpdate: (newAddr: `0x${string}`) => Promise<boolean>
    confirmUserWalletConfigTemplateUpdate: () => Promise<boolean>
    cancelUserWalletConfigTemplateUpdate: () => Promise<boolean>
    initiateAgentTemplateUpdate: (newAddr: `0x${string}`) => Promise<boolean>
    confirmAgentTemplateUpdate: () => Promise<boolean>
    cancelAgentTemplateUpdate: () => Promise<boolean>
    setAddressChangeDelay: (numBlocks: bigint) => Promise<void>
    setWhitelist: (addr: `0x${string}`, shouldWhitelist: boolean) => Promise<boolean>
    setShouldEnforceWhitelist: (shouldEnforce: boolean) => Promise<boolean>
    setNumUserWalletsAllowed: (numAllowed?: bigint) => Promise<boolean>
    setNumAgentsAllowed: (numAllowed?: bigint) => Promise<boolean>
    setAgentBlacklist: (agentAddr: `0x${string}`, shouldBlacklist: boolean) => Promise<boolean>
    setCanCriticalCancel: (addr: `0x${string}`, canCancel: boolean) => Promise<boolean>
    setTrialFundsData: (asset: `0x${string}`, amount: bigint) => Promise<boolean>
    clawBackTrialFunds: (wallets: `0x${string}`[]) => Promise<boolean>
    clawBackTrialFundsLegacy: (
      recoveries: { wallet: `0x${string}`; opportunities: { legoId: bigint; vaultToken: `0x${string}` }[] }[],
    ) => Promise<boolean>
    payAmbassadorYieldBonus: (ambassador: `0x${string}`, asset: `0x${string}`, amount: bigint) => Promise<boolean>
    setAmbassadorBonusRatio: (bonusRatio: bigint) => Promise<boolean>
    initiateDefaultAgentUpdate: (newAddr: `0x${string}`) => Promise<boolean>
    confirmDefaultAgentUpdate: () => Promise<boolean>
    cancelDefaultAgentUpdate: () => Promise<boolean>
    recoverFundsFromAgentFactory: (asset: `0x${string}`, recipient: `0x${string}`) => Promise<boolean>
    activate: (shouldActivate: boolean) => Promise<void>
  }
  events: {
    UserWalletCreated: (
      mainAddr: `0x${string}`,
      configAddr: `0x${string}`,
      owner: `0x${string}`,
      agent: `0x${string}`,
      ambassador: `0x${string}`,
      creator: `0x${string}`,
    ) => Promise<void>
    AgentCreated: (agent: `0x${string}`, owner: `0x${string}`, creator: `0x${string}`) => Promise<void>
    AddressUpdateInitiated: (
      prevAddr: `0x${string}`,
      newAddr: `0x${string}`,
      confirmBlock: bigint,
      addressType: bigint,
    ) => Promise<void>
    AddressUpdateConfirmed: (
      prevAddr: `0x${string}`,
      newAddr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      addressType: bigint,
    ) => Promise<void>
    AddressUpdateCancelled: (
      cancelledTemplate: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      addressType: bigint,
    ) => Promise<void>
    AddressChangeDelaySet: (delayBlocks: bigint) => Promise<void>
    WhitelistSet: (addr: `0x${string}`, shouldWhitelist: boolean) => Promise<void>
    ShouldEnforceWhitelistSet: (shouldEnforce: boolean) => Promise<void>
    NumUserWalletsAllowedSet: (numAllowed: bigint) => Promise<void>
    NumAgentsAllowedSet: (numAllowed: bigint) => Promise<void>
    AgentBlacklistSet: (agentAddr: `0x${string}`, shouldBlacklist: boolean) => Promise<void>
    CanCriticalCancelSet: (addr: `0x${string}`, canCancel: boolean) => Promise<void>
    TrialFundsDataSet: (asset: `0x${string}`, amount: bigint) => Promise<void>
    AmbassadorYieldBonusPaid: (
      user: `0x${string}`,
      ambassador: `0x${string}`,
      asset: `0x${string}`,
      amount: bigint,
      ratio: bigint,
    ) => Promise<void>
    AmbassadorBonusRatioSet: (ratio: bigint) => Promise<void>
    AgentFactoryFundsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, balance: bigint) => Promise<void>
    AgentFactoryActivated: (isActivated: boolean) => Promise<void>
    GovChangeInitiated: (prevGov: `0x${string}`, newGov: `0x${string}`, confirmBlock: bigint) => Promise<void>
    GovChangeConfirmed: (
      prevGov: `0x${string}`,
      newGov: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    GovChangeCancelled: (cancelledGov: `0x${string}`, initiatedBlock: bigint, confirmBlock: bigint) => Promise<void>
    GovChangeDelaySet: (delayBlocks: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'AgentFactory'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'AgentFactory' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => getRequest('canGovern', args),
  hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
    getRequest('hasPendingGovChange', args),
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => getRequest('governance', args),
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => getRequest('pendingGov', args),
  govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) => getRequest('govChangeDelay', args),
  MIN_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>) =>
    getRequest('MIN_GOV_CHANGE_DELAY', args),
  MAX_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>) =>
    getRequest('MAX_GOV_CHANGE_DELAY', args),
  isUserWallet: (...args: ExtractArgs<Contract['calls']['isUserWallet']>) => getRequest('isUserWallet', args),
  isAgent: (...args: ExtractArgs<Contract['calls']['isAgent']>) => getRequest('isAgent', args),
  getUserWalletTemplateAddr: (...args: ExtractArgs<Contract['calls']['getUserWalletTemplateAddr']>) =>
    getRequest('getUserWalletTemplateAddr', args),
  getUserWalletTemplateInfo: (...args: ExtractArgs<Contract['calls']['getUserWalletTemplateInfo']>) =>
    getRequest('getUserWalletTemplateInfo', args),
  getPendingUserWalletTemplateUpdate: (...args: ExtractArgs<Contract['calls']['getPendingUserWalletTemplateUpdate']>) =>
    getRequest('getPendingUserWalletTemplateUpdate', args),
  hasPendingUserWalletTemplateUpdate: (...args: ExtractArgs<Contract['calls']['hasPendingUserWalletTemplateUpdate']>) =>
    getRequest('hasPendingUserWalletTemplateUpdate', args),
  getUserWalletConfigTemplateAddr: (...args: ExtractArgs<Contract['calls']['getUserWalletConfigTemplateAddr']>) =>
    getRequest('getUserWalletConfigTemplateAddr', args),
  getUserWalletConfigTemplateInfo: (...args: ExtractArgs<Contract['calls']['getUserWalletConfigTemplateInfo']>) =>
    getRequest('getUserWalletConfigTemplateInfo', args),
  getPendingUserWalletConfigTemplateUpdate: (
    ...args: ExtractArgs<Contract['calls']['getPendingUserWalletConfigTemplateUpdate']>
  ) => getRequest('getPendingUserWalletConfigTemplateUpdate', args),
  hasPendingUserWalletConfigTemplateUpdate: (
    ...args: ExtractArgs<Contract['calls']['hasPendingUserWalletConfigTemplateUpdate']>
  ) => getRequest('hasPendingUserWalletConfigTemplateUpdate', args),
  getAgentTemplateAddr: (...args: ExtractArgs<Contract['calls']['getAgentTemplateAddr']>) =>
    getRequest('getAgentTemplateAddr', args),
  getAgentTemplateInfo: (...args: ExtractArgs<Contract['calls']['getAgentTemplateInfo']>) =>
    getRequest('getAgentTemplateInfo', args),
  getPendingAgentTemplateUpdate: (...args: ExtractArgs<Contract['calls']['getPendingAgentTemplateUpdate']>) =>
    getRequest('getPendingAgentTemplateUpdate', args),
  hasPendingAgentTemplateUpdate: (...args: ExtractArgs<Contract['calls']['hasPendingAgentTemplateUpdate']>) =>
    getRequest('hasPendingAgentTemplateUpdate', args),
  canCancelCriticalAction: (...args: ExtractArgs<Contract['calls']['canCancelCriticalAction']>) =>
    getRequest('canCancelCriticalAction', args),
  getDefaultAgentAddr: (...args: ExtractArgs<Contract['calls']['getDefaultAgentAddr']>) =>
    getRequest('getDefaultAgentAddr', args),
  getDefaultAgentInfo: (...args: ExtractArgs<Contract['calls']['getDefaultAgentInfo']>) =>
    getRequest('getDefaultAgentInfo', args),
  getPendingDefaultAgentUpdate: (...args: ExtractArgs<Contract['calls']['getPendingDefaultAgentUpdate']>) =>
    getRequest('getPendingDefaultAgentUpdate', args),
  hasPendingDefaultAgentUpdate: (...args: ExtractArgs<Contract['calls']['hasPendingDefaultAgentUpdate']>) =>
    getRequest('hasPendingDefaultAgentUpdate', args),
  isUserWalletLocal: (...args: ExtractArgs<Contract['calls']['isUserWalletLocal']>) =>
    getRequest('isUserWalletLocal', args),
  numUserWallets: (...args: ExtractArgs<Contract['calls']['numUserWallets']>) => getRequest('numUserWallets', args),
  isAgentLocal: (...args: ExtractArgs<Contract['calls']['isAgentLocal']>) => getRequest('isAgentLocal', args),
  numAgents: (...args: ExtractArgs<Contract['calls']['numAgents']>) => getRequest('numAgents', args),
  addressInfo: (...args: ExtractArgs<Contract['calls']['addressInfo']>) => getRequest('addressInfo', args),
  pendingAddress: (...args: ExtractArgs<Contract['calls']['pendingAddress']>) => getRequest('pendingAddress', args),
  addressChangeDelay: (...args: ExtractArgs<Contract['calls']['addressChangeDelay']>) =>
    getRequest('addressChangeDelay', args),
  ambassadorBonusRatio: (...args: ExtractArgs<Contract['calls']['ambassadorBonusRatio']>) =>
    getRequest('ambassadorBonusRatio', args),
  trialFundsData: (...args: ExtractArgs<Contract['calls']['trialFundsData']>) => getRequest('trialFundsData', args),
  numUserWalletsAllowed: (...args: ExtractArgs<Contract['calls']['numUserWalletsAllowed']>) =>
    getRequest('numUserWalletsAllowed', args),
  numAgentsAllowed: (...args: ExtractArgs<Contract['calls']['numAgentsAllowed']>) =>
    getRequest('numAgentsAllowed', args),
  whitelist: (...args: ExtractArgs<Contract['calls']['whitelist']>) => getRequest('whitelist', args),
  shouldEnforceWhitelist: (...args: ExtractArgs<Contract['calls']['shouldEnforceWhitelist']>) =>
    getRequest('shouldEnforceWhitelist', args),
  agentBlacklist: (...args: ExtractArgs<Contract['calls']['agentBlacklist']>) => getRequest('agentBlacklist', args),
  canCriticalCancel: (...args: ExtractArgs<Contract['calls']['canCriticalCancel']>) =>
    getRequest('canCriticalCancel', args),
  isActivated: (...args: ExtractArgs<Contract['calls']['isActivated']>) => getRequest('isActivated', args),
  ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) => getRequest('ADDY_REGISTRY', args),
  WETH_ADDR: (...args: ExtractArgs<Contract['calls']['WETH_ADDR']>) => getRequest('WETH_ADDR', args),
  MIN_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>) =>
    getRequest('MIN_OWNER_CHANGE_DELAY', args),
  MAX_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>) =>
    getRequest('MAX_OWNER_CHANGE_DELAY', args),
  MIN_ADDRESS_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_ADDRESS_CHANGE_DELAY']>) =>
    getRequest('MIN_ADDRESS_CHANGE_DELAY', args),
  MAX_ADDRESS_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_ADDRESS_CHANGE_DELAY']>) =>
    getRequest('MAX_ADDRESS_CHANGE_DELAY', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'AgentFactory' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'AgentFactory'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  changeGovernance: getMutation('changeGovernance'),
  confirmGovernanceChange: getMutation('confirmGovernanceChange'),
  cancelGovernanceChange: getMutation('cancelGovernanceChange'),
  setGovernanceChangeDelay: getMutation('setGovernanceChangeDelay'),
  createUserWallet: getMutation('createUserWallet'),
  createAgent: getMutation('createAgent'),
  initiateUserWalletTemplateUpdate: getMutation('initiateUserWalletTemplateUpdate'),
  confirmUserWalletTemplateUpdate: getMutation('confirmUserWalletTemplateUpdate'),
  cancelUserWalletTemplateUpdate: getMutation('cancelUserWalletTemplateUpdate'),
  initiateUserWalletConfigTemplateUpdate: getMutation('initiateUserWalletConfigTemplateUpdate'),
  confirmUserWalletConfigTemplateUpdate: getMutation('confirmUserWalletConfigTemplateUpdate'),
  cancelUserWalletConfigTemplateUpdate: getMutation('cancelUserWalletConfigTemplateUpdate'),
  initiateAgentTemplateUpdate: getMutation('initiateAgentTemplateUpdate'),
  confirmAgentTemplateUpdate: getMutation('confirmAgentTemplateUpdate'),
  cancelAgentTemplateUpdate: getMutation('cancelAgentTemplateUpdate'),
  setAddressChangeDelay: getMutation('setAddressChangeDelay'),
  setWhitelist: getMutation('setWhitelist'),
  setShouldEnforceWhitelist: getMutation('setShouldEnforceWhitelist'),
  setNumUserWalletsAllowed: getMutation('setNumUserWalletsAllowed'),
  setNumAgentsAllowed: getMutation('setNumAgentsAllowed'),
  setAgentBlacklist: getMutation('setAgentBlacklist'),
  setCanCriticalCancel: getMutation('setCanCriticalCancel'),
  setTrialFundsData: getMutation('setTrialFundsData'),
  clawBackTrialFunds: getMutation('clawBackTrialFunds'),
  clawBackTrialFundsLegacy: getMutation('clawBackTrialFundsLegacy'),
  payAmbassadorYieldBonus: getMutation('payAmbassadorYieldBonus'),
  setAmbassadorBonusRatio: getMutation('setAmbassadorBonusRatio'),
  initiateDefaultAgentUpdate: getMutation('initiateDefaultAgentUpdate'),
  confirmDefaultAgentUpdate: getMutation('confirmDefaultAgentUpdate'),
  cancelDefaultAgentUpdate: getMutation('cancelDefaultAgentUpdate'),
  recoverFundsFromAgentFactory: getMutation('recoverFundsFromAgentFactory'),
  activate: getMutation('activate'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => Promise<CallReturn<'canGovern'>>
  hasPendingGovChange: (
    ...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>
  ) => Promise<CallReturn<'hasPendingGovChange'>>
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => Promise<CallReturn<'governance'>>
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => Promise<CallReturn<'pendingGov'>>
  govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) => Promise<CallReturn<'govChangeDelay'>>
  MIN_GOV_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MIN_GOV_CHANGE_DELAY'>>
  MAX_GOV_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MAX_GOV_CHANGE_DELAY'>>
  isUserWallet: (...args: ExtractArgs<Contract['calls']['isUserWallet']>) => Promise<CallReturn<'isUserWallet'>>
  isAgent: (...args: ExtractArgs<Contract['calls']['isAgent']>) => Promise<CallReturn<'isAgent'>>
  getUserWalletTemplateAddr: (
    ...args: ExtractArgs<Contract['calls']['getUserWalletTemplateAddr']>
  ) => Promise<CallReturn<'getUserWalletTemplateAddr'>>
  getUserWalletTemplateInfo: (
    ...args: ExtractArgs<Contract['calls']['getUserWalletTemplateInfo']>
  ) => Promise<CallReturn<'getUserWalletTemplateInfo'>>
  getPendingUserWalletTemplateUpdate: (
    ...args: ExtractArgs<Contract['calls']['getPendingUserWalletTemplateUpdate']>
  ) => Promise<CallReturn<'getPendingUserWalletTemplateUpdate'>>
  hasPendingUserWalletTemplateUpdate: (
    ...args: ExtractArgs<Contract['calls']['hasPendingUserWalletTemplateUpdate']>
  ) => Promise<CallReturn<'hasPendingUserWalletTemplateUpdate'>>
  getUserWalletConfigTemplateAddr: (
    ...args: ExtractArgs<Contract['calls']['getUserWalletConfigTemplateAddr']>
  ) => Promise<CallReturn<'getUserWalletConfigTemplateAddr'>>
  getUserWalletConfigTemplateInfo: (
    ...args: ExtractArgs<Contract['calls']['getUserWalletConfigTemplateInfo']>
  ) => Promise<CallReturn<'getUserWalletConfigTemplateInfo'>>
  getPendingUserWalletConfigTemplateUpdate: (
    ...args: ExtractArgs<Contract['calls']['getPendingUserWalletConfigTemplateUpdate']>
  ) => Promise<CallReturn<'getPendingUserWalletConfigTemplateUpdate'>>
  hasPendingUserWalletConfigTemplateUpdate: (
    ...args: ExtractArgs<Contract['calls']['hasPendingUserWalletConfigTemplateUpdate']>
  ) => Promise<CallReturn<'hasPendingUserWalletConfigTemplateUpdate'>>
  getAgentTemplateAddr: (
    ...args: ExtractArgs<Contract['calls']['getAgentTemplateAddr']>
  ) => Promise<CallReturn<'getAgentTemplateAddr'>>
  getAgentTemplateInfo: (
    ...args: ExtractArgs<Contract['calls']['getAgentTemplateInfo']>
  ) => Promise<CallReturn<'getAgentTemplateInfo'>>
  getPendingAgentTemplateUpdate: (
    ...args: ExtractArgs<Contract['calls']['getPendingAgentTemplateUpdate']>
  ) => Promise<CallReturn<'getPendingAgentTemplateUpdate'>>
  hasPendingAgentTemplateUpdate: (
    ...args: ExtractArgs<Contract['calls']['hasPendingAgentTemplateUpdate']>
  ) => Promise<CallReturn<'hasPendingAgentTemplateUpdate'>>
  canCancelCriticalAction: (
    ...args: ExtractArgs<Contract['calls']['canCancelCriticalAction']>
  ) => Promise<CallReturn<'canCancelCriticalAction'>>
  getDefaultAgentAddr: (
    ...args: ExtractArgs<Contract['calls']['getDefaultAgentAddr']>
  ) => Promise<CallReturn<'getDefaultAgentAddr'>>
  getDefaultAgentInfo: (
    ...args: ExtractArgs<Contract['calls']['getDefaultAgentInfo']>
  ) => Promise<CallReturn<'getDefaultAgentInfo'>>
  getPendingDefaultAgentUpdate: (
    ...args: ExtractArgs<Contract['calls']['getPendingDefaultAgentUpdate']>
  ) => Promise<CallReturn<'getPendingDefaultAgentUpdate'>>
  hasPendingDefaultAgentUpdate: (
    ...args: ExtractArgs<Contract['calls']['hasPendingDefaultAgentUpdate']>
  ) => Promise<CallReturn<'hasPendingDefaultAgentUpdate'>>
  isUserWalletLocal: (
    ...args: ExtractArgs<Contract['calls']['isUserWalletLocal']>
  ) => Promise<CallReturn<'isUserWalletLocal'>>
  numUserWallets: (...args: ExtractArgs<Contract['calls']['numUserWallets']>) => Promise<CallReturn<'numUserWallets'>>
  isAgentLocal: (...args: ExtractArgs<Contract['calls']['isAgentLocal']>) => Promise<CallReturn<'isAgentLocal'>>
  numAgents: (...args: ExtractArgs<Contract['calls']['numAgents']>) => Promise<CallReturn<'numAgents'>>
  addressInfo: (...args: ExtractArgs<Contract['calls']['addressInfo']>) => Promise<CallReturn<'addressInfo'>>
  pendingAddress: (...args: ExtractArgs<Contract['calls']['pendingAddress']>) => Promise<CallReturn<'pendingAddress'>>
  addressChangeDelay: (
    ...args: ExtractArgs<Contract['calls']['addressChangeDelay']>
  ) => Promise<CallReturn<'addressChangeDelay'>>
  ambassadorBonusRatio: (
    ...args: ExtractArgs<Contract['calls']['ambassadorBonusRatio']>
  ) => Promise<CallReturn<'ambassadorBonusRatio'>>
  trialFundsData: (...args: ExtractArgs<Contract['calls']['trialFundsData']>) => Promise<CallReturn<'trialFundsData'>>
  numUserWalletsAllowed: (
    ...args: ExtractArgs<Contract['calls']['numUserWalletsAllowed']>
  ) => Promise<CallReturn<'numUserWalletsAllowed'>>
  numAgentsAllowed: (
    ...args: ExtractArgs<Contract['calls']['numAgentsAllowed']>
  ) => Promise<CallReturn<'numAgentsAllowed'>>
  whitelist: (...args: ExtractArgs<Contract['calls']['whitelist']>) => Promise<CallReturn<'whitelist'>>
  shouldEnforceWhitelist: (
    ...args: ExtractArgs<Contract['calls']['shouldEnforceWhitelist']>
  ) => Promise<CallReturn<'shouldEnforceWhitelist'>>
  agentBlacklist: (...args: ExtractArgs<Contract['calls']['agentBlacklist']>) => Promise<CallReturn<'agentBlacklist'>>
  canCriticalCancel: (
    ...args: ExtractArgs<Contract['calls']['canCriticalCancel']>
  ) => Promise<CallReturn<'canCriticalCancel'>>
  isActivated: (...args: ExtractArgs<Contract['calls']['isActivated']>) => Promise<CallReturn<'isActivated'>>
  ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) => Promise<CallReturn<'ADDY_REGISTRY'>>
  WETH_ADDR: (...args: ExtractArgs<Contract['calls']['WETH_ADDR']>) => Promise<CallReturn<'WETH_ADDR'>>
  MIN_OWNER_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MIN_OWNER_CHANGE_DELAY'>>
  MAX_OWNER_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MAX_OWNER_CHANGE_DELAY'>>
  MIN_ADDRESS_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MIN_ADDRESS_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MIN_ADDRESS_CHANGE_DELAY'>>
  MAX_ADDRESS_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MAX_ADDRESS_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MAX_ADDRESS_CHANGE_DELAY'>>
  changeGovernance: (...args: ExtractArgs<Contract['mutations']['changeGovernance']>) => Promise<Address>
  confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) => Promise<Address>
  cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) => Promise<Address>
  setGovernanceChangeDelay: (
    ...args: ExtractArgs<Contract['mutations']['setGovernanceChangeDelay']>
  ) => Promise<Address>
  createUserWallet: (...args: ExtractArgs<Contract['mutations']['createUserWallet']>) => Promise<Address>
  createAgent: (...args: ExtractArgs<Contract['mutations']['createAgent']>) => Promise<Address>
  initiateUserWalletTemplateUpdate: (
    ...args: ExtractArgs<Contract['mutations']['initiateUserWalletTemplateUpdate']>
  ) => Promise<Address>
  confirmUserWalletTemplateUpdate: (
    ...args: ExtractArgs<Contract['mutations']['confirmUserWalletTemplateUpdate']>
  ) => Promise<Address>
  cancelUserWalletTemplateUpdate: (
    ...args: ExtractArgs<Contract['mutations']['cancelUserWalletTemplateUpdate']>
  ) => Promise<Address>
  initiateUserWalletConfigTemplateUpdate: (
    ...args: ExtractArgs<Contract['mutations']['initiateUserWalletConfigTemplateUpdate']>
  ) => Promise<Address>
  confirmUserWalletConfigTemplateUpdate: (
    ...args: ExtractArgs<Contract['mutations']['confirmUserWalletConfigTemplateUpdate']>
  ) => Promise<Address>
  cancelUserWalletConfigTemplateUpdate: (
    ...args: ExtractArgs<Contract['mutations']['cancelUserWalletConfigTemplateUpdate']>
  ) => Promise<Address>
  initiateAgentTemplateUpdate: (
    ...args: ExtractArgs<Contract['mutations']['initiateAgentTemplateUpdate']>
  ) => Promise<Address>
  confirmAgentTemplateUpdate: (
    ...args: ExtractArgs<Contract['mutations']['confirmAgentTemplateUpdate']>
  ) => Promise<Address>
  cancelAgentTemplateUpdate: (
    ...args: ExtractArgs<Contract['mutations']['cancelAgentTemplateUpdate']>
  ) => Promise<Address>
  setAddressChangeDelay: (...args: ExtractArgs<Contract['mutations']['setAddressChangeDelay']>) => Promise<Address>
  setWhitelist: (...args: ExtractArgs<Contract['mutations']['setWhitelist']>) => Promise<Address>
  setShouldEnforceWhitelist: (
    ...args: ExtractArgs<Contract['mutations']['setShouldEnforceWhitelist']>
  ) => Promise<Address>
  setNumUserWalletsAllowed: (
    ...args: ExtractArgs<Contract['mutations']['setNumUserWalletsAllowed']>
  ) => Promise<Address>
  setNumAgentsAllowed: (...args: ExtractArgs<Contract['mutations']['setNumAgentsAllowed']>) => Promise<Address>
  setAgentBlacklist: (...args: ExtractArgs<Contract['mutations']['setAgentBlacklist']>) => Promise<Address>
  setCanCriticalCancel: (...args: ExtractArgs<Contract['mutations']['setCanCriticalCancel']>) => Promise<Address>
  setTrialFundsData: (...args: ExtractArgs<Contract['mutations']['setTrialFundsData']>) => Promise<Address>
  clawBackTrialFunds: (...args: ExtractArgs<Contract['mutations']['clawBackTrialFunds']>) => Promise<Address>
  clawBackTrialFundsLegacy: (
    ...args: ExtractArgs<Contract['mutations']['clawBackTrialFundsLegacy']>
  ) => Promise<Address>
  payAmbassadorYieldBonus: (...args: ExtractArgs<Contract['mutations']['payAmbassadorYieldBonus']>) => Promise<Address>
  setAmbassadorBonusRatio: (...args: ExtractArgs<Contract['mutations']['setAmbassadorBonusRatio']>) => Promise<Address>
  initiateDefaultAgentUpdate: (
    ...args: ExtractArgs<Contract['mutations']['initiateDefaultAgentUpdate']>
  ) => Promise<Address>
  confirmDefaultAgentUpdate: (
    ...args: ExtractArgs<Contract['mutations']['confirmDefaultAgentUpdate']>
  ) => Promise<Address>
  cancelDefaultAgentUpdate: (
    ...args: ExtractArgs<Contract['mutations']['cancelDefaultAgentUpdate']>
  ) => Promise<Address>
  recoverFundsFromAgentFactory: (
    ...args: ExtractArgs<Contract['mutations']['recoverFundsFromAgentFactory']>
  ) => Promise<Address>
  activate: (...args: ExtractArgs<Contract['mutations']['activate']>) => Promise<Address>
}

export function toSdk(deployAddress: Address, publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) =>
      singleQuery(publicClient!, call.canGovern(...args).at(deployAddress)) as Promise<CallReturn<'canGovern'>>,
    hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
      singleQuery(publicClient!, call.hasPendingGovChange(...args).at(deployAddress)) as Promise<
        CallReturn<'hasPendingGovChange'>
      >,
    governance: (...args: ExtractArgs<Contract['calls']['governance']>) =>
      singleQuery(publicClient!, call.governance(...args).at(deployAddress)) as Promise<CallReturn<'governance'>>,
    pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) =>
      singleQuery(publicClient!, call.pendingGov(...args).at(deployAddress)) as Promise<CallReturn<'pendingGov'>>,
    govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) =>
      singleQuery(publicClient!, call.govChangeDelay(...args).at(deployAddress)) as Promise<
        CallReturn<'govChangeDelay'>
      >,
    MIN_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MIN_GOV_CHANGE_DELAY(...args).at(deployAddress)) as Promise<
        CallReturn<'MIN_GOV_CHANGE_DELAY'>
      >,
    MAX_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MAX_GOV_CHANGE_DELAY(...args).at(deployAddress)) as Promise<
        CallReturn<'MAX_GOV_CHANGE_DELAY'>
      >,
    isUserWallet: (...args: ExtractArgs<Contract['calls']['isUserWallet']>) =>
      singleQuery(publicClient!, call.isUserWallet(...args).at(deployAddress)) as Promise<CallReturn<'isUserWallet'>>,
    isAgent: (...args: ExtractArgs<Contract['calls']['isAgent']>) =>
      singleQuery(publicClient!, call.isAgent(...args).at(deployAddress)) as Promise<CallReturn<'isAgent'>>,
    getUserWalletTemplateAddr: (...args: ExtractArgs<Contract['calls']['getUserWalletTemplateAddr']>) =>
      singleQuery(publicClient!, call.getUserWalletTemplateAddr(...args).at(deployAddress)) as Promise<
        CallReturn<'getUserWalletTemplateAddr'>
      >,
    getUserWalletTemplateInfo: (...args: ExtractArgs<Contract['calls']['getUserWalletTemplateInfo']>) =>
      singleQuery(publicClient!, call.getUserWalletTemplateInfo(...args).at(deployAddress)) as Promise<
        CallReturn<'getUserWalletTemplateInfo'>
      >,
    getPendingUserWalletTemplateUpdate: (
      ...args: ExtractArgs<Contract['calls']['getPendingUserWalletTemplateUpdate']>
    ) =>
      singleQuery(publicClient!, call.getPendingUserWalletTemplateUpdate(...args).at(deployAddress)) as Promise<
        CallReturn<'getPendingUserWalletTemplateUpdate'>
      >,
    hasPendingUserWalletTemplateUpdate: (
      ...args: ExtractArgs<Contract['calls']['hasPendingUserWalletTemplateUpdate']>
    ) =>
      singleQuery(publicClient!, call.hasPendingUserWalletTemplateUpdate(...args).at(deployAddress)) as Promise<
        CallReturn<'hasPendingUserWalletTemplateUpdate'>
      >,
    getUserWalletConfigTemplateAddr: (...args: ExtractArgs<Contract['calls']['getUserWalletConfigTemplateAddr']>) =>
      singleQuery(publicClient!, call.getUserWalletConfigTemplateAddr(...args).at(deployAddress)) as Promise<
        CallReturn<'getUserWalletConfigTemplateAddr'>
      >,
    getUserWalletConfigTemplateInfo: (...args: ExtractArgs<Contract['calls']['getUserWalletConfigTemplateInfo']>) =>
      singleQuery(publicClient!, call.getUserWalletConfigTemplateInfo(...args).at(deployAddress)) as Promise<
        CallReturn<'getUserWalletConfigTemplateInfo'>
      >,
    getPendingUserWalletConfigTemplateUpdate: (
      ...args: ExtractArgs<Contract['calls']['getPendingUserWalletConfigTemplateUpdate']>
    ) =>
      singleQuery(publicClient!, call.getPendingUserWalletConfigTemplateUpdate(...args).at(deployAddress)) as Promise<
        CallReturn<'getPendingUserWalletConfigTemplateUpdate'>
      >,
    hasPendingUserWalletConfigTemplateUpdate: (
      ...args: ExtractArgs<Contract['calls']['hasPendingUserWalletConfigTemplateUpdate']>
    ) =>
      singleQuery(publicClient!, call.hasPendingUserWalletConfigTemplateUpdate(...args).at(deployAddress)) as Promise<
        CallReturn<'hasPendingUserWalletConfigTemplateUpdate'>
      >,
    getAgentTemplateAddr: (...args: ExtractArgs<Contract['calls']['getAgentTemplateAddr']>) =>
      singleQuery(publicClient!, call.getAgentTemplateAddr(...args).at(deployAddress)) as Promise<
        CallReturn<'getAgentTemplateAddr'>
      >,
    getAgentTemplateInfo: (...args: ExtractArgs<Contract['calls']['getAgentTemplateInfo']>) =>
      singleQuery(publicClient!, call.getAgentTemplateInfo(...args).at(deployAddress)) as Promise<
        CallReturn<'getAgentTemplateInfo'>
      >,
    getPendingAgentTemplateUpdate: (...args: ExtractArgs<Contract['calls']['getPendingAgentTemplateUpdate']>) =>
      singleQuery(publicClient!, call.getPendingAgentTemplateUpdate(...args).at(deployAddress)) as Promise<
        CallReturn<'getPendingAgentTemplateUpdate'>
      >,
    hasPendingAgentTemplateUpdate: (...args: ExtractArgs<Contract['calls']['hasPendingAgentTemplateUpdate']>) =>
      singleQuery(publicClient!, call.hasPendingAgentTemplateUpdate(...args).at(deployAddress)) as Promise<
        CallReturn<'hasPendingAgentTemplateUpdate'>
      >,
    canCancelCriticalAction: (...args: ExtractArgs<Contract['calls']['canCancelCriticalAction']>) =>
      singleQuery(publicClient!, call.canCancelCriticalAction(...args).at(deployAddress)) as Promise<
        CallReturn<'canCancelCriticalAction'>
      >,
    getDefaultAgentAddr: (...args: ExtractArgs<Contract['calls']['getDefaultAgentAddr']>) =>
      singleQuery(publicClient!, call.getDefaultAgentAddr(...args).at(deployAddress)) as Promise<
        CallReturn<'getDefaultAgentAddr'>
      >,
    getDefaultAgentInfo: (...args: ExtractArgs<Contract['calls']['getDefaultAgentInfo']>) =>
      singleQuery(publicClient!, call.getDefaultAgentInfo(...args).at(deployAddress)) as Promise<
        CallReturn<'getDefaultAgentInfo'>
      >,
    getPendingDefaultAgentUpdate: (...args: ExtractArgs<Contract['calls']['getPendingDefaultAgentUpdate']>) =>
      singleQuery(publicClient!, call.getPendingDefaultAgentUpdate(...args).at(deployAddress)) as Promise<
        CallReturn<'getPendingDefaultAgentUpdate'>
      >,
    hasPendingDefaultAgentUpdate: (...args: ExtractArgs<Contract['calls']['hasPendingDefaultAgentUpdate']>) =>
      singleQuery(publicClient!, call.hasPendingDefaultAgentUpdate(...args).at(deployAddress)) as Promise<
        CallReturn<'hasPendingDefaultAgentUpdate'>
      >,
    isUserWalletLocal: (...args: ExtractArgs<Contract['calls']['isUserWalletLocal']>) =>
      singleQuery(publicClient!, call.isUserWalletLocal(...args).at(deployAddress)) as Promise<
        CallReturn<'isUserWalletLocal'>
      >,
    numUserWallets: (...args: ExtractArgs<Contract['calls']['numUserWallets']>) =>
      singleQuery(publicClient!, call.numUserWallets(...args).at(deployAddress)) as Promise<
        CallReturn<'numUserWallets'>
      >,
    isAgentLocal: (...args: ExtractArgs<Contract['calls']['isAgentLocal']>) =>
      singleQuery(publicClient!, call.isAgentLocal(...args).at(deployAddress)) as Promise<CallReturn<'isAgentLocal'>>,
    numAgents: (...args: ExtractArgs<Contract['calls']['numAgents']>) =>
      singleQuery(publicClient!, call.numAgents(...args).at(deployAddress)) as Promise<CallReturn<'numAgents'>>,
    addressInfo: (...args: ExtractArgs<Contract['calls']['addressInfo']>) =>
      singleQuery(publicClient!, call.addressInfo(...args).at(deployAddress)) as Promise<CallReturn<'addressInfo'>>,
    pendingAddress: (...args: ExtractArgs<Contract['calls']['pendingAddress']>) =>
      singleQuery(publicClient!, call.pendingAddress(...args).at(deployAddress)) as Promise<
        CallReturn<'pendingAddress'>
      >,
    addressChangeDelay: (...args: ExtractArgs<Contract['calls']['addressChangeDelay']>) =>
      singleQuery(publicClient!, call.addressChangeDelay(...args).at(deployAddress)) as Promise<
        CallReturn<'addressChangeDelay'>
      >,
    ambassadorBonusRatio: (...args: ExtractArgs<Contract['calls']['ambassadorBonusRatio']>) =>
      singleQuery(publicClient!, call.ambassadorBonusRatio(...args).at(deployAddress)) as Promise<
        CallReturn<'ambassadorBonusRatio'>
      >,
    trialFundsData: (...args: ExtractArgs<Contract['calls']['trialFundsData']>) =>
      singleQuery(publicClient!, call.trialFundsData(...args).at(deployAddress)) as Promise<
        CallReturn<'trialFundsData'>
      >,
    numUserWalletsAllowed: (...args: ExtractArgs<Contract['calls']['numUserWalletsAllowed']>) =>
      singleQuery(publicClient!, call.numUserWalletsAllowed(...args).at(deployAddress)) as Promise<
        CallReturn<'numUserWalletsAllowed'>
      >,
    numAgentsAllowed: (...args: ExtractArgs<Contract['calls']['numAgentsAllowed']>) =>
      singleQuery(publicClient!, call.numAgentsAllowed(...args).at(deployAddress)) as Promise<
        CallReturn<'numAgentsAllowed'>
      >,
    whitelist: (...args: ExtractArgs<Contract['calls']['whitelist']>) =>
      singleQuery(publicClient!, call.whitelist(...args).at(deployAddress)) as Promise<CallReturn<'whitelist'>>,
    shouldEnforceWhitelist: (...args: ExtractArgs<Contract['calls']['shouldEnforceWhitelist']>) =>
      singleQuery(publicClient!, call.shouldEnforceWhitelist(...args).at(deployAddress)) as Promise<
        CallReturn<'shouldEnforceWhitelist'>
      >,
    agentBlacklist: (...args: ExtractArgs<Contract['calls']['agentBlacklist']>) =>
      singleQuery(publicClient!, call.agentBlacklist(...args).at(deployAddress)) as Promise<
        CallReturn<'agentBlacklist'>
      >,
    canCriticalCancel: (...args: ExtractArgs<Contract['calls']['canCriticalCancel']>) =>
      singleQuery(publicClient!, call.canCriticalCancel(...args).at(deployAddress)) as Promise<
        CallReturn<'canCriticalCancel'>
      >,
    isActivated: (...args: ExtractArgs<Contract['calls']['isActivated']>) =>
      singleQuery(publicClient!, call.isActivated(...args).at(deployAddress)) as Promise<CallReturn<'isActivated'>>,
    ADDY_REGISTRY: (...args: ExtractArgs<Contract['calls']['ADDY_REGISTRY']>) =>
      singleQuery(publicClient!, call.ADDY_REGISTRY(...args).at(deployAddress)) as Promise<CallReturn<'ADDY_REGISTRY'>>,
    WETH_ADDR: (...args: ExtractArgs<Contract['calls']['WETH_ADDR']>) =>
      singleQuery(publicClient!, call.WETH_ADDR(...args).at(deployAddress)) as Promise<CallReturn<'WETH_ADDR'>>,
    MIN_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_OWNER_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MIN_OWNER_CHANGE_DELAY(...args).at(deployAddress)) as Promise<
        CallReturn<'MIN_OWNER_CHANGE_DELAY'>
      >,
    MAX_OWNER_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_OWNER_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MAX_OWNER_CHANGE_DELAY(...args).at(deployAddress)) as Promise<
        CallReturn<'MAX_OWNER_CHANGE_DELAY'>
      >,
    MIN_ADDRESS_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_ADDRESS_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MIN_ADDRESS_CHANGE_DELAY(...args).at(deployAddress)) as Promise<
        CallReturn<'MIN_ADDRESS_CHANGE_DELAY'>
      >,
    MAX_ADDRESS_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_ADDRESS_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MAX_ADDRESS_CHANGE_DELAY(...args).at(deployAddress)) as Promise<
        CallReturn<'MAX_ADDRESS_CHANGE_DELAY'>
      >,

    // Mutations
    changeGovernance: (...args: ExtractArgs<Contract['mutations']['changeGovernance']>) =>
      mutate(walletClient!, mutation.changeGovernance, { address: deployAddress })(...args),
    confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) =>
      mutate(walletClient!, mutation.confirmGovernanceChange, { address: deployAddress })(...args),
    cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) =>
      mutate(walletClient!, mutation.cancelGovernanceChange, { address: deployAddress })(...args),
    setGovernanceChangeDelay: (...args: ExtractArgs<Contract['mutations']['setGovernanceChangeDelay']>) =>
      mutate(walletClient!, mutation.setGovernanceChangeDelay, { address: deployAddress })(...args),
    createUserWallet: (...args: ExtractArgs<Contract['mutations']['createUserWallet']>) =>
      mutate(walletClient!, mutation.createUserWallet, { address: deployAddress })(...args),
    createAgent: (...args: ExtractArgs<Contract['mutations']['createAgent']>) =>
      mutate(walletClient!, mutation.createAgent, { address: deployAddress })(...args),
    initiateUserWalletTemplateUpdate: (
      ...args: ExtractArgs<Contract['mutations']['initiateUserWalletTemplateUpdate']>
    ) => mutate(walletClient!, mutation.initiateUserWalletTemplateUpdate, { address: deployAddress })(...args),
    confirmUserWalletTemplateUpdate: (...args: ExtractArgs<Contract['mutations']['confirmUserWalletTemplateUpdate']>) =>
      mutate(walletClient!, mutation.confirmUserWalletTemplateUpdate, { address: deployAddress })(...args),
    cancelUserWalletTemplateUpdate: (...args: ExtractArgs<Contract['mutations']['cancelUserWalletTemplateUpdate']>) =>
      mutate(walletClient!, mutation.cancelUserWalletTemplateUpdate, { address: deployAddress })(...args),
    initiateUserWalletConfigTemplateUpdate: (
      ...args: ExtractArgs<Contract['mutations']['initiateUserWalletConfigTemplateUpdate']>
    ) => mutate(walletClient!, mutation.initiateUserWalletConfigTemplateUpdate, { address: deployAddress })(...args),
    confirmUserWalletConfigTemplateUpdate: (
      ...args: ExtractArgs<Contract['mutations']['confirmUserWalletConfigTemplateUpdate']>
    ) => mutate(walletClient!, mutation.confirmUserWalletConfigTemplateUpdate, { address: deployAddress })(...args),
    cancelUserWalletConfigTemplateUpdate: (
      ...args: ExtractArgs<Contract['mutations']['cancelUserWalletConfigTemplateUpdate']>
    ) => mutate(walletClient!, mutation.cancelUserWalletConfigTemplateUpdate, { address: deployAddress })(...args),
    initiateAgentTemplateUpdate: (...args: ExtractArgs<Contract['mutations']['initiateAgentTemplateUpdate']>) =>
      mutate(walletClient!, mutation.initiateAgentTemplateUpdate, { address: deployAddress })(...args),
    confirmAgentTemplateUpdate: (...args: ExtractArgs<Contract['mutations']['confirmAgentTemplateUpdate']>) =>
      mutate(walletClient!, mutation.confirmAgentTemplateUpdate, { address: deployAddress })(...args),
    cancelAgentTemplateUpdate: (...args: ExtractArgs<Contract['mutations']['cancelAgentTemplateUpdate']>) =>
      mutate(walletClient!, mutation.cancelAgentTemplateUpdate, { address: deployAddress })(...args),
    setAddressChangeDelay: (...args: ExtractArgs<Contract['mutations']['setAddressChangeDelay']>) =>
      mutate(walletClient!, mutation.setAddressChangeDelay, { address: deployAddress })(...args),
    setWhitelist: (...args: ExtractArgs<Contract['mutations']['setWhitelist']>) =>
      mutate(walletClient!, mutation.setWhitelist, { address: deployAddress })(...args),
    setShouldEnforceWhitelist: (...args: ExtractArgs<Contract['mutations']['setShouldEnforceWhitelist']>) =>
      mutate(walletClient!, mutation.setShouldEnforceWhitelist, { address: deployAddress })(...args),
    setNumUserWalletsAllowed: (...args: ExtractArgs<Contract['mutations']['setNumUserWalletsAllowed']>) =>
      mutate(walletClient!, mutation.setNumUserWalletsAllowed, { address: deployAddress })(...args),
    setNumAgentsAllowed: (...args: ExtractArgs<Contract['mutations']['setNumAgentsAllowed']>) =>
      mutate(walletClient!, mutation.setNumAgentsAllowed, { address: deployAddress })(...args),
    setAgentBlacklist: (...args: ExtractArgs<Contract['mutations']['setAgentBlacklist']>) =>
      mutate(walletClient!, mutation.setAgentBlacklist, { address: deployAddress })(...args),
    setCanCriticalCancel: (...args: ExtractArgs<Contract['mutations']['setCanCriticalCancel']>) =>
      mutate(walletClient!, mutation.setCanCriticalCancel, { address: deployAddress })(...args),
    setTrialFundsData: (...args: ExtractArgs<Contract['mutations']['setTrialFundsData']>) =>
      mutate(walletClient!, mutation.setTrialFundsData, { address: deployAddress })(...args),
    clawBackTrialFunds: (...args: ExtractArgs<Contract['mutations']['clawBackTrialFunds']>) =>
      mutate(walletClient!, mutation.clawBackTrialFunds, { address: deployAddress })(...args),
    clawBackTrialFundsLegacy: (...args: ExtractArgs<Contract['mutations']['clawBackTrialFundsLegacy']>) =>
      mutate(walletClient!, mutation.clawBackTrialFundsLegacy, { address: deployAddress })(...args),
    payAmbassadorYieldBonus: (...args: ExtractArgs<Contract['mutations']['payAmbassadorYieldBonus']>) =>
      mutate(walletClient!, mutation.payAmbassadorYieldBonus, { address: deployAddress })(...args),
    setAmbassadorBonusRatio: (...args: ExtractArgs<Contract['mutations']['setAmbassadorBonusRatio']>) =>
      mutate(walletClient!, mutation.setAmbassadorBonusRatio, { address: deployAddress })(...args),
    initiateDefaultAgentUpdate: (...args: ExtractArgs<Contract['mutations']['initiateDefaultAgentUpdate']>) =>
      mutate(walletClient!, mutation.initiateDefaultAgentUpdate, { address: deployAddress })(...args),
    confirmDefaultAgentUpdate: (...args: ExtractArgs<Contract['mutations']['confirmDefaultAgentUpdate']>) =>
      mutate(walletClient!, mutation.confirmDefaultAgentUpdate, { address: deployAddress })(...args),
    cancelDefaultAgentUpdate: (...args: ExtractArgs<Contract['mutations']['cancelDefaultAgentUpdate']>) =>
      mutate(walletClient!, mutation.cancelDefaultAgentUpdate, { address: deployAddress })(...args),
    recoverFundsFromAgentFactory: (...args: ExtractArgs<Contract['mutations']['recoverFundsFromAgentFactory']>) =>
      mutate(walletClient!, mutation.recoverFundsFromAgentFactory, { address: deployAddress })(...args),
    activate: (...args: ExtractArgs<Contract['mutations']['activate']>) =>
      mutate(walletClient!, mutation.activate, { address: deployAddress })(...args),
  }
}
