/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'UserWalletCreated',
    inputs: [
      {
        name: 'mainAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'configAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        type: 'address',
        indexed: true,
      },
      {
        name: 'agent',
        type: 'address',
        indexed: false,
      },
      {
        name: 'ambassador',
        type: 'address',
        indexed: false,
      },
      {
        name: 'creator',
        type: 'address',
        indexed: false,
      },
      {
        name: 'trialFundsAsset',
        type: 'address',
        indexed: false,
      },
      {
        name: 'trialFundsAmount',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'groupId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AgentCreated',
    inputs: [
      {
        name: 'agent',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        type: 'address',
        indexed: true,
      },
      {
        name: 'creator',
        type: 'address',
        indexed: true,
      },
      {
        name: 'groupId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepartmentPauseModified',
    inputs: [
      {
        name: 'isPaused',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepartmentFundsRecovered',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'balance',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddys',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'hq',
            type: 'address',
          },
          {
            name: 'undyToken',
            type: 'address',
          },
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'switchboard',
            type: 'address',
          },
          {
            name: 'hatchery',
            type: 'address',
          },
          {
            name: 'lootDistributor',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
          {
            name: 'walletBackpack',
            type: 'address',
          },
          {
            name: 'billing',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHq',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canMintUndy',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'pause',
    inputs: [
      {
        name: '_shouldPause',
        type: 'bool',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFunds',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFundsMany',
    inputs: [
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isPaused',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'createUserWallet',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'createUserWallet',
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'createUserWallet',
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_ambassador',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'createUserWallet',
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_ambassador',
        type: 'address',
      },
      {
        name: '_shouldUseTrialFunds',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'createUserWallet',
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_ambassador',
        type: 'address',
      },
      {
        name: '_shouldUseTrialFunds',
        type: 'bool',
      },
      {
        name: '_groupId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'createAgent',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'createAgent',
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'createAgent',
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_groupId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'clawBackTrialFunds',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canClawbackTrialFunds',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_caller',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'doesWalletStillHaveTrialFunds',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'doesWalletStillHaveTrialFundsWithAddys',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_walletConfig',
        type: 'address',
      },
      {
        name: '_missionControl',
        type: 'address',
      },
      {
        name: '_legoBook',
        type: 'address',
      },
      {
        name: '_appraiser',
        type: 'address',
      },
      {
        name: '_ledger',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAssetUsdValueConfig',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'legoAddr',
            type: 'address',
          },
          {
            name: 'decimals',
            type: 'uint256',
          },
          {
            name: 'staleBlocks',
            type: 'uint256',
          },
          {
            name: 'isYieldAsset',
            type: 'bool',
          },
          {
            name: 'underlyingAsset',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'WETH',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'ETH',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_wethAddr',
        type: 'address',
      },
      {
        name: '_ethAddr',
        type: 'address',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0xCCE416b5050F628C85A57a817F168C1a7Af8D4d2'

export type Contract = {
  calls: {
    getAddys: () => Promise<{
      hq: `0x${string}`
      undyToken: `0x${string}`
      ledger: `0x${string}`
      missionControl: `0x${string}`
      legoBook: `0x${string}`
      switchboard: `0x${string}`
      hatchery: `0x${string}`
      lootDistributor: `0x${string}`
      appraiser: `0x${string}`
      walletBackpack: `0x${string}`
      billing: `0x${string}`
    }>
    getUndyHq: () => Promise<`0x${string}`>
    canMintUndy: () => Promise<boolean>
    isPaused: () => Promise<boolean>
    canClawbackTrialFunds: (user: `0x${string}`, caller: `0x${string}`) => Promise<boolean>
    doesWalletStillHaveTrialFunds: (user: `0x${string}`) => Promise<boolean>
    doesWalletStillHaveTrialFundsWithAddys: (
      user: `0x${string}`,
      walletConfig: `0x${string}`,
      missionControl: `0x${string}`,
      legoBook: `0x${string}`,
      appraiser: `0x${string}`,
      ledger: `0x${string}`,
    ) => Promise<boolean>
    getAssetUsdValueConfig: (
      asset: `0x${string}`,
    ) => Promise<{
      legoId: bigint
      legoAddr: `0x${string}`
      decimals: bigint
      staleBlocks: bigint
      isYieldAsset: boolean
      underlyingAsset: `0x${string}`
    }>
    WETH: () => Promise<`0x${string}`>
    ETH: () => Promise<`0x${string}`>
  }
  mutations: {
    pause: (shouldPause: boolean) => Promise<void>
    recoverFunds: (recipient: `0x${string}`, asset: `0x${string}`) => Promise<void>
    recoverFundsMany: (recipient: `0x${string}`, assets: `0x${string}`[]) => Promise<void>
    createUserWallet: (
      owner?: `0x${string}`,
      ambassador?: `0x${string}`,
      shouldUseTrialFunds?: boolean,
      groupId?: bigint,
    ) => Promise<`0x${string}`>
    createAgent: (owner?: `0x${string}`, groupId?: bigint) => Promise<`0x${string}`>
    clawBackTrialFunds: (user: `0x${string}`) => Promise<bigint>
  }
  events: {
    UserWalletCreated: (
      mainAddr: `0x${string}`,
      configAddr: `0x${string}`,
      owner: `0x${string}`,
      agent: `0x${string}`,
      ambassador: `0x${string}`,
      creator: `0x${string}`,
      trialFundsAsset: `0x${string}`,
      trialFundsAmount: bigint,
      groupId: bigint,
    ) => Promise<void>
    AgentCreated: (agent: `0x${string}`, owner: `0x${string}`, creator: `0x${string}`, groupId: bigint) => Promise<void>
    DepartmentPauseModified: (isPaused: boolean) => Promise<void>
    DepartmentFundsRecovered: (asset: `0x${string}`, recipient: `0x${string}`, balance: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'Hatchery'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'Hatchery' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => getRequest('getAddys', args),
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => getRequest('getUndyHq', args),
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => getRequest('canMintUndy', args),
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => getRequest('isPaused', args),
  canClawbackTrialFunds: (...args: ExtractArgs<Contract['calls']['canClawbackTrialFunds']>) =>
    getRequest('canClawbackTrialFunds', args),
  doesWalletStillHaveTrialFunds: (...args: ExtractArgs<Contract['calls']['doesWalletStillHaveTrialFunds']>) =>
    getRequest('doesWalletStillHaveTrialFunds', args),
  doesWalletStillHaveTrialFundsWithAddys: (
    ...args: ExtractArgs<Contract['calls']['doesWalletStillHaveTrialFundsWithAddys']>
  ) => getRequest('doesWalletStillHaveTrialFundsWithAddys', args),
  getAssetUsdValueConfig: (...args: ExtractArgs<Contract['calls']['getAssetUsdValueConfig']>) =>
    getRequest('getAssetUsdValueConfig', args),
  WETH: (...args: ExtractArgs<Contract['calls']['WETH']>) => getRequest('WETH', args),
  ETH: (...args: ExtractArgs<Contract['calls']['ETH']>) => getRequest('ETH', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'Hatchery' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'Hatchery'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  pause: getMutation('pause'),
  recoverFunds: getMutation('recoverFunds'),
  recoverFundsMany: getMutation('recoverFundsMany'),
  createUserWallet: getMutation('createUserWallet'),
  createAgent: getMutation('createAgent'),
  clawBackTrialFunds: getMutation('clawBackTrialFunds'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => Promise<CallReturn<'getAddys'>>
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => Promise<CallReturn<'getUndyHq'>>
  canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) => Promise<CallReturn<'canMintUndy'>>
  isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) => Promise<CallReturn<'isPaused'>>
  canClawbackTrialFunds: (
    ...args: ExtractArgs<Contract['calls']['canClawbackTrialFunds']>
  ) => Promise<CallReturn<'canClawbackTrialFunds'>>
  doesWalletStillHaveTrialFunds: (
    ...args: ExtractArgs<Contract['calls']['doesWalletStillHaveTrialFunds']>
  ) => Promise<CallReturn<'doesWalletStillHaveTrialFunds'>>
  doesWalletStillHaveTrialFundsWithAddys: (
    ...args: ExtractArgs<Contract['calls']['doesWalletStillHaveTrialFundsWithAddys']>
  ) => Promise<CallReturn<'doesWalletStillHaveTrialFundsWithAddys'>>
  getAssetUsdValueConfig: (
    ...args: ExtractArgs<Contract['calls']['getAssetUsdValueConfig']>
  ) => Promise<CallReturn<'getAssetUsdValueConfig'>>
  WETH: (...args: ExtractArgs<Contract['calls']['WETH']>) => Promise<CallReturn<'WETH'>>
  ETH: (...args: ExtractArgs<Contract['calls']['ETH']>) => Promise<CallReturn<'ETH'>>
  pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => Promise<Address>
  recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) => Promise<Address>
  recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) => Promise<Address>
  createUserWallet: (...args: ExtractArgs<Contract['mutations']['createUserWallet']>) => Promise<Address>
  createAgent: (...args: ExtractArgs<Contract['mutations']['createAgent']>) => Promise<Address>
  clawBackTrialFunds: (...args: ExtractArgs<Contract['mutations']['clawBackTrialFunds']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) =>
      singleQuery(publicClient!, call.getAddys(...args)) as Promise<CallReturn<'getAddys'>>,
    getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) =>
      singleQuery(publicClient!, call.getUndyHq(...args)) as Promise<CallReturn<'getUndyHq'>>,
    canMintUndy: (...args: ExtractArgs<Contract['calls']['canMintUndy']>) =>
      singleQuery(publicClient!, call.canMintUndy(...args)) as Promise<CallReturn<'canMintUndy'>>,
    isPaused: (...args: ExtractArgs<Contract['calls']['isPaused']>) =>
      singleQuery(publicClient!, call.isPaused(...args)) as Promise<CallReturn<'isPaused'>>,
    canClawbackTrialFunds: (...args: ExtractArgs<Contract['calls']['canClawbackTrialFunds']>) =>
      singleQuery(publicClient!, call.canClawbackTrialFunds(...args)) as Promise<CallReturn<'canClawbackTrialFunds'>>,
    doesWalletStillHaveTrialFunds: (...args: ExtractArgs<Contract['calls']['doesWalletStillHaveTrialFunds']>) =>
      singleQuery(publicClient!, call.doesWalletStillHaveTrialFunds(...args)) as Promise<
        CallReturn<'doesWalletStillHaveTrialFunds'>
      >,
    doesWalletStillHaveTrialFundsWithAddys: (
      ...args: ExtractArgs<Contract['calls']['doesWalletStillHaveTrialFundsWithAddys']>
    ) =>
      singleQuery(publicClient!, call.doesWalletStillHaveTrialFundsWithAddys(...args)) as Promise<
        CallReturn<'doesWalletStillHaveTrialFundsWithAddys'>
      >,
    getAssetUsdValueConfig: (...args: ExtractArgs<Contract['calls']['getAssetUsdValueConfig']>) =>
      singleQuery(publicClient!, call.getAssetUsdValueConfig(...args)) as Promise<CallReturn<'getAssetUsdValueConfig'>>,
    WETH: (...args: ExtractArgs<Contract['calls']['WETH']>) =>
      singleQuery(publicClient!, call.WETH(...args)) as Promise<CallReturn<'WETH'>>,
    ETH: (...args: ExtractArgs<Contract['calls']['ETH']>) =>
      singleQuery(publicClient!, call.ETH(...args)) as Promise<CallReturn<'ETH'>>,

    // Mutations
    pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => mutate(walletClient!, mutation.pause)(...args),
    recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) =>
      mutate(walletClient!, mutation.recoverFunds)(...args),
    recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) =>
      mutate(walletClient!, mutation.recoverFundsMany)(...args),
    createUserWallet: (...args: ExtractArgs<Contract['mutations']['createUserWallet']>) =>
      mutate(walletClient!, mutation.createUserWallet)(...args),
    createAgent: (...args: ExtractArgs<Contract['mutations']['createAgent']>) =>
      mutate(walletClient!, mutation.createAgent)(...args),
    clawBackTrialFunds: (...args: ExtractArgs<Contract['mutations']['clawBackTrialFunds']>) =>
      mutate(walletClient!, mutation.clawBackTrialFunds)(...args),
  }
}
