/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'numIds',
        type: 'uint256',
      },
    ],
    name: 'PriorityOraclePartnerIdsModified',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'staleTime',
        type: 'uint256',
      },
    ],
    name: 'StaleTimeSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevGov',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeInitiated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'prevGov',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'cancelledGov',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
    ],
    name: 'GovChangeCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'delayBlocks',
        type: 'uint256',
      },
    ],
    name: 'GovChangeDelaySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'NewAddyPending',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'NewAddyConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'NewPendingAddyCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'newAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'prevAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'version',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyUpdatePending',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'newAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'prevAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'version',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyUpdateConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'newAddr',
        type: 'address',
      },
      {
        indexed: true,
        name: 'prevAddr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyUpdateCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'version',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyDisablePending',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'version',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyDisableConfirmed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'addyId',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'description',
        type: 'string',
      },
      {
        indexed: true,
        name: 'addr',
        type: 'address',
      },
      {
        indexed: false,
        name: 'initiatedBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'confirmBlock',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyDisableCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: 'delayBlocks',
        type: 'uint256',
      },
      {
        indexed: false,
        name: 'registry',
        type: 'string',
      },
    ],
    name: 'AddyChangeDelaySet',
    type: 'event',
  },
  {
    inputs: [
      {
        name: '_address',
        type: 'address',
      },
    ],
    name: 'canGovern',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasPendingGovChange',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    name: 'changeGovernance',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmGovernanceChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelGovernanceChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    name: 'setGovernanceChangeDelay',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'governance',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingGov',
    outputs: [
      {
        components: [
          {
            name: 'newGov',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'govChangeDelay',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MIN_GOV_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_GOV_CHANGE_DELAY',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    name: 'getPrice',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_shouldRaise',
        type: 'bool',
      },
    ],
    name: 'getPrice',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'getUsdValue',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_shouldRaise',
        type: 'bool',
      },
    ],
    name: 'getUsdValue',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_usdValue',
        type: 'uint256',
      },
    ],
    name: 'getAssetAmount',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_usdValue',
        type: 'uint256',
      },
      {
        name: '_shouldRaise',
        type: 'bool',
      },
    ],
    name: 'getAssetAmount',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
    ],
    name: 'hasPriceFeed',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'getEthUsdValue',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_shouldRaise',
        type: 'bool',
      },
    ],
    name: 'getEthUsdValue',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_usdValue',
        type: 'uint256',
      },
    ],
    name: 'getEthAmount',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_usdValue',
        type: 'uint256',
      },
      {
        name: '_shouldRaise',
        type: 'bool',
      },
    ],
    name: 'getEthAmount',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'isValidNewOraclePartnerAddr',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
      {
        name: '_description',
        type: 'string',
      },
    ],
    name: 'registerNewOraclePartner',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'confirmNewOraclePartnerRegistration',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'cancelPendingNewOraclePartner',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    name: 'isValidOraclePartnerUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
      {
        name: '_newAddr',
        type: 'address',
      },
    ],
    name: 'updateOraclePartnerAddr',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
    ],
    name: 'confirmOraclePartnerUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
    ],
    name: 'cancelPendingOraclePartnerUpdate',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
    ],
    name: 'isValidOraclePartnerDisable',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
    ],
    name: 'disableOraclePartnerAddr',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
    ],
    name: 'confirmOraclePartnerDisable',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
    ],
    name: 'cancelPendingOraclePartnerDisable',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    name: 'setOraclePartnerChangeDelay',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'oracleChangeDelay',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'setOraclePartnerChangeDelayToMin',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPriorityOraclePartnerIds',
    outputs: [
      {
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_priorityIds',
        type: 'uint256[]',
      },
    ],
    name: 'areValidPriorityOraclePartnerIds',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_priorityIds',
        type: 'uint256[]',
      },
    ],
    name: 'setPriorityOraclePartnerIds',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_staleTime',
        type: 'uint256',
      },
    ],
    name: 'isValidStaleTime',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_staleTime',
        type: 'uint256',
      },
    ],
    name: 'setStaleTime',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'numOraclePartnersRaw',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'isValidOraclePartnerAddr',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
    ],
    name: 'isValidOraclePartnerId',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'getOraclePartnerId',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
    ],
    name: 'getOraclePartnerAddr',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
    ],
    name: 'getOraclePartnerInfo',
    outputs: [
      {
        components: [
          {
            name: 'addr',
            type: 'address',
          },
          {
            name: 'version',
            type: 'uint256',
          },
          {
            name: 'lastModified',
            type: 'uint256',
          },
          {
            name: 'description',
            type: 'string',
          },
        ],
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_oracleId',
        type: 'uint256',
      },
    ],
    name: 'getOraclePartnerDescription',
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNumOraclePartners',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getLastOraclePartnerAddr',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getLastOraclePartnerId',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    name: 'priorityOraclePartnerIds',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'staleTime',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ETH',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MIN_STALE_TIME',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_STALE_TIME',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_addyRegistry',
        type: 'address',
      },
      {
        name: '_ethAddr',
        type: 'address',
      },
      {
        name: '_minStaleTime',
        type: 'uint256',
      },
      {
        name: '_maxStaleTime',
        type: 'uint256',
      },
      {
        name: '_minOracleChangeDelay',
        type: 'uint256',
      },
      {
        name: '_maxOracleChangeDelay',
        type: 'uint256',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
] as const

export const deployAddress: Address | undefined = '0xe133F22aAdC23F9B7ca7A9f16B6D9A0C662Cf90b'

export type Contract = {
  calls: {
    canGovern: (address: `0x${string}`) => Promise<boolean>
    hasPendingGovChange: () => Promise<boolean>
    governance: () => Promise<`0x${string}`>
    pendingGov: () => Promise<{ newGov: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    govChangeDelay: () => Promise<bigint>
    MIN_GOV_CHANGE_DELAY: () => Promise<bigint>
    MAX_GOV_CHANGE_DELAY: () => Promise<bigint>
    getPrice: (asset: `0x${string}`, shouldRaise?: boolean) => Promise<bigint>
    getUsdValue: (asset: `0x${string}`, amount: bigint, shouldRaise?: boolean) => Promise<bigint>
    getAssetAmount: (asset: `0x${string}`, usdValue: bigint, shouldRaise?: boolean) => Promise<bigint>
    hasPriceFeed: (asset: `0x${string}`) => Promise<boolean>
    getEthUsdValue: (amount: bigint, shouldRaise?: boolean) => Promise<bigint>
    getEthAmount: (usdValue: bigint, shouldRaise?: boolean) => Promise<bigint>
    isValidNewOraclePartnerAddr: (addr: `0x${string}`) => Promise<boolean>
    isValidOraclePartnerUpdate: (oracleId: bigint, newAddr: `0x${string}`) => Promise<boolean>
    isValidOraclePartnerDisable: (oracleId: bigint) => Promise<boolean>
    oracleChangeDelay: () => Promise<bigint>
    getPriorityOraclePartnerIds: () => Promise<bigint[]>
    areValidPriorityOraclePartnerIds: (priorityIds: bigint[]) => Promise<boolean>
    isValidStaleTime: (staleTime: bigint) => Promise<boolean>
    numOraclePartnersRaw: () => Promise<bigint>
    isValidOraclePartnerAddr: (addr: `0x${string}`) => Promise<boolean>
    isValidOraclePartnerId: (oracleId: bigint) => Promise<boolean>
    getOraclePartnerId: (addr: `0x${string}`) => Promise<bigint>
    getOraclePartnerAddr: (oracleId: bigint) => Promise<`0x${string}`>
    getOraclePartnerInfo: (
      oracleId: bigint,
    ) => Promise<{ addr: `0x${string}`; version: bigint; lastModified: bigint; description: string }>
    getOraclePartnerDescription: (oracleId: bigint) => Promise<string>
    getNumOraclePartners: () => Promise<bigint>
    getLastOraclePartnerAddr: () => Promise<`0x${string}`>
    getLastOraclePartnerId: () => Promise<bigint>
    priorityOraclePartnerIds: (arg0: bigint) => Promise<bigint>
    staleTime: () => Promise<bigint>
    ETH: () => Promise<`0x${string}`>
    MIN_STALE_TIME: () => Promise<bigint>
    MAX_STALE_TIME: () => Promise<bigint>
  }
  mutations: {
    changeGovernance: (newGov: `0x${string}`) => Promise<void>
    confirmGovernanceChange: () => Promise<void>
    cancelGovernanceChange: () => Promise<void>
    setGovernanceChangeDelay: (numBlocks: bigint) => Promise<void>
    registerNewOraclePartner: (addr: `0x${string}`, description: string) => Promise<boolean>
    confirmNewOraclePartnerRegistration: (addr: `0x${string}`) => Promise<bigint>
    cancelPendingNewOraclePartner: (addr: `0x${string}`) => Promise<boolean>
    updateOraclePartnerAddr: (oracleId: bigint, newAddr: `0x${string}`) => Promise<boolean>
    confirmOraclePartnerUpdate: (oracleId: bigint) => Promise<boolean>
    cancelPendingOraclePartnerUpdate: (oracleId: bigint) => Promise<boolean>
    disableOraclePartnerAddr: (oracleId: bigint) => Promise<boolean>
    confirmOraclePartnerDisable: (oracleId: bigint) => Promise<boolean>
    cancelPendingOraclePartnerDisable: (oracleId: bigint) => Promise<boolean>
    setOraclePartnerChangeDelay: (numBlocks: bigint) => Promise<boolean>
    setOraclePartnerChangeDelayToMin: () => Promise<boolean>
    setPriorityOraclePartnerIds: (priorityIds: bigint[]) => Promise<boolean>
    setStaleTime: (staleTime: bigint) => Promise<boolean>
  }
  events: {
    PriorityOraclePartnerIdsModified: (numIds: bigint) => Promise<void>
    StaleTimeSet: (staleTime: bigint) => Promise<void>
    GovChangeInitiated: (prevGov: `0x${string}`, newGov: `0x${string}`, confirmBlock: bigint) => Promise<void>
    GovChangeConfirmed: (
      prevGov: `0x${string}`,
      newGov: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    GovChangeCancelled: (cancelledGov: `0x${string}`, initiatedBlock: bigint, confirmBlock: bigint) => Promise<void>
    GovChangeDelaySet: (delayBlocks: bigint) => Promise<void>
    NewAddyPending: (addr: `0x${string}`, description: string, confirmBlock: bigint, registry: string) => Promise<void>
    NewAddyConfirmed: (addr: `0x${string}`, addyId: bigint, description: string, registry: string) => Promise<void>
    NewPendingAddyCancelled: (
      description: string,
      addr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddyUpdatePending: (
      addyId: bigint,
      description: string,
      newAddr: `0x${string}`,
      prevAddr: `0x${string}`,
      version: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddyUpdateConfirmed: (
      addyId: bigint,
      description: string,
      newAddr: `0x${string}`,
      prevAddr: `0x${string}`,
      version: bigint,
      registry: string,
    ) => Promise<void>
    AddyUpdateCancelled: (
      addyId: bigint,
      description: string,
      newAddr: `0x${string}`,
      prevAddr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddyDisablePending: (
      addyId: bigint,
      description: string,
      addr: `0x${string}`,
      version: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddyDisableConfirmed: (
      addyId: bigint,
      description: string,
      addr: `0x${string}`,
      version: bigint,
      registry: string,
    ) => Promise<void>
    AddyDisableCancelled: (
      addyId: bigint,
      description: string,
      addr: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
      registry: string,
    ) => Promise<void>
    AddyChangeDelaySet: (delayBlocks: bigint, registry: string) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'v0_3_OracleRegistry'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'v0_3_OracleRegistry' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => getRequest('canGovern', args),
  hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
    getRequest('hasPendingGovChange', args),
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => getRequest('governance', args),
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => getRequest('pendingGov', args),
  govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) => getRequest('govChangeDelay', args),
  MIN_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>) =>
    getRequest('MIN_GOV_CHANGE_DELAY', args),
  MAX_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>) =>
    getRequest('MAX_GOV_CHANGE_DELAY', args),
  getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) => getRequest('getPrice', args),
  getUsdValue: (...args: ExtractArgs<Contract['calls']['getUsdValue']>) => getRequest('getUsdValue', args),
  getAssetAmount: (...args: ExtractArgs<Contract['calls']['getAssetAmount']>) => getRequest('getAssetAmount', args),
  hasPriceFeed: (...args: ExtractArgs<Contract['calls']['hasPriceFeed']>) => getRequest('hasPriceFeed', args),
  getEthUsdValue: (...args: ExtractArgs<Contract['calls']['getEthUsdValue']>) => getRequest('getEthUsdValue', args),
  getEthAmount: (...args: ExtractArgs<Contract['calls']['getEthAmount']>) => getRequest('getEthAmount', args),
  isValidNewOraclePartnerAddr: (...args: ExtractArgs<Contract['calls']['isValidNewOraclePartnerAddr']>) =>
    getRequest('isValidNewOraclePartnerAddr', args),
  isValidOraclePartnerUpdate: (...args: ExtractArgs<Contract['calls']['isValidOraclePartnerUpdate']>) =>
    getRequest('isValidOraclePartnerUpdate', args),
  isValidOraclePartnerDisable: (...args: ExtractArgs<Contract['calls']['isValidOraclePartnerDisable']>) =>
    getRequest('isValidOraclePartnerDisable', args),
  oracleChangeDelay: (...args: ExtractArgs<Contract['calls']['oracleChangeDelay']>) =>
    getRequest('oracleChangeDelay', args),
  getPriorityOraclePartnerIds: (...args: ExtractArgs<Contract['calls']['getPriorityOraclePartnerIds']>) =>
    getRequest('getPriorityOraclePartnerIds', args),
  areValidPriorityOraclePartnerIds: (...args: ExtractArgs<Contract['calls']['areValidPriorityOraclePartnerIds']>) =>
    getRequest('areValidPriorityOraclePartnerIds', args),
  isValidStaleTime: (...args: ExtractArgs<Contract['calls']['isValidStaleTime']>) =>
    getRequest('isValidStaleTime', args),
  numOraclePartnersRaw: (...args: ExtractArgs<Contract['calls']['numOraclePartnersRaw']>) =>
    getRequest('numOraclePartnersRaw', args),
  isValidOraclePartnerAddr: (...args: ExtractArgs<Contract['calls']['isValidOraclePartnerAddr']>) =>
    getRequest('isValidOraclePartnerAddr', args),
  isValidOraclePartnerId: (...args: ExtractArgs<Contract['calls']['isValidOraclePartnerId']>) =>
    getRequest('isValidOraclePartnerId', args),
  getOraclePartnerId: (...args: ExtractArgs<Contract['calls']['getOraclePartnerId']>) =>
    getRequest('getOraclePartnerId', args),
  getOraclePartnerAddr: (...args: ExtractArgs<Contract['calls']['getOraclePartnerAddr']>) =>
    getRequest('getOraclePartnerAddr', args),
  getOraclePartnerInfo: (...args: ExtractArgs<Contract['calls']['getOraclePartnerInfo']>) =>
    getRequest('getOraclePartnerInfo', args),
  getOraclePartnerDescription: (...args: ExtractArgs<Contract['calls']['getOraclePartnerDescription']>) =>
    getRequest('getOraclePartnerDescription', args),
  getNumOraclePartners: (...args: ExtractArgs<Contract['calls']['getNumOraclePartners']>) =>
    getRequest('getNumOraclePartners', args),
  getLastOraclePartnerAddr: (...args: ExtractArgs<Contract['calls']['getLastOraclePartnerAddr']>) =>
    getRequest('getLastOraclePartnerAddr', args),
  getLastOraclePartnerId: (...args: ExtractArgs<Contract['calls']['getLastOraclePartnerId']>) =>
    getRequest('getLastOraclePartnerId', args),
  priorityOraclePartnerIds: (...args: ExtractArgs<Contract['calls']['priorityOraclePartnerIds']>) =>
    getRequest('priorityOraclePartnerIds', args),
  staleTime: (...args: ExtractArgs<Contract['calls']['staleTime']>) => getRequest('staleTime', args),
  ETH: (...args: ExtractArgs<Contract['calls']['ETH']>) => getRequest('ETH', args),
  MIN_STALE_TIME: (...args: ExtractArgs<Contract['calls']['MIN_STALE_TIME']>) => getRequest('MIN_STALE_TIME', args),
  MAX_STALE_TIME: (...args: ExtractArgs<Contract['calls']['MAX_STALE_TIME']>) => getRequest('MAX_STALE_TIME', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'v0_3_OracleRegistry' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'v0_3_OracleRegistry'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  changeGovernance: getMutation('changeGovernance'),
  confirmGovernanceChange: getMutation('confirmGovernanceChange'),
  cancelGovernanceChange: getMutation('cancelGovernanceChange'),
  setGovernanceChangeDelay: getMutation('setGovernanceChangeDelay'),
  registerNewOraclePartner: getMutation('registerNewOraclePartner'),
  confirmNewOraclePartnerRegistration: getMutation('confirmNewOraclePartnerRegistration'),
  cancelPendingNewOraclePartner: getMutation('cancelPendingNewOraclePartner'),
  updateOraclePartnerAddr: getMutation('updateOraclePartnerAddr'),
  confirmOraclePartnerUpdate: getMutation('confirmOraclePartnerUpdate'),
  cancelPendingOraclePartnerUpdate: getMutation('cancelPendingOraclePartnerUpdate'),
  disableOraclePartnerAddr: getMutation('disableOraclePartnerAddr'),
  confirmOraclePartnerDisable: getMutation('confirmOraclePartnerDisable'),
  cancelPendingOraclePartnerDisable: getMutation('cancelPendingOraclePartnerDisable'),
  setOraclePartnerChangeDelay: getMutation('setOraclePartnerChangeDelay'),
  setOraclePartnerChangeDelayToMin: getMutation('setOraclePartnerChangeDelayToMin'),
  setPriorityOraclePartnerIds: getMutation('setPriorityOraclePartnerIds'),
  setStaleTime: getMutation('setStaleTime'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => Promise<CallReturn<'canGovern'>>
  hasPendingGovChange: (
    ...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>
  ) => Promise<CallReturn<'hasPendingGovChange'>>
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => Promise<CallReturn<'governance'>>
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => Promise<CallReturn<'pendingGov'>>
  govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) => Promise<CallReturn<'govChangeDelay'>>
  MIN_GOV_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MIN_GOV_CHANGE_DELAY'>>
  MAX_GOV_CHANGE_DELAY: (
    ...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>
  ) => Promise<CallReturn<'MAX_GOV_CHANGE_DELAY'>>
  getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) => Promise<CallReturn<'getPrice'>>
  getUsdValue: (...args: ExtractArgs<Contract['calls']['getUsdValue']>) => Promise<CallReturn<'getUsdValue'>>
  getAssetAmount: (...args: ExtractArgs<Contract['calls']['getAssetAmount']>) => Promise<CallReturn<'getAssetAmount'>>
  hasPriceFeed: (...args: ExtractArgs<Contract['calls']['hasPriceFeed']>) => Promise<CallReturn<'hasPriceFeed'>>
  getEthUsdValue: (...args: ExtractArgs<Contract['calls']['getEthUsdValue']>) => Promise<CallReturn<'getEthUsdValue'>>
  getEthAmount: (...args: ExtractArgs<Contract['calls']['getEthAmount']>) => Promise<CallReturn<'getEthAmount'>>
  isValidNewOraclePartnerAddr: (
    ...args: ExtractArgs<Contract['calls']['isValidNewOraclePartnerAddr']>
  ) => Promise<CallReturn<'isValidNewOraclePartnerAddr'>>
  isValidOraclePartnerUpdate: (
    ...args: ExtractArgs<Contract['calls']['isValidOraclePartnerUpdate']>
  ) => Promise<CallReturn<'isValidOraclePartnerUpdate'>>
  isValidOraclePartnerDisable: (
    ...args: ExtractArgs<Contract['calls']['isValidOraclePartnerDisable']>
  ) => Promise<CallReturn<'isValidOraclePartnerDisable'>>
  oracleChangeDelay: (
    ...args: ExtractArgs<Contract['calls']['oracleChangeDelay']>
  ) => Promise<CallReturn<'oracleChangeDelay'>>
  getPriorityOraclePartnerIds: (
    ...args: ExtractArgs<Contract['calls']['getPriorityOraclePartnerIds']>
  ) => Promise<CallReturn<'getPriorityOraclePartnerIds'>>
  areValidPriorityOraclePartnerIds: (
    ...args: ExtractArgs<Contract['calls']['areValidPriorityOraclePartnerIds']>
  ) => Promise<CallReturn<'areValidPriorityOraclePartnerIds'>>
  isValidStaleTime: (
    ...args: ExtractArgs<Contract['calls']['isValidStaleTime']>
  ) => Promise<CallReturn<'isValidStaleTime'>>
  numOraclePartnersRaw: (
    ...args: ExtractArgs<Contract['calls']['numOraclePartnersRaw']>
  ) => Promise<CallReturn<'numOraclePartnersRaw'>>
  isValidOraclePartnerAddr: (
    ...args: ExtractArgs<Contract['calls']['isValidOraclePartnerAddr']>
  ) => Promise<CallReturn<'isValidOraclePartnerAddr'>>
  isValidOraclePartnerId: (
    ...args: ExtractArgs<Contract['calls']['isValidOraclePartnerId']>
  ) => Promise<CallReturn<'isValidOraclePartnerId'>>
  getOraclePartnerId: (
    ...args: ExtractArgs<Contract['calls']['getOraclePartnerId']>
  ) => Promise<CallReturn<'getOraclePartnerId'>>
  getOraclePartnerAddr: (
    ...args: ExtractArgs<Contract['calls']['getOraclePartnerAddr']>
  ) => Promise<CallReturn<'getOraclePartnerAddr'>>
  getOraclePartnerInfo: (
    ...args: ExtractArgs<Contract['calls']['getOraclePartnerInfo']>
  ) => Promise<CallReturn<'getOraclePartnerInfo'>>
  getOraclePartnerDescription: (
    ...args: ExtractArgs<Contract['calls']['getOraclePartnerDescription']>
  ) => Promise<CallReturn<'getOraclePartnerDescription'>>
  getNumOraclePartners: (
    ...args: ExtractArgs<Contract['calls']['getNumOraclePartners']>
  ) => Promise<CallReturn<'getNumOraclePartners'>>
  getLastOraclePartnerAddr: (
    ...args: ExtractArgs<Contract['calls']['getLastOraclePartnerAddr']>
  ) => Promise<CallReturn<'getLastOraclePartnerAddr'>>
  getLastOraclePartnerId: (
    ...args: ExtractArgs<Contract['calls']['getLastOraclePartnerId']>
  ) => Promise<CallReturn<'getLastOraclePartnerId'>>
  priorityOraclePartnerIds: (
    ...args: ExtractArgs<Contract['calls']['priorityOraclePartnerIds']>
  ) => Promise<CallReturn<'priorityOraclePartnerIds'>>
  staleTime: (...args: ExtractArgs<Contract['calls']['staleTime']>) => Promise<CallReturn<'staleTime'>>
  ETH: (...args: ExtractArgs<Contract['calls']['ETH']>) => Promise<CallReturn<'ETH'>>
  MIN_STALE_TIME: (...args: ExtractArgs<Contract['calls']['MIN_STALE_TIME']>) => Promise<CallReturn<'MIN_STALE_TIME'>>
  MAX_STALE_TIME: (...args: ExtractArgs<Contract['calls']['MAX_STALE_TIME']>) => Promise<CallReturn<'MAX_STALE_TIME'>>
  changeGovernance: (...args: ExtractArgs<Contract['mutations']['changeGovernance']>) => Promise<Address>
  confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) => Promise<Address>
  cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) => Promise<Address>
  setGovernanceChangeDelay: (
    ...args: ExtractArgs<Contract['mutations']['setGovernanceChangeDelay']>
  ) => Promise<Address>
  registerNewOraclePartner: (
    ...args: ExtractArgs<Contract['mutations']['registerNewOraclePartner']>
  ) => Promise<Address>
  confirmNewOraclePartnerRegistration: (
    ...args: ExtractArgs<Contract['mutations']['confirmNewOraclePartnerRegistration']>
  ) => Promise<Address>
  cancelPendingNewOraclePartner: (
    ...args: ExtractArgs<Contract['mutations']['cancelPendingNewOraclePartner']>
  ) => Promise<Address>
  updateOraclePartnerAddr: (...args: ExtractArgs<Contract['mutations']['updateOraclePartnerAddr']>) => Promise<Address>
  confirmOraclePartnerUpdate: (
    ...args: ExtractArgs<Contract['mutations']['confirmOraclePartnerUpdate']>
  ) => Promise<Address>
  cancelPendingOraclePartnerUpdate: (
    ...args: ExtractArgs<Contract['mutations']['cancelPendingOraclePartnerUpdate']>
  ) => Promise<Address>
  disableOraclePartnerAddr: (
    ...args: ExtractArgs<Contract['mutations']['disableOraclePartnerAddr']>
  ) => Promise<Address>
  confirmOraclePartnerDisable: (
    ...args: ExtractArgs<Contract['mutations']['confirmOraclePartnerDisable']>
  ) => Promise<Address>
  cancelPendingOraclePartnerDisable: (
    ...args: ExtractArgs<Contract['mutations']['cancelPendingOraclePartnerDisable']>
  ) => Promise<Address>
  setOraclePartnerChangeDelay: (
    ...args: ExtractArgs<Contract['mutations']['setOraclePartnerChangeDelay']>
  ) => Promise<Address>
  setOraclePartnerChangeDelayToMin: (
    ...args: ExtractArgs<Contract['mutations']['setOraclePartnerChangeDelayToMin']>
  ) => Promise<Address>
  setPriorityOraclePartnerIds: (
    ...args: ExtractArgs<Contract['mutations']['setPriorityOraclePartnerIds']>
  ) => Promise<Address>
  setStaleTime: (...args: ExtractArgs<Contract['mutations']['setStaleTime']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) =>
      singleQuery(publicClient!, call.canGovern(...args)) as Promise<CallReturn<'canGovern'>>,
    hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
      singleQuery(publicClient!, call.hasPendingGovChange(...args)) as Promise<CallReturn<'hasPendingGovChange'>>,
    governance: (...args: ExtractArgs<Contract['calls']['governance']>) =>
      singleQuery(publicClient!, call.governance(...args)) as Promise<CallReturn<'governance'>>,
    pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) =>
      singleQuery(publicClient!, call.pendingGov(...args)) as Promise<CallReturn<'pendingGov'>>,
    govChangeDelay: (...args: ExtractArgs<Contract['calls']['govChangeDelay']>) =>
      singleQuery(publicClient!, call.govChangeDelay(...args)) as Promise<CallReturn<'govChangeDelay'>>,
    MIN_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MIN_GOV_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MIN_GOV_CHANGE_DELAY(...args)) as Promise<CallReturn<'MIN_GOV_CHANGE_DELAY'>>,
    MAX_GOV_CHANGE_DELAY: (...args: ExtractArgs<Contract['calls']['MAX_GOV_CHANGE_DELAY']>) =>
      singleQuery(publicClient!, call.MAX_GOV_CHANGE_DELAY(...args)) as Promise<CallReturn<'MAX_GOV_CHANGE_DELAY'>>,
    getPrice: (...args: ExtractArgs<Contract['calls']['getPrice']>) =>
      singleQuery(publicClient!, call.getPrice(...args)) as Promise<CallReturn<'getPrice'>>,
    getUsdValue: (...args: ExtractArgs<Contract['calls']['getUsdValue']>) =>
      singleQuery(publicClient!, call.getUsdValue(...args)) as Promise<CallReturn<'getUsdValue'>>,
    getAssetAmount: (...args: ExtractArgs<Contract['calls']['getAssetAmount']>) =>
      singleQuery(publicClient!, call.getAssetAmount(...args)) as Promise<CallReturn<'getAssetAmount'>>,
    hasPriceFeed: (...args: ExtractArgs<Contract['calls']['hasPriceFeed']>) =>
      singleQuery(publicClient!, call.hasPriceFeed(...args)) as Promise<CallReturn<'hasPriceFeed'>>,
    getEthUsdValue: (...args: ExtractArgs<Contract['calls']['getEthUsdValue']>) =>
      singleQuery(publicClient!, call.getEthUsdValue(...args)) as Promise<CallReturn<'getEthUsdValue'>>,
    getEthAmount: (...args: ExtractArgs<Contract['calls']['getEthAmount']>) =>
      singleQuery(publicClient!, call.getEthAmount(...args)) as Promise<CallReturn<'getEthAmount'>>,
    isValidNewOraclePartnerAddr: (...args: ExtractArgs<Contract['calls']['isValidNewOraclePartnerAddr']>) =>
      singleQuery(publicClient!, call.isValidNewOraclePartnerAddr(...args)) as Promise<
        CallReturn<'isValidNewOraclePartnerAddr'>
      >,
    isValidOraclePartnerUpdate: (...args: ExtractArgs<Contract['calls']['isValidOraclePartnerUpdate']>) =>
      singleQuery(publicClient!, call.isValidOraclePartnerUpdate(...args)) as Promise<
        CallReturn<'isValidOraclePartnerUpdate'>
      >,
    isValidOraclePartnerDisable: (...args: ExtractArgs<Contract['calls']['isValidOraclePartnerDisable']>) =>
      singleQuery(publicClient!, call.isValidOraclePartnerDisable(...args)) as Promise<
        CallReturn<'isValidOraclePartnerDisable'>
      >,
    oracleChangeDelay: (...args: ExtractArgs<Contract['calls']['oracleChangeDelay']>) =>
      singleQuery(publicClient!, call.oracleChangeDelay(...args)) as Promise<CallReturn<'oracleChangeDelay'>>,
    getPriorityOraclePartnerIds: (...args: ExtractArgs<Contract['calls']['getPriorityOraclePartnerIds']>) =>
      singleQuery(publicClient!, call.getPriorityOraclePartnerIds(...args)) as Promise<
        CallReturn<'getPriorityOraclePartnerIds'>
      >,
    areValidPriorityOraclePartnerIds: (...args: ExtractArgs<Contract['calls']['areValidPriorityOraclePartnerIds']>) =>
      singleQuery(publicClient!, call.areValidPriorityOraclePartnerIds(...args)) as Promise<
        CallReturn<'areValidPriorityOraclePartnerIds'>
      >,
    isValidStaleTime: (...args: ExtractArgs<Contract['calls']['isValidStaleTime']>) =>
      singleQuery(publicClient!, call.isValidStaleTime(...args)) as Promise<CallReturn<'isValidStaleTime'>>,
    numOraclePartnersRaw: (...args: ExtractArgs<Contract['calls']['numOraclePartnersRaw']>) =>
      singleQuery(publicClient!, call.numOraclePartnersRaw(...args)) as Promise<CallReturn<'numOraclePartnersRaw'>>,
    isValidOraclePartnerAddr: (...args: ExtractArgs<Contract['calls']['isValidOraclePartnerAddr']>) =>
      singleQuery(publicClient!, call.isValidOraclePartnerAddr(...args)) as Promise<
        CallReturn<'isValidOraclePartnerAddr'>
      >,
    isValidOraclePartnerId: (...args: ExtractArgs<Contract['calls']['isValidOraclePartnerId']>) =>
      singleQuery(publicClient!, call.isValidOraclePartnerId(...args)) as Promise<CallReturn<'isValidOraclePartnerId'>>,
    getOraclePartnerId: (...args: ExtractArgs<Contract['calls']['getOraclePartnerId']>) =>
      singleQuery(publicClient!, call.getOraclePartnerId(...args)) as Promise<CallReturn<'getOraclePartnerId'>>,
    getOraclePartnerAddr: (...args: ExtractArgs<Contract['calls']['getOraclePartnerAddr']>) =>
      singleQuery(publicClient!, call.getOraclePartnerAddr(...args)) as Promise<CallReturn<'getOraclePartnerAddr'>>,
    getOraclePartnerInfo: (...args: ExtractArgs<Contract['calls']['getOraclePartnerInfo']>) =>
      singleQuery(publicClient!, call.getOraclePartnerInfo(...args)) as Promise<CallReturn<'getOraclePartnerInfo'>>,
    getOraclePartnerDescription: (...args: ExtractArgs<Contract['calls']['getOraclePartnerDescription']>) =>
      singleQuery(publicClient!, call.getOraclePartnerDescription(...args)) as Promise<
        CallReturn<'getOraclePartnerDescription'>
      >,
    getNumOraclePartners: (...args: ExtractArgs<Contract['calls']['getNumOraclePartners']>) =>
      singleQuery(publicClient!, call.getNumOraclePartners(...args)) as Promise<CallReturn<'getNumOraclePartners'>>,
    getLastOraclePartnerAddr: (...args: ExtractArgs<Contract['calls']['getLastOraclePartnerAddr']>) =>
      singleQuery(publicClient!, call.getLastOraclePartnerAddr(...args)) as Promise<
        CallReturn<'getLastOraclePartnerAddr'>
      >,
    getLastOraclePartnerId: (...args: ExtractArgs<Contract['calls']['getLastOraclePartnerId']>) =>
      singleQuery(publicClient!, call.getLastOraclePartnerId(...args)) as Promise<CallReturn<'getLastOraclePartnerId'>>,
    priorityOraclePartnerIds: (...args: ExtractArgs<Contract['calls']['priorityOraclePartnerIds']>) =>
      singleQuery(publicClient!, call.priorityOraclePartnerIds(...args)) as Promise<
        CallReturn<'priorityOraclePartnerIds'>
      >,
    staleTime: (...args: ExtractArgs<Contract['calls']['staleTime']>) =>
      singleQuery(publicClient!, call.staleTime(...args)) as Promise<CallReturn<'staleTime'>>,
    ETH: (...args: ExtractArgs<Contract['calls']['ETH']>) =>
      singleQuery(publicClient!, call.ETH(...args)) as Promise<CallReturn<'ETH'>>,
    MIN_STALE_TIME: (...args: ExtractArgs<Contract['calls']['MIN_STALE_TIME']>) =>
      singleQuery(publicClient!, call.MIN_STALE_TIME(...args)) as Promise<CallReturn<'MIN_STALE_TIME'>>,
    MAX_STALE_TIME: (...args: ExtractArgs<Contract['calls']['MAX_STALE_TIME']>) =>
      singleQuery(publicClient!, call.MAX_STALE_TIME(...args)) as Promise<CallReturn<'MAX_STALE_TIME'>>,

    // Mutations
    changeGovernance: (...args: ExtractArgs<Contract['mutations']['changeGovernance']>) =>
      mutate(walletClient!, mutation.changeGovernance)(...args),
    confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) =>
      mutate(walletClient!, mutation.confirmGovernanceChange)(...args),
    cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) =>
      mutate(walletClient!, mutation.cancelGovernanceChange)(...args),
    setGovernanceChangeDelay: (...args: ExtractArgs<Contract['mutations']['setGovernanceChangeDelay']>) =>
      mutate(walletClient!, mutation.setGovernanceChangeDelay)(...args),
    registerNewOraclePartner: (...args: ExtractArgs<Contract['mutations']['registerNewOraclePartner']>) =>
      mutate(walletClient!, mutation.registerNewOraclePartner)(...args),
    confirmNewOraclePartnerRegistration: (
      ...args: ExtractArgs<Contract['mutations']['confirmNewOraclePartnerRegistration']>
    ) => mutate(walletClient!, mutation.confirmNewOraclePartnerRegistration)(...args),
    cancelPendingNewOraclePartner: (...args: ExtractArgs<Contract['mutations']['cancelPendingNewOraclePartner']>) =>
      mutate(walletClient!, mutation.cancelPendingNewOraclePartner)(...args),
    updateOraclePartnerAddr: (...args: ExtractArgs<Contract['mutations']['updateOraclePartnerAddr']>) =>
      mutate(walletClient!, mutation.updateOraclePartnerAddr)(...args),
    confirmOraclePartnerUpdate: (...args: ExtractArgs<Contract['mutations']['confirmOraclePartnerUpdate']>) =>
      mutate(walletClient!, mutation.confirmOraclePartnerUpdate)(...args),
    cancelPendingOraclePartnerUpdate: (
      ...args: ExtractArgs<Contract['mutations']['cancelPendingOraclePartnerUpdate']>
    ) => mutate(walletClient!, mutation.cancelPendingOraclePartnerUpdate)(...args),
    disableOraclePartnerAddr: (...args: ExtractArgs<Contract['mutations']['disableOraclePartnerAddr']>) =>
      mutate(walletClient!, mutation.disableOraclePartnerAddr)(...args),
    confirmOraclePartnerDisable: (...args: ExtractArgs<Contract['mutations']['confirmOraclePartnerDisable']>) =>
      mutate(walletClient!, mutation.confirmOraclePartnerDisable)(...args),
    cancelPendingOraclePartnerDisable: (
      ...args: ExtractArgs<Contract['mutations']['cancelPendingOraclePartnerDisable']>
    ) => mutate(walletClient!, mutation.cancelPendingOraclePartnerDisable)(...args),
    setOraclePartnerChangeDelay: (...args: ExtractArgs<Contract['mutations']['setOraclePartnerChangeDelay']>) =>
      mutate(walletClient!, mutation.setOraclePartnerChangeDelay)(...args),
    setOraclePartnerChangeDelayToMin: (
      ...args: ExtractArgs<Contract['mutations']['setOraclePartnerChangeDelayToMin']>
    ) => mutate(walletClient!, mutation.setOraclePartnerChangeDelayToMin)(...args),
    setPriorityOraclePartnerIds: (...args: ExtractArgs<Contract['mutations']['setPriorityOraclePartnerIds']>) =>
      mutate(walletClient!, mutation.setPriorityOraclePartnerIds)(...args),
    setStaleTime: (...args: ExtractArgs<Contract['mutations']['setStaleTime']>) =>
      mutate(walletClient!, mutation.setStaleTime)(...args),
  }
}
