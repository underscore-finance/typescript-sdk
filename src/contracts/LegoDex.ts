/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'swapTokens',
    inputs: [
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_minAmountOut',
        type: 'uint256',
      },
      {
        name: '_tokenPath',
        type: 'address[]',
      },
      {
        name: '_poolPath',
        type: 'address[]',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'swapTokens',
    inputs: [
      {
        name: '_amountIn',
        type: 'uint256',
      },
      {
        name: '_minAmountOut',
        type: 'uint256',
      },
      {
        name: '_tokenPath',
        type: 'address[]',
      },
      {
        name: '_poolPath',
        type: 'address[]',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_oracleRegistry',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'addLiquidity',
    inputs: [
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_tickLower',
        type: 'int24',
      },
      {
        name: '_tickUpper',
        type: 'int24',
      },
      {
        name: '_amountA',
        type: 'uint256',
      },
      {
        name: '_amountB',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_minLpAmount',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_oracleRegistry',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'removeLiquidity',
    inputs: [
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpToken',
        type: 'address',
      },
      {
        name: '_liqToRemove',
        type: 'uint256',
      },
      {
        name: '_minAmountA',
        type: 'uint256',
      },
      {
        name: '_minAmountB',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_oracleRegistry',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getLpToken',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPoolForLpToken',
    inputs: [
      {
        name: '_lpToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getSwapAmountOut',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getSwapAmountIn',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddLiqAmountsIn',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_availAmountA',
        type: 'uint256',
      },
      {
        name: '_availAmountB',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getRemoveLiqAmountsOut',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_tokenA',
        type: 'address',
      },
      {
        name: '_tokenB',
        type: 'address',
      },
      {
        name: '_lpAmount',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPriceUnsafe',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_targetToken',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getPriceUnsafe',
    inputs: [
      {
        name: '_pool',
        type: 'address',
      },
      {
        name: '_targetToken',
        type: 'address',
      },
      {
        name: '_oracleRegistry',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getBestSwapAmountOut',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountIn',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getBestSwapAmountIn',
    inputs: [
      {
        name: '_tokenIn',
        type: 'address',
      },
      {
        name: '_tokenOut',
        type: 'address',
      },
      {
        name: '_amountOut',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'address',
      },
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getCoreRouterPool',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
] as const

export const deployAddress: Address | undefined = undefined

export type Contract = {
  calls: {
    getLpToken: (pool: `0x${string}`) => Promise<`0x${string}`>
    getPoolForLpToken: (lpToken: `0x${string}`) => Promise<`0x${string}`>
    getSwapAmountOut: (
      pool: `0x${string}`,
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn: bigint,
    ) => Promise<bigint>
    getSwapAmountIn: (
      pool: `0x${string}`,
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountOut: bigint,
    ) => Promise<bigint>
    getAddLiqAmountsIn: (
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      availAmountA: bigint,
      availAmountB: bigint,
    ) => Promise<[bigint, bigint, bigint]>
    getRemoveLiqAmountsOut: (
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      lpAmount: bigint,
    ) => Promise<[bigint, bigint]>
    getPriceUnsafe: (pool: `0x${string}`, targetToken: `0x${string}`, oracleRegistry?: `0x${string}`) => Promise<bigint>
    getBestSwapAmountOut: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountIn: bigint,
    ) => Promise<[`0x${string}`, bigint]>
    getBestSwapAmountIn: (
      tokenIn: `0x${string}`,
      tokenOut: `0x${string}`,
      amountOut: bigint,
    ) => Promise<[`0x${string}`, bigint]>
    getCoreRouterPool: () => Promise<`0x${string}`>
  }
  mutations: {
    swapTokens: (
      amountIn: bigint,
      minAmountOut: bigint,
      tokenPath: `0x${string}`[],
      poolPath: `0x${string}`[],
      recipient: `0x${string}`,
      oracleRegistry?: `0x${string}`,
    ) => Promise<[bigint, bigint, bigint, bigint]>
    addLiquidity: (
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      tickLower: unknown,
      tickUpper: unknown,
      amountA: bigint,
      amountB: bigint,
      minAmountA: bigint,
      minAmountB: bigint,
      minLpAmount: bigint,
      recipient: `0x${string}`,
      oracleRegistry?: `0x${string}`,
    ) => Promise<[bigint, bigint, bigint, bigint, bigint, bigint, bigint]>
    removeLiquidity: (
      nftTokenId: bigint,
      pool: `0x${string}`,
      tokenA: `0x${string}`,
      tokenB: `0x${string}`,
      lpToken: `0x${string}`,
      liqToRemove: bigint,
      minAmountA: bigint,
      minAmountB: bigint,
      recipient: `0x${string}`,
      oracleRegistry?: `0x${string}`,
    ) => Promise<[bigint, bigint, bigint, bigint, bigint, boolean]>
  }
  events: {}
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'LegoDex'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'LegoDex' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getLpToken: (...args: ExtractArgs<Contract['calls']['getLpToken']>) => getRequest('getLpToken', args),
  getPoolForLpToken: (...args: ExtractArgs<Contract['calls']['getPoolForLpToken']>) =>
    getRequest('getPoolForLpToken', args),
  getSwapAmountOut: (...args: ExtractArgs<Contract['calls']['getSwapAmountOut']>) =>
    getRequest('getSwapAmountOut', args),
  getSwapAmountIn: (...args: ExtractArgs<Contract['calls']['getSwapAmountIn']>) => getRequest('getSwapAmountIn', args),
  getAddLiqAmountsIn: (...args: ExtractArgs<Contract['calls']['getAddLiqAmountsIn']>) =>
    getRequest('getAddLiqAmountsIn', args),
  getRemoveLiqAmountsOut: (...args: ExtractArgs<Contract['calls']['getRemoveLiqAmountsOut']>) =>
    getRequest('getRemoveLiqAmountsOut', args),
  getPriceUnsafe: (...args: ExtractArgs<Contract['calls']['getPriceUnsafe']>) => getRequest('getPriceUnsafe', args),
  getBestSwapAmountOut: (...args: ExtractArgs<Contract['calls']['getBestSwapAmountOut']>) =>
    getRequest('getBestSwapAmountOut', args),
  getBestSwapAmountIn: (...args: ExtractArgs<Contract['calls']['getBestSwapAmountIn']>) =>
    getRequest('getBestSwapAmountIn', args),
  getCoreRouterPool: (...args: ExtractArgs<Contract['calls']['getCoreRouterPool']>) =>
    getRequest('getCoreRouterPool', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'LegoDex' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'LegoDex'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  swapTokens: getMutation('swapTokens'),
  addLiquidity: getMutation('addLiquidity'),
  removeLiquidity: getMutation('removeLiquidity'),
}

export type SDK = {
  getLpToken: (...args: ExtractArgs<Contract['calls']['getLpToken']>) => Promise<CallReturn<'getLpToken'>>
  getPoolForLpToken: (
    ...args: ExtractArgs<Contract['calls']['getPoolForLpToken']>
  ) => Promise<CallReturn<'getPoolForLpToken'>>
  getSwapAmountOut: (
    ...args: ExtractArgs<Contract['calls']['getSwapAmountOut']>
  ) => Promise<CallReturn<'getSwapAmountOut'>>
  getSwapAmountIn: (
    ...args: ExtractArgs<Contract['calls']['getSwapAmountIn']>
  ) => Promise<CallReturn<'getSwapAmountIn'>>
  getAddLiqAmountsIn: (
    ...args: ExtractArgs<Contract['calls']['getAddLiqAmountsIn']>
  ) => Promise<CallReturn<'getAddLiqAmountsIn'>>
  getRemoveLiqAmountsOut: (
    ...args: ExtractArgs<Contract['calls']['getRemoveLiqAmountsOut']>
  ) => Promise<CallReturn<'getRemoveLiqAmountsOut'>>
  getPriceUnsafe: (...args: ExtractArgs<Contract['calls']['getPriceUnsafe']>) => Promise<CallReturn<'getPriceUnsafe'>>
  getBestSwapAmountOut: (
    ...args: ExtractArgs<Contract['calls']['getBestSwapAmountOut']>
  ) => Promise<CallReturn<'getBestSwapAmountOut'>>
  getBestSwapAmountIn: (
    ...args: ExtractArgs<Contract['calls']['getBestSwapAmountIn']>
  ) => Promise<CallReturn<'getBestSwapAmountIn'>>
  getCoreRouterPool: (
    ...args: ExtractArgs<Contract['calls']['getCoreRouterPool']>
  ) => Promise<CallReturn<'getCoreRouterPool'>>
  swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) => Promise<Address>
  addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) => Promise<Address>
  removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) => Promise<Address>
}

export function toSdk(address: Address, publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    // Queries
    getLpToken: (...args: ExtractArgs<Contract['calls']['getLpToken']>) =>
      singleQuery(publicClient!, call.getLpToken(...args).at(address)) as Promise<CallReturn<'getLpToken'>>,
    getPoolForLpToken: (...args: ExtractArgs<Contract['calls']['getPoolForLpToken']>) =>
      singleQuery(publicClient!, call.getPoolForLpToken(...args).at(address)) as Promise<
        CallReturn<'getPoolForLpToken'>
      >,
    getSwapAmountOut: (...args: ExtractArgs<Contract['calls']['getSwapAmountOut']>) =>
      singleQuery(publicClient!, call.getSwapAmountOut(...args).at(address)) as Promise<CallReturn<'getSwapAmountOut'>>,
    getSwapAmountIn: (...args: ExtractArgs<Contract['calls']['getSwapAmountIn']>) =>
      singleQuery(publicClient!, call.getSwapAmountIn(...args).at(address)) as Promise<CallReturn<'getSwapAmountIn'>>,
    getAddLiqAmountsIn: (...args: ExtractArgs<Contract['calls']['getAddLiqAmountsIn']>) =>
      singleQuery(publicClient!, call.getAddLiqAmountsIn(...args).at(address)) as Promise<
        CallReturn<'getAddLiqAmountsIn'>
      >,
    getRemoveLiqAmountsOut: (...args: ExtractArgs<Contract['calls']['getRemoveLiqAmountsOut']>) =>
      singleQuery(publicClient!, call.getRemoveLiqAmountsOut(...args).at(address)) as Promise<
        CallReturn<'getRemoveLiqAmountsOut'>
      >,
    getPriceUnsafe: (...args: ExtractArgs<Contract['calls']['getPriceUnsafe']>) =>
      singleQuery(publicClient!, call.getPriceUnsafe(...args).at(address)) as Promise<CallReturn<'getPriceUnsafe'>>,
    getBestSwapAmountOut: (...args: ExtractArgs<Contract['calls']['getBestSwapAmountOut']>) =>
      singleQuery(publicClient!, call.getBestSwapAmountOut(...args).at(address)) as Promise<
        CallReturn<'getBestSwapAmountOut'>
      >,
    getBestSwapAmountIn: (...args: ExtractArgs<Contract['calls']['getBestSwapAmountIn']>) =>
      singleQuery(publicClient!, call.getBestSwapAmountIn(...args).at(address)) as Promise<
        CallReturn<'getBestSwapAmountIn'>
      >,
    getCoreRouterPool: (...args: ExtractArgs<Contract['calls']['getCoreRouterPool']>) =>
      singleQuery(publicClient!, call.getCoreRouterPool(...args).at(address)) as Promise<
        CallReturn<'getCoreRouterPool'>
      >,

    // Mutations
    swapTokens: (...args: ExtractArgs<Contract['mutations']['swapTokens']>) =>
      mutate(walletClient!, mutation.swapTokens, { address })(...args),
    addLiquidity: (...args: ExtractArgs<Contract['mutations']['addLiquidity']>) =>
      mutate(walletClient!, mutation.addLiquidity, { address })(...args),
    removeLiquidity: (...args: ExtractArgs<Contract['mutations']['removeLiquidity']>) =>
      mutate(walletClient!, mutation.removeLiquidity, { address })(...args),
  }
}
