/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery, mutate } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    name: 'PendingRecoverFundsAction',
    inputs: [
      {
        name: 'contractAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingRecoverFundsManyAction',
    inputs: [
      {
        name: 'contractAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'numAssets',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingRecoverNftAction',
    inputs: [
      {
        name: 'contractAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collection',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nftTokenId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingLootAdjustAction',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newClaimable',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingRecoverDepositRewardsAction',
    inputs: [
      {
        name: 'lootAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AssetDataUpdated',
    inputs: [
      {
        name: 'numUsers',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'AllAssetDataUpdated',
    inputs: [
      {
        name: 'numUsers',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PendingSetEjectionModeAction',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'shouldEject',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'confirmationBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actionId',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'PauseExecuted',
    inputs: [
      {
        name: 'contractAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'shouldPause',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'RecoverFundsExecuted',
    inputs: [
      {
        name: 'contractAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'RecoverFundsManyExecuted',
    inputs: [
      {
        name: 'contractAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'numAssets',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'RecoverNftExecuted',
    inputs: [
      {
        name: 'contractAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collection',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nftTokenId',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ClawbackTrialFundsExecuted',
    inputs: [
      {
        name: 'numUsers',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'DepositPointsUpdated',
    inputs: [
      {
        name: 'numUsers',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'LootClaimedForUser',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'caller',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'LootClaimedForManyUsers',
    inputs: [
      {
        name: 'numUsers',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'LootAdjusted',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'asset',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newClaimable',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'RecoverDepositRewardsExecuted',
    inputs: [
      {
        name: 'lootAddr',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'SetEjectionModeExecuted',
    inputs: [
      {
        name: 'user',
        type: 'address',
        indexed: true,
      },
      {
        name: 'shouldEject',
        type: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeTimeLockModified',
    inputs: [
      {
        name: 'prevTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newTimeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ExpirationSet',
    inputs: [
      {
        name: 'expiration',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'ActionTimeLockSet',
    inputs: [
      {
        name: 'newTimeLock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'prevTimeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeStarted',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeConfirmed',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovChangeCancelled',
    inputs: [
      {
        name: 'cancelledGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'initiatedBlock',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'confirmBlock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'GovRelinquished',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    name: 'UndyHqSetupFinished',
    inputs: [
      {
        name: 'prevGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newGov',
        type: 'address',
        indexed: true,
      },
      {
        name: 'timeLock',
        type: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
    type: 'event',
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getAddys',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'hq',
            type: 'address',
          },
          {
            name: 'undyToken',
            type: 'address',
          },
          {
            name: 'ledger',
            type: 'address',
          },
          {
            name: 'missionControl',
            type: 'address',
          },
          {
            name: 'legoBook',
            type: 'address',
          },
          {
            name: 'switchboard',
            type: 'address',
          },
          {
            name: 'hatchery',
            type: 'address',
          },
          {
            name: 'lootDistributor',
            type: 'address',
          },
          {
            name: 'appraiser',
            type: 'address',
          },
          {
            name: 'walletBackpack',
            type: 'address',
          },
          {
            name: 'billing',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHq',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getUndyHqFromGov',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canGovern',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getGovernors',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasPendingGovChange',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'startGovernanceChange',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'confirmGovernanceChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelGovernanceChange',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'relinquishGov',
    inputs: [],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setGovTimeLock',
    inputs: [
      {
        name: '_numBlocks',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidGovTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'minGovChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxGovChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'finishUndyHqSetup',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'finishUndyHqSetup',
    inputs: [
      {
        name: '_newGov',
        type: 'address',
      },
      {
        name: '_timeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'governance',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingGov',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'newGov',
            type: 'address',
          },
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'numGovChanges',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'govChangeTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canConfirmAction',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isExpired',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'hasPendingAction',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'getActionConfirmationBlock',
    inputs: [
      {
        name: '_actionId',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidActionTimeLock',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'minActionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'maxActionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setExpiration',
    inputs: [
      {
        name: '_expiration',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLockAfterSetup',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setActionTimeLockAfterSetup',
    inputs: [
      {
        name: '_newTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingActions',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'initiatedBlock',
            type: 'uint256',
          },
          {
            name: 'confirmBlock',
            type: 'uint256',
          },
          {
            name: 'expiration',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'actionId',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'actionTimeLock',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'expiration',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'pause',
    inputs: [
      {
        name: '_contractAddr',
        type: 'address',
      },
      {
        name: '_shouldPause',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFunds',
    inputs: [
      {
        name: '_contractAddr',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverFundsMany',
    inputs: [
      {
        name: '_contractAddr',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverNft',
    inputs: [
      {
        name: '_addr',
        type: 'address',
      },
      {
        name: '_collection',
        type: 'address',
      },
      {
        name: '_nftTokenId',
        type: 'uint256',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'clawBackTrialFunds',
    inputs: [
      {
        name: '_users',
        type: 'address[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimLootForUser',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'claimLootForManyUsers',
    inputs: [
      {
        name: '_users',
        type: 'address[]',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'adjustLoot',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_newClaimable',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'recoverDepositRewards',
    inputs: [
      {
        name: '_lootAddr',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'updateDepositPoints',
    inputs: [
      {
        name: '_users',
        type: 'address[]',
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'updateAssetData',
    inputs: [
      {
        name: '_bundles',
        type: 'tuple[]',
        components: [
          {
            name: 'user',
            type: 'address',
          },
          {
            name: 'legoId',
            type: 'uint256',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'shouldCheckYield',
            type: 'bool',
          },
        ],
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'updateAllAssetData',
    inputs: [
      {
        name: '_bundles',
        type: 'tuple[]',
        components: [
          {
            name: 'user',
            type: 'address',
          },
          {
            name: 'shouldCheckYield',
            type: 'bool',
          },
        ],
      },
    ],
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'setEjectionMode',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_shouldEject',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'executePendingAction',
    inputs: [
      {
        name: '_aid',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    name: 'cancelPendingAction',
    inputs: [
      {
        name: '_aid',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'actionType',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingPauseActions',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'contractAddr',
            type: 'address',
          },
          {
            name: 'shouldPause',
            type: 'bool',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingRecoverFundsActions',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'contractAddr',
            type: 'address',
          },
          {
            name: 'recipient',
            type: 'address',
          },
          {
            name: 'asset',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingRecoverFundsManyActions',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'contractAddr',
            type: 'address',
          },
          {
            name: 'recipient',
            type: 'address',
          },
          {
            name: 'assets',
            type: 'address[]',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingRecoverNftActions',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'contractAddr',
            type: 'address',
          },
          {
            name: 'collection',
            type: 'address',
          },
          {
            name: 'nftTokenId',
            type: 'uint256',
          },
          {
            name: 'recipient',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingLootAdjustActions',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'user',
            type: 'address',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'newClaimable',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingRecoverDepositRewardsActions',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'lootAddr',
            type: 'address',
          },
          {
            name: 'recipient',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'pendingSetEjectionModeActions',
    inputs: [
      {
        name: 'arg0',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'user',
            type: 'address',
          },
          {
            name: 'shouldEject',
            type: 'bool',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_undyHq',
        type: 'address',
      },
      {
        name: '_tempGov',
        type: 'address',
      },
      {
        name: '_minConfigTimeLock',
        type: 'uint256',
      },
      {
        name: '_maxConfigTimeLock',
        type: 'uint256',
      },
    ],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0xf1F5938559884D3c54400b417292B93cd81C368c'

export type Contract = {
  calls: {
    getAddys: () => Promise<{
      hq: `0x${string}`
      undyToken: `0x${string}`
      ledger: `0x${string}`
      missionControl: `0x${string}`
      legoBook: `0x${string}`
      switchboard: `0x${string}`
      hatchery: `0x${string}`
      lootDistributor: `0x${string}`
      appraiser: `0x${string}`
      walletBackpack: `0x${string}`
      billing: `0x${string}`
    }>
    getUndyHq: () => Promise<`0x${string}`>
    getUndyHqFromGov: () => Promise<`0x${string}`>
    canGovern: (addr: `0x${string}`) => Promise<boolean>
    getGovernors: () => Promise<`0x${string}`[]>
    hasPendingGovChange: () => Promise<boolean>
    isValidGovTimeLock: (newTimeLock: bigint) => Promise<boolean>
    minGovChangeTimeLock: () => Promise<bigint>
    maxGovChangeTimeLock: () => Promise<bigint>
    governance: () => Promise<`0x${string}`>
    pendingGov: () => Promise<{ newGov: `0x${string}`; initiatedBlock: bigint; confirmBlock: bigint }>
    numGovChanges: () => Promise<bigint>
    govChangeTimeLock: () => Promise<bigint>
    canConfirmAction: (actionId: bigint) => Promise<boolean>
    isExpired: (actionId: bigint) => Promise<boolean>
    hasPendingAction: (actionId: bigint) => Promise<boolean>
    getActionConfirmationBlock: (actionId: bigint) => Promise<bigint>
    isValidActionTimeLock: (newTimeLock: bigint) => Promise<boolean>
    minActionTimeLock: () => Promise<bigint>
    maxActionTimeLock: () => Promise<bigint>
    pendingActions: (arg0: bigint) => Promise<{ initiatedBlock: bigint; confirmBlock: bigint; expiration: bigint }>
    actionId: () => Promise<bigint>
    actionTimeLock: () => Promise<bigint>
    expiration: () => Promise<bigint>
    actionType: (arg0: bigint) => Promise<bigint>
    pendingPauseActions: (arg0: bigint) => Promise<{ contractAddr: `0x${string}`; shouldPause: boolean }>
    pendingRecoverFundsActions: (
      arg0: bigint,
    ) => Promise<{ contractAddr: `0x${string}`; recipient: `0x${string}`; asset: `0x${string}` }>
    pendingRecoverFundsManyActions: (
      arg0: bigint,
    ) => Promise<{ contractAddr: `0x${string}`; recipient: `0x${string}`; assets: `0x${string}`[] }>
    pendingRecoverNftActions: (
      arg0: bigint,
    ) => Promise<{
      contractAddr: `0x${string}`
      collection: `0x${string}`
      nftTokenId: bigint
      recipient: `0x${string}`
    }>
    pendingLootAdjustActions: (
      arg0: bigint,
    ) => Promise<{ user: `0x${string}`; asset: `0x${string}`; newClaimable: bigint }>
    pendingRecoverDepositRewardsActions: (
      arg0: bigint,
    ) => Promise<{ lootAddr: `0x${string}`; recipient: `0x${string}` }>
    pendingSetEjectionModeActions: (arg0: bigint) => Promise<{ user: `0x${string}`; shouldEject: boolean }>
  }
  mutations: {
    startGovernanceChange: (newGov: `0x${string}`) => Promise<void>
    confirmGovernanceChange: () => Promise<void>
    cancelGovernanceChange: () => Promise<void>
    relinquishGov: () => Promise<void>
    setGovTimeLock: (numBlocks: bigint) => Promise<boolean>
    finishUndyHqSetup: (newGov: `0x${string}`, timeLock?: bigint) => Promise<boolean>
    setActionTimeLock: (newTimeLock: bigint) => Promise<boolean>
    setExpiration: (expiration: bigint) => Promise<boolean>
    setActionTimeLockAfterSetup: (newTimeLock?: bigint) => Promise<boolean>
    pause: (contractAddr: `0x${string}`, shouldPause: boolean) => Promise<boolean>
    recoverFunds: (contractAddr: `0x${string}`, recipient: `0x${string}`, asset: `0x${string}`) => Promise<bigint>
    recoverFundsMany: (
      contractAddr: `0x${string}`,
      recipient: `0x${string}`,
      assets: `0x${string}`[],
    ) => Promise<bigint>
    recoverNft: (
      addr: `0x${string}`,
      collection: `0x${string}`,
      nftTokenId: bigint,
      recipient: `0x${string}`,
    ) => Promise<bigint>
    clawBackTrialFunds: (users: `0x${string}`[]) => Promise<boolean>
    claimLootForUser: (user: `0x${string}`) => Promise<void>
    claimLootForManyUsers: (users: `0x${string}`[]) => Promise<void>
    adjustLoot: (user: `0x${string}`, asset: `0x${string}`, newClaimable: bigint) => Promise<bigint>
    recoverDepositRewards: (lootAddr: `0x${string}`, recipient: `0x${string}`) => Promise<bigint>
    updateDepositPoints: (users: `0x${string}`[]) => Promise<void>
    updateAssetData: (
      bundles: { user: `0x${string}`; legoId: bigint; asset: `0x${string}`; shouldCheckYield: boolean }[],
    ) => Promise<void>
    updateAllAssetData: (bundles: { user: `0x${string}`; shouldCheckYield: boolean }[]) => Promise<void>
    setEjectionMode: (user: `0x${string}`, shouldEject: boolean) => Promise<bigint>
    executePendingAction: (aid: bigint) => Promise<boolean>
    cancelPendingAction: (aid: bigint) => Promise<boolean>
  }
  events: {
    PendingRecoverFundsAction: (
      contractAddr: `0x${string}`,
      recipient: `0x${string}`,
      asset: `0x${string}`,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    PendingRecoverFundsManyAction: (
      contractAddr: `0x${string}`,
      recipient: `0x${string}`,
      numAssets: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    PendingRecoverNftAction: (
      contractAddr: `0x${string}`,
      collection: `0x${string}`,
      nftTokenId: bigint,
      recipient: `0x${string}`,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    PendingLootAdjustAction: (
      user: `0x${string}`,
      asset: `0x${string}`,
      newClaimable: bigint,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    PendingRecoverDepositRewardsAction: (
      lootAddr: `0x${string}`,
      recipient: `0x${string}`,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    AssetDataUpdated: (numUsers: bigint, caller: `0x${string}`) => Promise<void>
    AllAssetDataUpdated: (numUsers: bigint, caller: `0x${string}`) => Promise<void>
    PendingSetEjectionModeAction: (
      user: `0x${string}`,
      shouldEject: boolean,
      confirmationBlock: bigint,
      actionId: bigint,
    ) => Promise<void>
    PauseExecuted: (contractAddr: `0x${string}`, shouldPause: boolean) => Promise<void>
    RecoverFundsExecuted: (contractAddr: `0x${string}`, recipient: `0x${string}`, asset: `0x${string}`) => Promise<void>
    RecoverFundsManyExecuted: (
      contractAddr: `0x${string}`,
      recipient: `0x${string}`,
      numAssets: bigint,
    ) => Promise<void>
    RecoverNftExecuted: (
      contractAddr: `0x${string}`,
      collection: `0x${string}`,
      nftTokenId: bigint,
      recipient: `0x${string}`,
    ) => Promise<void>
    ClawbackTrialFundsExecuted: (numUsers: bigint) => Promise<void>
    DepositPointsUpdated: (numUsers: bigint, caller: `0x${string}`) => Promise<void>
    LootClaimedForUser: (user: `0x${string}`, caller: `0x${string}`) => Promise<void>
    LootClaimedForManyUsers: (numUsers: bigint, caller: `0x${string}`) => Promise<void>
    LootAdjusted: (user: `0x${string}`, asset: `0x${string}`, newClaimable: bigint) => Promise<void>
    RecoverDepositRewardsExecuted: (lootAddr: `0x${string}`, recipient: `0x${string}`) => Promise<void>
    SetEjectionModeExecuted: (user: `0x${string}`, shouldEject: boolean) => Promise<void>
    GovChangeTimeLockModified: (prevTimeLock: bigint, newTimeLock: bigint) => Promise<void>
    ExpirationSet: (expiration: bigint) => Promise<void>
    ActionTimeLockSet: (newTimeLock: bigint, prevTimeLock: bigint) => Promise<void>
    GovChangeStarted: (prevGov: `0x${string}`, newGov: `0x${string}`, confirmBlock: bigint) => Promise<void>
    GovChangeConfirmed: (
      prevGov: `0x${string}`,
      newGov: `0x${string}`,
      initiatedBlock: bigint,
      confirmBlock: bigint,
    ) => Promise<void>
    GovChangeCancelled: (cancelledGov: `0x${string}`, initiatedBlock: bigint, confirmBlock: bigint) => Promise<void>
    GovRelinquished: (prevGov: `0x${string}`) => Promise<void>
    UndyHqSetupFinished: (prevGov: `0x${string}`, newGov: `0x${string}`, timeLock: bigint) => Promise<void>
  }
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'SwitchboardBravo'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'SwitchboardBravo' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => getRequest('getAddys', args),
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => getRequest('getUndyHq', args),
  getUndyHqFromGov: (...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>) =>
    getRequest('getUndyHqFromGov', args),
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => getRequest('canGovern', args),
  getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) => getRequest('getGovernors', args),
  hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
    getRequest('hasPendingGovChange', args),
  isValidGovTimeLock: (...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>) =>
    getRequest('isValidGovTimeLock', args),
  minGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>) =>
    getRequest('minGovChangeTimeLock', args),
  maxGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>) =>
    getRequest('maxGovChangeTimeLock', args),
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => getRequest('governance', args),
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => getRequest('pendingGov', args),
  numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) => getRequest('numGovChanges', args),
  govChangeTimeLock: (...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>) =>
    getRequest('govChangeTimeLock', args),
  canConfirmAction: (...args: ExtractArgs<Contract['calls']['canConfirmAction']>) =>
    getRequest('canConfirmAction', args),
  isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) => getRequest('isExpired', args),
  hasPendingAction: (...args: ExtractArgs<Contract['calls']['hasPendingAction']>) =>
    getRequest('hasPendingAction', args),
  getActionConfirmationBlock: (...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>) =>
    getRequest('getActionConfirmationBlock', args),
  isValidActionTimeLock: (...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>) =>
    getRequest('isValidActionTimeLock', args),
  minActionTimeLock: (...args: ExtractArgs<Contract['calls']['minActionTimeLock']>) =>
    getRequest('minActionTimeLock', args),
  maxActionTimeLock: (...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>) =>
    getRequest('maxActionTimeLock', args),
  pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) => getRequest('pendingActions', args),
  actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) => getRequest('actionId', args),
  actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) => getRequest('actionTimeLock', args),
  expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) => getRequest('expiration', args),
  actionType: (...args: ExtractArgs<Contract['calls']['actionType']>) => getRequest('actionType', args),
  pendingPauseActions: (...args: ExtractArgs<Contract['calls']['pendingPauseActions']>) =>
    getRequest('pendingPauseActions', args),
  pendingRecoverFundsActions: (...args: ExtractArgs<Contract['calls']['pendingRecoverFundsActions']>) =>
    getRequest('pendingRecoverFundsActions', args),
  pendingRecoverFundsManyActions: (...args: ExtractArgs<Contract['calls']['pendingRecoverFundsManyActions']>) =>
    getRequest('pendingRecoverFundsManyActions', args),
  pendingRecoverNftActions: (...args: ExtractArgs<Contract['calls']['pendingRecoverNftActions']>) =>
    getRequest('pendingRecoverNftActions', args),
  pendingLootAdjustActions: (...args: ExtractArgs<Contract['calls']['pendingLootAdjustActions']>) =>
    getRequest('pendingLootAdjustActions', args),
  pendingRecoverDepositRewardsActions: (
    ...args: ExtractArgs<Contract['calls']['pendingRecoverDepositRewardsActions']>
  ) => getRequest('pendingRecoverDepositRewardsActions', args),
  pendingSetEjectionModeActions: (...args: ExtractArgs<Contract['calls']['pendingSetEjectionModeActions']>) =>
    getRequest('pendingSetEjectionModeActions', args),
}

export type Mutations = keyof Contract['mutations']
function getMutation<M extends Mutations>(functionName: M) {
  return {
    contractName: 'SwitchboardBravo' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<Contract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

export const mutation: {
  [K in Mutations]: {
    contractName: 'SwitchboardBravo'
    deployAddress: Address | undefined
    getAbi: () => typeof abi
    functionName: K
    argsType: ExtractArgs<Contract['mutations'][K]> | undefined
  }
} = {
  startGovernanceChange: getMutation('startGovernanceChange'),
  confirmGovernanceChange: getMutation('confirmGovernanceChange'),
  cancelGovernanceChange: getMutation('cancelGovernanceChange'),
  relinquishGov: getMutation('relinquishGov'),
  setGovTimeLock: getMutation('setGovTimeLock'),
  finishUndyHqSetup: getMutation('finishUndyHqSetup'),
  setActionTimeLock: getMutation('setActionTimeLock'),
  setExpiration: getMutation('setExpiration'),
  setActionTimeLockAfterSetup: getMutation('setActionTimeLockAfterSetup'),
  pause: getMutation('pause'),
  recoverFunds: getMutation('recoverFunds'),
  recoverFundsMany: getMutation('recoverFundsMany'),
  recoverNft: getMutation('recoverNft'),
  clawBackTrialFunds: getMutation('clawBackTrialFunds'),
  claimLootForUser: getMutation('claimLootForUser'),
  claimLootForManyUsers: getMutation('claimLootForManyUsers'),
  adjustLoot: getMutation('adjustLoot'),
  recoverDepositRewards: getMutation('recoverDepositRewards'),
  updateDepositPoints: getMutation('updateDepositPoints'),
  updateAssetData: getMutation('updateAssetData'),
  updateAllAssetData: getMutation('updateAllAssetData'),
  setEjectionMode: getMutation('setEjectionMode'),
  executePendingAction: getMutation('executePendingAction'),
  cancelPendingAction: getMutation('cancelPendingAction'),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) => Promise<CallReturn<'getAddys'>>
  getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) => Promise<CallReturn<'getUndyHq'>>
  getUndyHqFromGov: (
    ...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>
  ) => Promise<CallReturn<'getUndyHqFromGov'>>
  canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) => Promise<CallReturn<'canGovern'>>
  getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) => Promise<CallReturn<'getGovernors'>>
  hasPendingGovChange: (
    ...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>
  ) => Promise<CallReturn<'hasPendingGovChange'>>
  isValidGovTimeLock: (
    ...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>
  ) => Promise<CallReturn<'isValidGovTimeLock'>>
  minGovChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>
  ) => Promise<CallReturn<'minGovChangeTimeLock'>>
  maxGovChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>
  ) => Promise<CallReturn<'maxGovChangeTimeLock'>>
  governance: (...args: ExtractArgs<Contract['calls']['governance']>) => Promise<CallReturn<'governance'>>
  pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) => Promise<CallReturn<'pendingGov'>>
  numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) => Promise<CallReturn<'numGovChanges'>>
  govChangeTimeLock: (
    ...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>
  ) => Promise<CallReturn<'govChangeTimeLock'>>
  canConfirmAction: (
    ...args: ExtractArgs<Contract['calls']['canConfirmAction']>
  ) => Promise<CallReturn<'canConfirmAction'>>
  isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) => Promise<CallReturn<'isExpired'>>
  hasPendingAction: (
    ...args: ExtractArgs<Contract['calls']['hasPendingAction']>
  ) => Promise<CallReturn<'hasPendingAction'>>
  getActionConfirmationBlock: (
    ...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>
  ) => Promise<CallReturn<'getActionConfirmationBlock'>>
  isValidActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>
  ) => Promise<CallReturn<'isValidActionTimeLock'>>
  minActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['minActionTimeLock']>
  ) => Promise<CallReturn<'minActionTimeLock'>>
  maxActionTimeLock: (
    ...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>
  ) => Promise<CallReturn<'maxActionTimeLock'>>
  pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) => Promise<CallReturn<'pendingActions'>>
  actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) => Promise<CallReturn<'actionId'>>
  actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) => Promise<CallReturn<'actionTimeLock'>>
  expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) => Promise<CallReturn<'expiration'>>
  actionType: (...args: ExtractArgs<Contract['calls']['actionType']>) => Promise<CallReturn<'actionType'>>
  pendingPauseActions: (
    ...args: ExtractArgs<Contract['calls']['pendingPauseActions']>
  ) => Promise<CallReturn<'pendingPauseActions'>>
  pendingRecoverFundsActions: (
    ...args: ExtractArgs<Contract['calls']['pendingRecoverFundsActions']>
  ) => Promise<CallReturn<'pendingRecoverFundsActions'>>
  pendingRecoverFundsManyActions: (
    ...args: ExtractArgs<Contract['calls']['pendingRecoverFundsManyActions']>
  ) => Promise<CallReturn<'pendingRecoverFundsManyActions'>>
  pendingRecoverNftActions: (
    ...args: ExtractArgs<Contract['calls']['pendingRecoverNftActions']>
  ) => Promise<CallReturn<'pendingRecoverNftActions'>>
  pendingLootAdjustActions: (
    ...args: ExtractArgs<Contract['calls']['pendingLootAdjustActions']>
  ) => Promise<CallReturn<'pendingLootAdjustActions'>>
  pendingRecoverDepositRewardsActions: (
    ...args: ExtractArgs<Contract['calls']['pendingRecoverDepositRewardsActions']>
  ) => Promise<CallReturn<'pendingRecoverDepositRewardsActions'>>
  pendingSetEjectionModeActions: (
    ...args: ExtractArgs<Contract['calls']['pendingSetEjectionModeActions']>
  ) => Promise<CallReturn<'pendingSetEjectionModeActions'>>
  startGovernanceChange: (...args: ExtractArgs<Contract['mutations']['startGovernanceChange']>) => Promise<Address>
  confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) => Promise<Address>
  cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) => Promise<Address>
  relinquishGov: (...args: ExtractArgs<Contract['mutations']['relinquishGov']>) => Promise<Address>
  setGovTimeLock: (...args: ExtractArgs<Contract['mutations']['setGovTimeLock']>) => Promise<Address>
  finishUndyHqSetup: (...args: ExtractArgs<Contract['mutations']['finishUndyHqSetup']>) => Promise<Address>
  setActionTimeLock: (...args: ExtractArgs<Contract['mutations']['setActionTimeLock']>) => Promise<Address>
  setExpiration: (...args: ExtractArgs<Contract['mutations']['setExpiration']>) => Promise<Address>
  setActionTimeLockAfterSetup: (
    ...args: ExtractArgs<Contract['mutations']['setActionTimeLockAfterSetup']>
  ) => Promise<Address>
  pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => Promise<Address>
  recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) => Promise<Address>
  recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) => Promise<Address>
  recoverNft: (...args: ExtractArgs<Contract['mutations']['recoverNft']>) => Promise<Address>
  clawBackTrialFunds: (...args: ExtractArgs<Contract['mutations']['clawBackTrialFunds']>) => Promise<Address>
  claimLootForUser: (...args: ExtractArgs<Contract['mutations']['claimLootForUser']>) => Promise<Address>
  claimLootForManyUsers: (...args: ExtractArgs<Contract['mutations']['claimLootForManyUsers']>) => Promise<Address>
  adjustLoot: (...args: ExtractArgs<Contract['mutations']['adjustLoot']>) => Promise<Address>
  recoverDepositRewards: (...args: ExtractArgs<Contract['mutations']['recoverDepositRewards']>) => Promise<Address>
  updateDepositPoints: (...args: ExtractArgs<Contract['mutations']['updateDepositPoints']>) => Promise<Address>
  updateAssetData: (...args: ExtractArgs<Contract['mutations']['updateAssetData']>) => Promise<Address>
  updateAllAssetData: (...args: ExtractArgs<Contract['mutations']['updateAllAssetData']>) => Promise<Address>
  setEjectionMode: (...args: ExtractArgs<Contract['mutations']['setEjectionMode']>) => Promise<Address>
  executePendingAction: (...args: ExtractArgs<Contract['mutations']['executePendingAction']>) => Promise<Address>
  cancelPendingAction: (...args: ExtractArgs<Contract['mutations']['cancelPendingAction']>) => Promise<Address>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    getAddys: (...args: ExtractArgs<Contract['calls']['getAddys']>) =>
      singleQuery(publicClient!, call.getAddys(...args)) as Promise<CallReturn<'getAddys'>>,
    getUndyHq: (...args: ExtractArgs<Contract['calls']['getUndyHq']>) =>
      singleQuery(publicClient!, call.getUndyHq(...args)) as Promise<CallReturn<'getUndyHq'>>,
    getUndyHqFromGov: (...args: ExtractArgs<Contract['calls']['getUndyHqFromGov']>) =>
      singleQuery(publicClient!, call.getUndyHqFromGov(...args)) as Promise<CallReturn<'getUndyHqFromGov'>>,
    canGovern: (...args: ExtractArgs<Contract['calls']['canGovern']>) =>
      singleQuery(publicClient!, call.canGovern(...args)) as Promise<CallReturn<'canGovern'>>,
    getGovernors: (...args: ExtractArgs<Contract['calls']['getGovernors']>) =>
      singleQuery(publicClient!, call.getGovernors(...args)) as Promise<CallReturn<'getGovernors'>>,
    hasPendingGovChange: (...args: ExtractArgs<Contract['calls']['hasPendingGovChange']>) =>
      singleQuery(publicClient!, call.hasPendingGovChange(...args)) as Promise<CallReturn<'hasPendingGovChange'>>,
    isValidGovTimeLock: (...args: ExtractArgs<Contract['calls']['isValidGovTimeLock']>) =>
      singleQuery(publicClient!, call.isValidGovTimeLock(...args)) as Promise<CallReturn<'isValidGovTimeLock'>>,
    minGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['minGovChangeTimeLock']>) =>
      singleQuery(publicClient!, call.minGovChangeTimeLock(...args)) as Promise<CallReturn<'minGovChangeTimeLock'>>,
    maxGovChangeTimeLock: (...args: ExtractArgs<Contract['calls']['maxGovChangeTimeLock']>) =>
      singleQuery(publicClient!, call.maxGovChangeTimeLock(...args)) as Promise<CallReturn<'maxGovChangeTimeLock'>>,
    governance: (...args: ExtractArgs<Contract['calls']['governance']>) =>
      singleQuery(publicClient!, call.governance(...args)) as Promise<CallReturn<'governance'>>,
    pendingGov: (...args: ExtractArgs<Contract['calls']['pendingGov']>) =>
      singleQuery(publicClient!, call.pendingGov(...args)) as Promise<CallReturn<'pendingGov'>>,
    numGovChanges: (...args: ExtractArgs<Contract['calls']['numGovChanges']>) =>
      singleQuery(publicClient!, call.numGovChanges(...args)) as Promise<CallReturn<'numGovChanges'>>,
    govChangeTimeLock: (...args: ExtractArgs<Contract['calls']['govChangeTimeLock']>) =>
      singleQuery(publicClient!, call.govChangeTimeLock(...args)) as Promise<CallReturn<'govChangeTimeLock'>>,
    canConfirmAction: (...args: ExtractArgs<Contract['calls']['canConfirmAction']>) =>
      singleQuery(publicClient!, call.canConfirmAction(...args)) as Promise<CallReturn<'canConfirmAction'>>,
    isExpired: (...args: ExtractArgs<Contract['calls']['isExpired']>) =>
      singleQuery(publicClient!, call.isExpired(...args)) as Promise<CallReturn<'isExpired'>>,
    hasPendingAction: (...args: ExtractArgs<Contract['calls']['hasPendingAction']>) =>
      singleQuery(publicClient!, call.hasPendingAction(...args)) as Promise<CallReturn<'hasPendingAction'>>,
    getActionConfirmationBlock: (...args: ExtractArgs<Contract['calls']['getActionConfirmationBlock']>) =>
      singleQuery(publicClient!, call.getActionConfirmationBlock(...args)) as Promise<
        CallReturn<'getActionConfirmationBlock'>
      >,
    isValidActionTimeLock: (...args: ExtractArgs<Contract['calls']['isValidActionTimeLock']>) =>
      singleQuery(publicClient!, call.isValidActionTimeLock(...args)) as Promise<CallReturn<'isValidActionTimeLock'>>,
    minActionTimeLock: (...args: ExtractArgs<Contract['calls']['minActionTimeLock']>) =>
      singleQuery(publicClient!, call.minActionTimeLock(...args)) as Promise<CallReturn<'minActionTimeLock'>>,
    maxActionTimeLock: (...args: ExtractArgs<Contract['calls']['maxActionTimeLock']>) =>
      singleQuery(publicClient!, call.maxActionTimeLock(...args)) as Promise<CallReturn<'maxActionTimeLock'>>,
    pendingActions: (...args: ExtractArgs<Contract['calls']['pendingActions']>) =>
      singleQuery(publicClient!, call.pendingActions(...args)) as Promise<CallReturn<'pendingActions'>>,
    actionId: (...args: ExtractArgs<Contract['calls']['actionId']>) =>
      singleQuery(publicClient!, call.actionId(...args)) as Promise<CallReturn<'actionId'>>,
    actionTimeLock: (...args: ExtractArgs<Contract['calls']['actionTimeLock']>) =>
      singleQuery(publicClient!, call.actionTimeLock(...args)) as Promise<CallReturn<'actionTimeLock'>>,
    expiration: (...args: ExtractArgs<Contract['calls']['expiration']>) =>
      singleQuery(publicClient!, call.expiration(...args)) as Promise<CallReturn<'expiration'>>,
    actionType: (...args: ExtractArgs<Contract['calls']['actionType']>) =>
      singleQuery(publicClient!, call.actionType(...args)) as Promise<CallReturn<'actionType'>>,
    pendingPauseActions: (...args: ExtractArgs<Contract['calls']['pendingPauseActions']>) =>
      singleQuery(publicClient!, call.pendingPauseActions(...args)) as Promise<CallReturn<'pendingPauseActions'>>,
    pendingRecoverFundsActions: (...args: ExtractArgs<Contract['calls']['pendingRecoverFundsActions']>) =>
      singleQuery(publicClient!, call.pendingRecoverFundsActions(...args)) as Promise<
        CallReturn<'pendingRecoverFundsActions'>
      >,
    pendingRecoverFundsManyActions: (...args: ExtractArgs<Contract['calls']['pendingRecoverFundsManyActions']>) =>
      singleQuery(publicClient!, call.pendingRecoverFundsManyActions(...args)) as Promise<
        CallReturn<'pendingRecoverFundsManyActions'>
      >,
    pendingRecoverNftActions: (...args: ExtractArgs<Contract['calls']['pendingRecoverNftActions']>) =>
      singleQuery(publicClient!, call.pendingRecoverNftActions(...args)) as Promise<
        CallReturn<'pendingRecoverNftActions'>
      >,
    pendingLootAdjustActions: (...args: ExtractArgs<Contract['calls']['pendingLootAdjustActions']>) =>
      singleQuery(publicClient!, call.pendingLootAdjustActions(...args)) as Promise<
        CallReturn<'pendingLootAdjustActions'>
      >,
    pendingRecoverDepositRewardsActions: (
      ...args: ExtractArgs<Contract['calls']['pendingRecoverDepositRewardsActions']>
    ) =>
      singleQuery(publicClient!, call.pendingRecoverDepositRewardsActions(...args)) as Promise<
        CallReturn<'pendingRecoverDepositRewardsActions'>
      >,
    pendingSetEjectionModeActions: (...args: ExtractArgs<Contract['calls']['pendingSetEjectionModeActions']>) =>
      singleQuery(publicClient!, call.pendingSetEjectionModeActions(...args)) as Promise<
        CallReturn<'pendingSetEjectionModeActions'>
      >,

    // Mutations
    startGovernanceChange: (...args: ExtractArgs<Contract['mutations']['startGovernanceChange']>) =>
      mutate(walletClient!, mutation.startGovernanceChange)(...args),
    confirmGovernanceChange: (...args: ExtractArgs<Contract['mutations']['confirmGovernanceChange']>) =>
      mutate(walletClient!, mutation.confirmGovernanceChange)(...args),
    cancelGovernanceChange: (...args: ExtractArgs<Contract['mutations']['cancelGovernanceChange']>) =>
      mutate(walletClient!, mutation.cancelGovernanceChange)(...args),
    relinquishGov: (...args: ExtractArgs<Contract['mutations']['relinquishGov']>) =>
      mutate(walletClient!, mutation.relinquishGov)(...args),
    setGovTimeLock: (...args: ExtractArgs<Contract['mutations']['setGovTimeLock']>) =>
      mutate(walletClient!, mutation.setGovTimeLock)(...args),
    finishUndyHqSetup: (...args: ExtractArgs<Contract['mutations']['finishUndyHqSetup']>) =>
      mutate(walletClient!, mutation.finishUndyHqSetup)(...args),
    setActionTimeLock: (...args: ExtractArgs<Contract['mutations']['setActionTimeLock']>) =>
      mutate(walletClient!, mutation.setActionTimeLock)(...args),
    setExpiration: (...args: ExtractArgs<Contract['mutations']['setExpiration']>) =>
      mutate(walletClient!, mutation.setExpiration)(...args),
    setActionTimeLockAfterSetup: (...args: ExtractArgs<Contract['mutations']['setActionTimeLockAfterSetup']>) =>
      mutate(walletClient!, mutation.setActionTimeLockAfterSetup)(...args),
    pause: (...args: ExtractArgs<Contract['mutations']['pause']>) => mutate(walletClient!, mutation.pause)(...args),
    recoverFunds: (...args: ExtractArgs<Contract['mutations']['recoverFunds']>) =>
      mutate(walletClient!, mutation.recoverFunds)(...args),
    recoverFundsMany: (...args: ExtractArgs<Contract['mutations']['recoverFundsMany']>) =>
      mutate(walletClient!, mutation.recoverFundsMany)(...args),
    recoverNft: (...args: ExtractArgs<Contract['mutations']['recoverNft']>) =>
      mutate(walletClient!, mutation.recoverNft)(...args),
    clawBackTrialFunds: (...args: ExtractArgs<Contract['mutations']['clawBackTrialFunds']>) =>
      mutate(walletClient!, mutation.clawBackTrialFunds)(...args),
    claimLootForUser: (...args: ExtractArgs<Contract['mutations']['claimLootForUser']>) =>
      mutate(walletClient!, mutation.claimLootForUser)(...args),
    claimLootForManyUsers: (...args: ExtractArgs<Contract['mutations']['claimLootForManyUsers']>) =>
      mutate(walletClient!, mutation.claimLootForManyUsers)(...args),
    adjustLoot: (...args: ExtractArgs<Contract['mutations']['adjustLoot']>) =>
      mutate(walletClient!, mutation.adjustLoot)(...args),
    recoverDepositRewards: (...args: ExtractArgs<Contract['mutations']['recoverDepositRewards']>) =>
      mutate(walletClient!, mutation.recoverDepositRewards)(...args),
    updateDepositPoints: (...args: ExtractArgs<Contract['mutations']['updateDepositPoints']>) =>
      mutate(walletClient!, mutation.updateDepositPoints)(...args),
    updateAssetData: (...args: ExtractArgs<Contract['mutations']['updateAssetData']>) =>
      mutate(walletClient!, mutation.updateAssetData)(...args),
    updateAllAssetData: (...args: ExtractArgs<Contract['mutations']['updateAllAssetData']>) =>
      mutate(walletClient!, mutation.updateAllAssetData)(...args),
    setEjectionMode: (...args: ExtractArgs<Contract['mutations']['setEjectionMode']>) =>
      mutate(walletClient!, mutation.setEjectionMode)(...args),
    executePendingAction: (...args: ExtractArgs<Contract['mutations']['executePendingAction']>) =>
      mutate(walletClient!, mutation.executePendingAction)(...args),
    cancelPendingAction: (...args: ExtractArgs<Contract['mutations']['cancelPendingAction']>) =>
      mutate(walletClient!, mutation.cancelPendingAction)(...args),
  }
}
