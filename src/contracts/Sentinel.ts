/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { singleQuery } from '@dappql/async'
import { PublicClient, WalletClient } from 'viem'

type ExtractArgs<T> = T extends (...args: infer P) => any ? P : never
type Address = `0x${string}`

export const abi = [
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canSignerPerformAction',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_signer',
        type: 'address',
      },
      {
        name: '_action',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canSignerPerformAction',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_signer',
        type: 'address',
      },
      {
        name: '_action',
        type: 'uint256',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canSignerPerformAction',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_signer',
        type: 'address',
      },
      {
        name: '_action',
        type: 'uint256',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
      {
        name: '_legoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canSignerPerformAction',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_signer',
        type: 'address',
      },
      {
        name: '_action',
        type: 'uint256',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
      {
        name: '_legoIds',
        type: 'uint256[]',
      },
      {
        name: '_txRecipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canSignerPerformActionWithConfig',
    inputs: [
      {
        name: '_isOwner',
        type: 'bool',
      },
      {
        name: '_isManager',
        type: 'bool',
      },
      {
        name: '_managerData',
        type: 'tuple',
        components: [
          {
            name: 'numTxsInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumTxs',
            type: 'uint256',
          },
          {
            name: 'totalUsdValue',
            type: 'uint256',
          },
          {
            name: 'lastTxBlock',
            type: 'uint256',
          },
          {
            name: 'periodStartBlock',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_config',
        type: 'tuple',
        components: [
          {
            name: 'startBlock',
            type: 'uint256',
          },
          {
            name: 'expiryBlock',
            type: 'uint256',
          },
          {
            name: 'limits',
            type: 'tuple',
            components: [
              {
                name: 'maxUsdValuePerTx',
                type: 'uint256',
              },
              {
                name: 'maxUsdValuePerPeriod',
                type: 'uint256',
              },
              {
                name: 'maxUsdValueLifetime',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
            ],
          },
          {
            name: 'legoPerms',
            type: 'tuple',
            components: [
              {
                name: 'canManageYield',
                type: 'bool',
              },
              {
                name: 'canBuyAndSell',
                type: 'bool',
              },
              {
                name: 'canManageDebt',
                type: 'bool',
              },
              {
                name: 'canManageLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'allowedLegos',
                type: 'uint256[]',
              },
            ],
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'transferPerms',
            type: 'tuple',
            components: [
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canCreateCheque',
                type: 'bool',
              },
              {
                name: 'canAddPendingPayee',
                type: 'bool',
              },
              {
                name: 'allowedPayees',
                type: 'address[]',
              },
            ],
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
          {
            name: 'canClaimLoot',
            type: 'bool',
          },
        ],
      },
      {
        name: '_globalConfig',
        type: 'tuple',
        components: [
          {
            name: 'managerPeriod',
            type: 'uint256',
          },
          {
            name: 'startDelay',
            type: 'uint256',
          },
          {
            name: 'activationLength',
            type: 'uint256',
          },
          {
            name: 'canOwnerManage',
            type: 'bool',
          },
          {
            name: 'limits',
            type: 'tuple',
            components: [
              {
                name: 'maxUsdValuePerTx',
                type: 'uint256',
              },
              {
                name: 'maxUsdValuePerPeriod',
                type: 'uint256',
              },
              {
                name: 'maxUsdValueLifetime',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
            ],
          },
          {
            name: 'legoPerms',
            type: 'tuple',
            components: [
              {
                name: 'canManageYield',
                type: 'bool',
              },
              {
                name: 'canBuyAndSell',
                type: 'bool',
              },
              {
                name: 'canManageDebt',
                type: 'bool',
              },
              {
                name: 'canManageLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'allowedLegos',
                type: 'uint256[]',
              },
            ],
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'transferPerms',
            type: 'tuple',
            components: [
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canCreateCheque',
                type: 'bool',
              },
              {
                name: 'canAddPendingPayee',
                type: 'bool',
              },
              {
                name: 'allowedPayees',
                type: 'address[]',
              },
            ],
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_action',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canSignerPerformActionWithConfig',
    inputs: [
      {
        name: '_isOwner',
        type: 'bool',
      },
      {
        name: '_isManager',
        type: 'bool',
      },
      {
        name: '_managerData',
        type: 'tuple',
        components: [
          {
            name: 'numTxsInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumTxs',
            type: 'uint256',
          },
          {
            name: 'totalUsdValue',
            type: 'uint256',
          },
          {
            name: 'lastTxBlock',
            type: 'uint256',
          },
          {
            name: 'periodStartBlock',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_config',
        type: 'tuple',
        components: [
          {
            name: 'startBlock',
            type: 'uint256',
          },
          {
            name: 'expiryBlock',
            type: 'uint256',
          },
          {
            name: 'limits',
            type: 'tuple',
            components: [
              {
                name: 'maxUsdValuePerTx',
                type: 'uint256',
              },
              {
                name: 'maxUsdValuePerPeriod',
                type: 'uint256',
              },
              {
                name: 'maxUsdValueLifetime',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
            ],
          },
          {
            name: 'legoPerms',
            type: 'tuple',
            components: [
              {
                name: 'canManageYield',
                type: 'bool',
              },
              {
                name: 'canBuyAndSell',
                type: 'bool',
              },
              {
                name: 'canManageDebt',
                type: 'bool',
              },
              {
                name: 'canManageLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'allowedLegos',
                type: 'uint256[]',
              },
            ],
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'transferPerms',
            type: 'tuple',
            components: [
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canCreateCheque',
                type: 'bool',
              },
              {
                name: 'canAddPendingPayee',
                type: 'bool',
              },
              {
                name: 'allowedPayees',
                type: 'address[]',
              },
            ],
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
          {
            name: 'canClaimLoot',
            type: 'bool',
          },
        ],
      },
      {
        name: '_globalConfig',
        type: 'tuple',
        components: [
          {
            name: 'managerPeriod',
            type: 'uint256',
          },
          {
            name: 'startDelay',
            type: 'uint256',
          },
          {
            name: 'activationLength',
            type: 'uint256',
          },
          {
            name: 'canOwnerManage',
            type: 'bool',
          },
          {
            name: 'limits',
            type: 'tuple',
            components: [
              {
                name: 'maxUsdValuePerTx',
                type: 'uint256',
              },
              {
                name: 'maxUsdValuePerPeriod',
                type: 'uint256',
              },
              {
                name: 'maxUsdValueLifetime',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
            ],
          },
          {
            name: 'legoPerms',
            type: 'tuple',
            components: [
              {
                name: 'canManageYield',
                type: 'bool',
              },
              {
                name: 'canBuyAndSell',
                type: 'bool',
              },
              {
                name: 'canManageDebt',
                type: 'bool',
              },
              {
                name: 'canManageLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'allowedLegos',
                type: 'uint256[]',
              },
            ],
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'transferPerms',
            type: 'tuple',
            components: [
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canCreateCheque',
                type: 'bool',
              },
              {
                name: 'canAddPendingPayee',
                type: 'bool',
              },
              {
                name: 'allowedPayees',
                type: 'address[]',
              },
            ],
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_action',
        type: 'uint256',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canSignerPerformActionWithConfig',
    inputs: [
      {
        name: '_isOwner',
        type: 'bool',
      },
      {
        name: '_isManager',
        type: 'bool',
      },
      {
        name: '_managerData',
        type: 'tuple',
        components: [
          {
            name: 'numTxsInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumTxs',
            type: 'uint256',
          },
          {
            name: 'totalUsdValue',
            type: 'uint256',
          },
          {
            name: 'lastTxBlock',
            type: 'uint256',
          },
          {
            name: 'periodStartBlock',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_config',
        type: 'tuple',
        components: [
          {
            name: 'startBlock',
            type: 'uint256',
          },
          {
            name: 'expiryBlock',
            type: 'uint256',
          },
          {
            name: 'limits',
            type: 'tuple',
            components: [
              {
                name: 'maxUsdValuePerTx',
                type: 'uint256',
              },
              {
                name: 'maxUsdValuePerPeriod',
                type: 'uint256',
              },
              {
                name: 'maxUsdValueLifetime',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
            ],
          },
          {
            name: 'legoPerms',
            type: 'tuple',
            components: [
              {
                name: 'canManageYield',
                type: 'bool',
              },
              {
                name: 'canBuyAndSell',
                type: 'bool',
              },
              {
                name: 'canManageDebt',
                type: 'bool',
              },
              {
                name: 'canManageLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'allowedLegos',
                type: 'uint256[]',
              },
            ],
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'transferPerms',
            type: 'tuple',
            components: [
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canCreateCheque',
                type: 'bool',
              },
              {
                name: 'canAddPendingPayee',
                type: 'bool',
              },
              {
                name: 'allowedPayees',
                type: 'address[]',
              },
            ],
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
          {
            name: 'canClaimLoot',
            type: 'bool',
          },
        ],
      },
      {
        name: '_globalConfig',
        type: 'tuple',
        components: [
          {
            name: 'managerPeriod',
            type: 'uint256',
          },
          {
            name: 'startDelay',
            type: 'uint256',
          },
          {
            name: 'activationLength',
            type: 'uint256',
          },
          {
            name: 'canOwnerManage',
            type: 'bool',
          },
          {
            name: 'limits',
            type: 'tuple',
            components: [
              {
                name: 'maxUsdValuePerTx',
                type: 'uint256',
              },
              {
                name: 'maxUsdValuePerPeriod',
                type: 'uint256',
              },
              {
                name: 'maxUsdValueLifetime',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
            ],
          },
          {
            name: 'legoPerms',
            type: 'tuple',
            components: [
              {
                name: 'canManageYield',
                type: 'bool',
              },
              {
                name: 'canBuyAndSell',
                type: 'bool',
              },
              {
                name: 'canManageDebt',
                type: 'bool',
              },
              {
                name: 'canManageLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'allowedLegos',
                type: 'uint256[]',
              },
            ],
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'transferPerms',
            type: 'tuple',
            components: [
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canCreateCheque',
                type: 'bool',
              },
              {
                name: 'canAddPendingPayee',
                type: 'bool',
              },
              {
                name: 'allowedPayees',
                type: 'address[]',
              },
            ],
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_action',
        type: 'uint256',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
      {
        name: '_legoIds',
        type: 'uint256[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'canSignerPerformActionWithConfig',
    inputs: [
      {
        name: '_isOwner',
        type: 'bool',
      },
      {
        name: '_isManager',
        type: 'bool',
      },
      {
        name: '_managerData',
        type: 'tuple',
        components: [
          {
            name: 'numTxsInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumTxs',
            type: 'uint256',
          },
          {
            name: 'totalUsdValue',
            type: 'uint256',
          },
          {
            name: 'lastTxBlock',
            type: 'uint256',
          },
          {
            name: 'periodStartBlock',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_config',
        type: 'tuple',
        components: [
          {
            name: 'startBlock',
            type: 'uint256',
          },
          {
            name: 'expiryBlock',
            type: 'uint256',
          },
          {
            name: 'limits',
            type: 'tuple',
            components: [
              {
                name: 'maxUsdValuePerTx',
                type: 'uint256',
              },
              {
                name: 'maxUsdValuePerPeriod',
                type: 'uint256',
              },
              {
                name: 'maxUsdValueLifetime',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
            ],
          },
          {
            name: 'legoPerms',
            type: 'tuple',
            components: [
              {
                name: 'canManageYield',
                type: 'bool',
              },
              {
                name: 'canBuyAndSell',
                type: 'bool',
              },
              {
                name: 'canManageDebt',
                type: 'bool',
              },
              {
                name: 'canManageLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'allowedLegos',
                type: 'uint256[]',
              },
            ],
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'transferPerms',
            type: 'tuple',
            components: [
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canCreateCheque',
                type: 'bool',
              },
              {
                name: 'canAddPendingPayee',
                type: 'bool',
              },
              {
                name: 'allowedPayees',
                type: 'address[]',
              },
            ],
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
          {
            name: 'canClaimLoot',
            type: 'bool',
          },
        ],
      },
      {
        name: '_globalConfig',
        type: 'tuple',
        components: [
          {
            name: 'managerPeriod',
            type: 'uint256',
          },
          {
            name: 'startDelay',
            type: 'uint256',
          },
          {
            name: 'activationLength',
            type: 'uint256',
          },
          {
            name: 'canOwnerManage',
            type: 'bool',
          },
          {
            name: 'limits',
            type: 'tuple',
            components: [
              {
                name: 'maxUsdValuePerTx',
                type: 'uint256',
              },
              {
                name: 'maxUsdValuePerPeriod',
                type: 'uint256',
              },
              {
                name: 'maxUsdValueLifetime',
                type: 'uint256',
              },
              {
                name: 'maxNumTxsPerPeriod',
                type: 'uint256',
              },
              {
                name: 'txCooldownBlocks',
                type: 'uint256',
              },
              {
                name: 'failOnZeroPrice',
                type: 'bool',
              },
            ],
          },
          {
            name: 'legoPerms',
            type: 'tuple',
            components: [
              {
                name: 'canManageYield',
                type: 'bool',
              },
              {
                name: 'canBuyAndSell',
                type: 'bool',
              },
              {
                name: 'canManageDebt',
                type: 'bool',
              },
              {
                name: 'canManageLiq',
                type: 'bool',
              },
              {
                name: 'canClaimRewards',
                type: 'bool',
              },
              {
                name: 'allowedLegos',
                type: 'uint256[]',
              },
            ],
          },
          {
            name: 'whitelistPerms',
            type: 'tuple',
            components: [
              {
                name: 'canAddPending',
                type: 'bool',
              },
              {
                name: 'canConfirm',
                type: 'bool',
              },
              {
                name: 'canCancel',
                type: 'bool',
              },
              {
                name: 'canRemove',
                type: 'bool',
              },
            ],
          },
          {
            name: 'transferPerms',
            type: 'tuple',
            components: [
              {
                name: 'canTransfer',
                type: 'bool',
              },
              {
                name: 'canCreateCheque',
                type: 'bool',
              },
              {
                name: 'canAddPendingPayee',
                type: 'bool',
              },
              {
                name: 'allowedPayees',
                type: 'address[]',
              },
            ],
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
        ],
      },
      {
        name: '_action',
        type: 'uint256',
      },
      {
        name: '_assets',
        type: 'address[]',
      },
      {
        name: '_legoIds',
        type: 'uint256[]',
      },
      {
        name: '_txRecipient',
        type: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'checkManagerUsdLimits',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_manager',
        type: 'address',
      },
      {
        name: '_txUsdValue',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'checkManagerUsdLimitsAndUpdateData',
    inputs: [
      {
        name: '_txUsdValue',
        type: 'uint256',
      },
      {
        name: '_specificLimits',
        type: 'tuple',
        components: [
          {
            name: 'maxUsdValuePerTx',
            type: 'uint256',
          },
          {
            name: 'maxUsdValuePerPeriod',
            type: 'uint256',
          },
          {
            name: 'maxUsdValueLifetime',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
        ],
      },
      {
        name: '_globalLimits',
        type: 'tuple',
        components: [
          {
            name: 'maxUsdValuePerTx',
            type: 'uint256',
          },
          {
            name: 'maxUsdValuePerPeriod',
            type: 'uint256',
          },
          {
            name: 'maxUsdValueLifetime',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
        ],
      },
      {
        name: '_managerPeriod',
        type: 'uint256',
      },
      {
        name: '_managerData',
        type: 'tuple',
        components: [
          {
            name: 'numTxsInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumTxs',
            type: 'uint256',
          },
          {
            name: 'totalUsdValue',
            type: 'uint256',
          },
          {
            name: 'lastTxBlock',
            type: 'uint256',
          },
          {
            name: 'periodStartBlock',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'numTxsInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumTxs',
            type: 'uint256',
          },
          {
            name: 'totalUsdValue',
            type: 'uint256',
          },
          {
            name: 'lastTxBlock',
            type: 'uint256',
          },
          {
            name: 'periodStartBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidPayee',
    inputs: [
      {
        name: '_user',
        type: 'address',
      },
      {
        name: '_recipient',
        type: 'address',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_txUsdValue',
        type: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidPayeeAndGetData',
    inputs: [
      {
        name: '_isWhitelisted',
        type: 'bool',
      },
      {
        name: '_isOwner',
        type: 'bool',
      },
      {
        name: '_isPayee',
        type: 'bool',
      },
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_txUsdValue',
        type: 'uint256',
      },
      {
        name: '_config',
        type: 'tuple',
        components: [
          {
            name: 'startBlock',
            type: 'uint256',
          },
          {
            name: 'expiryBlock',
            type: 'uint256',
          },
          {
            name: 'canPull',
            type: 'bool',
          },
          {
            name: 'periodLength',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
          {
            name: 'primaryAsset',
            type: 'address',
          },
          {
            name: 'onlyPrimaryAsset',
            type: 'bool',
          },
          {
            name: 'unitLimits',
            type: 'tuple',
            components: [
              {
                name: 'perTxCap',
                type: 'uint256',
              },
              {
                name: 'perPeriodCap',
                type: 'uint256',
              },
              {
                name: 'lifetimeCap',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'usdLimits',
            type: 'tuple',
            components: [
              {
                name: 'perTxCap',
                type: 'uint256',
              },
              {
                name: 'perPeriodCap',
                type: 'uint256',
              },
              {
                name: 'lifetimeCap',
                type: 'uint256',
              },
            ],
          },
        ],
      },
      {
        name: '_globalConfig',
        type: 'tuple',
        components: [
          {
            name: 'defaultPeriodLength',
            type: 'uint256',
          },
          {
            name: 'startDelay',
            type: 'uint256',
          },
          {
            name: 'activationLength',
            type: 'uint256',
          },
          {
            name: 'maxNumTxsPerPeriod',
            type: 'uint256',
          },
          {
            name: 'txCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'failOnZeroPrice',
            type: 'bool',
          },
          {
            name: 'usdLimits',
            type: 'tuple',
            components: [
              {
                name: 'perTxCap',
                type: 'uint256',
              },
              {
                name: 'perPeriodCap',
                type: 'uint256',
              },
              {
                name: 'lifetimeCap',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'canPayOwner',
            type: 'bool',
          },
          {
            name: 'canPull',
            type: 'bool',
          },
        ],
      },
      {
        name: '_payeeData',
        type: 'tuple',
        components: [
          {
            name: 'numTxsInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUnitsInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumTxs',
            type: 'uint256',
          },
          {
            name: 'totalUnits',
            type: 'uint256',
          },
          {
            name: 'totalUsdValue',
            type: 'uint256',
          },
          {
            name: 'lastTxBlock',
            type: 'uint256',
          },
          {
            name: 'periodStartBlock',
            type: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'numTxsInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUnitsInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumTxs',
            type: 'uint256',
          },
          {
            name: 'totalUnits',
            type: 'uint256',
          },
          {
            name: 'totalUsdValue',
            type: 'uint256',
          },
          {
            name: 'lastTxBlock',
            type: 'uint256',
          },
          {
            name: 'periodStartBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    name: 'isValidChequeAndGetData',
    inputs: [
      {
        name: '_asset',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
      {
        name: '_txUsdValue',
        type: 'uint256',
      },
      {
        name: '_cheque',
        type: 'tuple',
        components: [
          {
            name: 'recipient',
            type: 'address',
          },
          {
            name: 'asset',
            type: 'address',
          },
          {
            name: 'amount',
            type: 'uint256',
          },
          {
            name: 'creationBlock',
            type: 'uint256',
          },
          {
            name: 'unlockBlock',
            type: 'uint256',
          },
          {
            name: 'expiryBlock',
            type: 'uint256',
          },
          {
            name: 'usdValueOnCreation',
            type: 'uint256',
          },
          {
            name: 'canManagerPay',
            type: 'bool',
          },
          {
            name: 'canBePulled',
            type: 'bool',
          },
          {
            name: 'creator',
            type: 'address',
          },
          {
            name: 'active',
            type: 'bool',
          },
        ],
      },
      {
        name: '_globalConfig',
        type: 'tuple',
        components: [
          {
            name: 'maxNumActiveCheques',
            type: 'uint256',
          },
          {
            name: 'maxChequeUsdValue',
            type: 'uint256',
          },
          {
            name: 'instantUsdThreshold',
            type: 'uint256',
          },
          {
            name: 'perPeriodPaidUsdCap',
            type: 'uint256',
          },
          {
            name: 'maxNumChequesPaidPerPeriod',
            type: 'uint256',
          },
          {
            name: 'payCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'perPeriodCreatedUsdCap',
            type: 'uint256',
          },
          {
            name: 'maxNumChequesCreatedPerPeriod',
            type: 'uint256',
          },
          {
            name: 'createCooldownBlocks',
            type: 'uint256',
          },
          {
            name: 'periodLength',
            type: 'uint256',
          },
          {
            name: 'expensiveDelayBlocks',
            type: 'uint256',
          },
          {
            name: 'defaultExpiryBlocks',
            type: 'uint256',
          },
          {
            name: 'allowedAssets',
            type: 'address[]',
          },
          {
            name: 'canManagersCreateCheques',
            type: 'bool',
          },
          {
            name: 'canManagerPay',
            type: 'bool',
          },
          {
            name: 'canBePulled',
            type: 'bool',
          },
        ],
      },
      {
        name: '_chequeData',
        type: 'tuple',
        components: [
          {
            name: 'numChequesPaidInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValuePaidInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumChequesPaid',
            type: 'uint256',
          },
          {
            name: 'totalUsdValuePaid',
            type: 'uint256',
          },
          {
            name: 'lastChequePaidBlock',
            type: 'uint256',
          },
          {
            name: 'numChequesCreatedInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueCreatedInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumChequesCreated',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueCreated',
            type: 'uint256',
          },
          {
            name: 'lastChequeCreatedBlock',
            type: 'uint256',
          },
          {
            name: 'periodStartBlock',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_isManager',
        type: 'bool',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
      },
      {
        name: '',
        type: 'tuple',
        components: [
          {
            name: 'numChequesPaidInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValuePaidInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumChequesPaid',
            type: 'uint256',
          },
          {
            name: 'totalUsdValuePaid',
            type: 'uint256',
          },
          {
            name: 'lastChequePaidBlock',
            type: 'uint256',
          },
          {
            name: 'numChequesCreatedInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueCreatedInPeriod',
            type: 'uint256',
          },
          {
            name: 'totalNumChequesCreated',
            type: 'uint256',
          },
          {
            name: 'totalUsdValueCreated',
            type: 'uint256',
          },
          {
            name: 'lastChequeCreatedBlock',
            type: 'uint256',
          },
          {
            name: 'periodStartBlock',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [],
    outputs: [],
  },
] as const

export const deployAddress: Address | undefined = '0xA9A71c4eA67f8ff41A4639f71CFc5E79611BBf30'

export type Contract = {
  calls: {
    canSignerPerformAction: (
      user: `0x${string}`,
      signer: `0x${string}`,
      action: bigint,
      assets?: `0x${string}`[],
      legoIds?: bigint[],
      txRecipient?: `0x${string}`,
    ) => Promise<boolean>
    canSignerPerformActionWithConfig: (
      isOwner: boolean,
      isManager: boolean,
      managerData: {
        numTxsInPeriod: bigint
        totalUsdValueInPeriod: bigint
        totalNumTxs: bigint
        totalUsdValue: bigint
        lastTxBlock: bigint
        periodStartBlock: bigint
      },
      config: {
        startBlock: bigint
        expiryBlock: bigint
        limits: {
          maxUsdValuePerTx: bigint
          maxUsdValuePerPeriod: bigint
          maxUsdValueLifetime: bigint
          maxNumTxsPerPeriod: bigint
          txCooldownBlocks: bigint
          failOnZeroPrice: boolean
        }
        legoPerms: {
          canManageYield: boolean
          canBuyAndSell: boolean
          canManageDebt: boolean
          canManageLiq: boolean
          canClaimRewards: boolean
          allowedLegos: bigint[]
        }
        whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean }
        transferPerms: {
          canTransfer: boolean
          canCreateCheque: boolean
          canAddPendingPayee: boolean
          allowedPayees: `0x${string}`[]
        }
        allowedAssets: `0x${string}`[]
        canClaimLoot: boolean
      },
      globalConfig: {
        managerPeriod: bigint
        startDelay: bigint
        activationLength: bigint
        canOwnerManage: boolean
        limits: {
          maxUsdValuePerTx: bigint
          maxUsdValuePerPeriod: bigint
          maxUsdValueLifetime: bigint
          maxNumTxsPerPeriod: bigint
          txCooldownBlocks: bigint
          failOnZeroPrice: boolean
        }
        legoPerms: {
          canManageYield: boolean
          canBuyAndSell: boolean
          canManageDebt: boolean
          canManageLiq: boolean
          canClaimRewards: boolean
          allowedLegos: bigint[]
        }
        whitelistPerms: { canAddPending: boolean; canConfirm: boolean; canCancel: boolean; canRemove: boolean }
        transferPerms: {
          canTransfer: boolean
          canCreateCheque: boolean
          canAddPendingPayee: boolean
          allowedPayees: `0x${string}`[]
        }
        allowedAssets: `0x${string}`[]
      },
      action: bigint,
      assets?: `0x${string}`[],
      legoIds?: bigint[],
      txRecipient?: `0x${string}`,
    ) => Promise<boolean>
    checkManagerUsdLimits: (user: `0x${string}`, manager: `0x${string}`, txUsdValue: bigint) => Promise<boolean>
    checkManagerUsdLimitsAndUpdateData: (
      txUsdValue: bigint,
      specificLimits: {
        maxUsdValuePerTx: bigint
        maxUsdValuePerPeriod: bigint
        maxUsdValueLifetime: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
      },
      globalLimits: {
        maxUsdValuePerTx: bigint
        maxUsdValuePerPeriod: bigint
        maxUsdValueLifetime: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
      },
      managerPeriod: bigint,
      managerData: {
        numTxsInPeriod: bigint
        totalUsdValueInPeriod: bigint
        totalNumTxs: bigint
        totalUsdValue: bigint
        lastTxBlock: bigint
        periodStartBlock: bigint
      },
    ) => Promise<
      [
        boolean,
        {
          numTxsInPeriod: bigint
          totalUsdValueInPeriod: bigint
          totalNumTxs: bigint
          totalUsdValue: bigint
          lastTxBlock: bigint
          periodStartBlock: bigint
        },
      ]
    >
    isValidPayee: (
      user: `0x${string}`,
      recipient: `0x${string}`,
      asset: `0x${string}`,
      amount: bigint,
      txUsdValue: bigint,
    ) => Promise<boolean>
    isValidPayeeAndGetData: (
      isWhitelisted: boolean,
      isOwner: boolean,
      isPayee: boolean,
      asset: `0x${string}`,
      amount: bigint,
      txUsdValue: bigint,
      config: {
        startBlock: bigint
        expiryBlock: bigint
        canPull: boolean
        periodLength: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
        primaryAsset: `0x${string}`
        onlyPrimaryAsset: boolean
        unitLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint }
        usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint }
      },
      globalConfig: {
        defaultPeriodLength: bigint
        startDelay: bigint
        activationLength: bigint
        maxNumTxsPerPeriod: bigint
        txCooldownBlocks: bigint
        failOnZeroPrice: boolean
        usdLimits: { perTxCap: bigint; perPeriodCap: bigint; lifetimeCap: bigint }
        canPayOwner: boolean
        canPull: boolean
      },
      payeeData: {
        numTxsInPeriod: bigint
        totalUnitsInPeriod: bigint
        totalUsdValueInPeriod: bigint
        totalNumTxs: bigint
        totalUnits: bigint
        totalUsdValue: bigint
        lastTxBlock: bigint
        periodStartBlock: bigint
      },
    ) => Promise<
      [
        boolean,
        {
          numTxsInPeriod: bigint
          totalUnitsInPeriod: bigint
          totalUsdValueInPeriod: bigint
          totalNumTxs: bigint
          totalUnits: bigint
          totalUsdValue: bigint
          lastTxBlock: bigint
          periodStartBlock: bigint
        },
      ]
    >
    isValidChequeAndGetData: (
      asset: `0x${string}`,
      amount: bigint,
      txUsdValue: bigint,
      cheque: {
        recipient: `0x${string}`
        asset: `0x${string}`
        amount: bigint
        creationBlock: bigint
        unlockBlock: bigint
        expiryBlock: bigint
        usdValueOnCreation: bigint
        canManagerPay: boolean
        canBePulled: boolean
        creator: `0x${string}`
        active: boolean
      },
      globalConfig: {
        maxNumActiveCheques: bigint
        maxChequeUsdValue: bigint
        instantUsdThreshold: bigint
        perPeriodPaidUsdCap: bigint
        maxNumChequesPaidPerPeriod: bigint
        payCooldownBlocks: bigint
        perPeriodCreatedUsdCap: bigint
        maxNumChequesCreatedPerPeriod: bigint
        createCooldownBlocks: bigint
        periodLength: bigint
        expensiveDelayBlocks: bigint
        defaultExpiryBlocks: bigint
        allowedAssets: `0x${string}`[]
        canManagersCreateCheques: boolean
        canManagerPay: boolean
        canBePulled: boolean
      },
      chequeData: {
        numChequesPaidInPeriod: bigint
        totalUsdValuePaidInPeriod: bigint
        totalNumChequesPaid: bigint
        totalUsdValuePaid: bigint
        lastChequePaidBlock: bigint
        numChequesCreatedInPeriod: bigint
        totalUsdValueCreatedInPeriod: bigint
        totalNumChequesCreated: bigint
        totalUsdValueCreated: bigint
        lastChequeCreatedBlock: bigint
        periodStartBlock: bigint
      },
      isManager: boolean,
    ) => Promise<
      [
        boolean,
        {
          numChequesPaidInPeriod: bigint
          totalUsdValuePaidInPeriod: bigint
          totalNumChequesPaid: bigint
          totalUsdValuePaid: bigint
          lastChequePaidBlock: bigint
          numChequesCreatedInPeriod: bigint
          totalUsdValueCreatedInPeriod: bigint
          totalNumChequesCreated: bigint
          totalUsdValueCreated: bigint
          lastChequeCreatedBlock: bigint
          periodStartBlock: bigint
        },
      ]
    >
  }
  mutations: {}
  events: {}
}

export type Calls = keyof Contract['calls']
export type Request<M extends Calls> = {
  contractName: 'Sentinel'
  method: M
  args: ExtractArgs<Contract['calls'][M]>
  address: Address | undefined
  deployAddress: Address | undefined
  defaultValue: Awaited<ReturnType<Contract['calls'][M]>> | undefined
  getAbi: () => typeof abi
  with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => Request<M>
  defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => Request<M>
  at: (address: Address) => Request<M>
}
export type CallReturn<M extends Calls> = NonNullable<Request<M>['defaultValue']>

function getRequest<M extends Calls>(
  method: M,
  args: ExtractArgs<Contract['calls'][M]>,
  contractAddressOrOptions?:
    | Address
    | {
        contractAddress?: Address
        defaultValue?: Awaited<ReturnType<Contract['calls'][M]>>
      },
): Request<M> {
  const address =
    typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
  const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

  const call = {
    contractName: 'Sentinel' as const,
    method,
    args,
    address,
    deployAddress,
    defaultValue,
    getAbi: () => abi,
    with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<Contract['calls'][M]>> }) => {
      call.address = options.contractAddress
      call.defaultValue = options.defaultValue
      return call as Request<M>
    },
    defaultTo: (defaultValue: Awaited<ReturnType<Contract['calls'][M]>>) => {
      call.defaultValue = defaultValue
      return call as Request<M>
    },
    at: (address: Address) => {
      call.address = address
      return call as Request<M>
    },
  } as Request<M>

  return call
}

type CallType = {
  [K in Calls]: (...args: ExtractArgs<Contract['calls'][K]>) => ReturnType<typeof getRequest<K>>
}

export const call: CallType = {
  canSignerPerformAction: (...args: ExtractArgs<Contract['calls']['canSignerPerformAction']>) =>
    getRequest('canSignerPerformAction', args),
  canSignerPerformActionWithConfig: (...args: ExtractArgs<Contract['calls']['canSignerPerformActionWithConfig']>) =>
    getRequest('canSignerPerformActionWithConfig', args),
  checkManagerUsdLimits: (...args: ExtractArgs<Contract['calls']['checkManagerUsdLimits']>) =>
    getRequest('checkManagerUsdLimits', args),
  checkManagerUsdLimitsAndUpdateData: (...args: ExtractArgs<Contract['calls']['checkManagerUsdLimitsAndUpdateData']>) =>
    getRequest('checkManagerUsdLimitsAndUpdateData', args),
  isValidPayee: (...args: ExtractArgs<Contract['calls']['isValidPayee']>) => getRequest('isValidPayee', args),
  isValidPayeeAndGetData: (...args: ExtractArgs<Contract['calls']['isValidPayeeAndGetData']>) =>
    getRequest('isValidPayeeAndGetData', args),
  isValidChequeAndGetData: (...args: ExtractArgs<Contract['calls']['isValidChequeAndGetData']>) =>
    getRequest('isValidChequeAndGetData', args),
}

export type SDK = {
  deployAddress: Address | undefined
  abi: typeof abi
  canSignerPerformAction: (
    ...args: ExtractArgs<Contract['calls']['canSignerPerformAction']>
  ) => Promise<CallReturn<'canSignerPerformAction'>>
  canSignerPerformActionWithConfig: (
    ...args: ExtractArgs<Contract['calls']['canSignerPerformActionWithConfig']>
  ) => Promise<CallReturn<'canSignerPerformActionWithConfig'>>
  checkManagerUsdLimits: (
    ...args: ExtractArgs<Contract['calls']['checkManagerUsdLimits']>
  ) => Promise<CallReturn<'checkManagerUsdLimits'>>
  checkManagerUsdLimitsAndUpdateData: (
    ...args: ExtractArgs<Contract['calls']['checkManagerUsdLimitsAndUpdateData']>
  ) => Promise<CallReturn<'checkManagerUsdLimitsAndUpdateData'>>
  isValidPayee: (...args: ExtractArgs<Contract['calls']['isValidPayee']>) => Promise<CallReturn<'isValidPayee'>>
  isValidPayeeAndGetData: (
    ...args: ExtractArgs<Contract['calls']['isValidPayeeAndGetData']>
  ) => Promise<CallReturn<'isValidPayeeAndGetData'>>
  isValidChequeAndGetData: (
    ...args: ExtractArgs<Contract['calls']['isValidChequeAndGetData']>
  ) => Promise<CallReturn<'isValidChequeAndGetData'>>
}

export function toSdk(publicClient?: PublicClient, walletClient?: WalletClient): SDK {
  return {
    deployAddress,
    abi,
    // Queries
    canSignerPerformAction: (...args: ExtractArgs<Contract['calls']['canSignerPerformAction']>) =>
      singleQuery(publicClient!, call.canSignerPerformAction(...args)) as Promise<CallReturn<'canSignerPerformAction'>>,
    canSignerPerformActionWithConfig: (...args: ExtractArgs<Contract['calls']['canSignerPerformActionWithConfig']>) =>
      singleQuery(publicClient!, call.canSignerPerformActionWithConfig(...args)) as Promise<
        CallReturn<'canSignerPerformActionWithConfig'>
      >,
    checkManagerUsdLimits: (...args: ExtractArgs<Contract['calls']['checkManagerUsdLimits']>) =>
      singleQuery(publicClient!, call.checkManagerUsdLimits(...args)) as Promise<CallReturn<'checkManagerUsdLimits'>>,
    checkManagerUsdLimitsAndUpdateData: (
      ...args: ExtractArgs<Contract['calls']['checkManagerUsdLimitsAndUpdateData']>
    ) =>
      singleQuery(publicClient!, call.checkManagerUsdLimitsAndUpdateData(...args)) as Promise<
        CallReturn<'checkManagerUsdLimitsAndUpdateData'>
      >,
    isValidPayee: (...args: ExtractArgs<Contract['calls']['isValidPayee']>) =>
      singleQuery(publicClient!, call.isValidPayee(...args)) as Promise<CallReturn<'isValidPayee'>>,
    isValidPayeeAndGetData: (...args: ExtractArgs<Contract['calls']['isValidPayeeAndGetData']>) =>
      singleQuery(publicClient!, call.isValidPayeeAndGetData(...args)) as Promise<CallReturn<'isValidPayeeAndGetData'>>,
    isValidChequeAndGetData: (...args: ExtractArgs<Contract['calls']['isValidChequeAndGetData']>) =>
      singleQuery(publicClient!, call.isValidChequeAndGetData(...args)) as Promise<
        CallReturn<'isValidChequeAndGetData'>
      >,

    // Mutations
  }
}
